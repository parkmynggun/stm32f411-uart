/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : STM32 ADC Monitor (Basys3 + HC-05) + Motor Control
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;

// UART 수신 관련

#define RX_BUF_SIZE 64
uint8_t rxData;
char rx_buf[RX_BUF_SIZE];
uint8_t rx_index = 0;
volatile uint8_t rx_complete = 0;

uint32_t joystick[4] = {0,0,0,0};
uint32_t last_joystick[4] = {0,0,0,0};
uint8_t is_neutral = 0;


// 모터 제어 관련
typedef enum {
    MODE_MANUAL = 0,
    MODE_AUTO = 1
} MotorMode_t;

uint8_t toggleModeFlag = 0;
volatile uint8_t newValueFlag = 0;
static uint32_t lastToggleTime = 0;

volatile uint16_t currentCcrLeft = 0;
volatile uint16_t currentCcrRight = 0;
volatile uint16_t targetCcrLeft = 0;
volatile uint16_t targetCcrRight = 0;
volatile uint16_t lastSpeed = 300;
volatile MotorMode_t currentMode = MODE_MANUAL;

#define SPEED_STEP 10

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
    if(ch == '\n') HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 1000);
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
    return ch;
}
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
// 모터 제어 함수 선언
MotorMode_t GetCurrentMode(void);
void UpdateMotorSpeed(void);
void SetMotorDirection_Safe(void);
void Motor_Init(void);
void Motor_Task(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 모터 관련 함수들
MotorMode_t GetCurrentMode(void)
{
    GPIO_PinState pc1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
    GPIO_PinState pc0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);

    if (pc1 == GPIO_PIN_SET && pc0 == GPIO_PIN_RESET)
    {
        return MODE_AUTO;
    }
    else
    {
        return MODE_MANUAL;
    }
}

void UpdateMotorSpeed(void)
{
    if (currentCcrLeft < targetCcrLeft)
        currentCcrLeft = (currentCcrLeft + SPEED_STEP > targetCcrLeft) ? targetCcrLeft : currentCcrLeft + SPEED_STEP;
    else if (currentCcrLeft > targetCcrLeft)
        currentCcrLeft = (currentCcrLeft < SPEED_STEP + targetCcrLeft) ? targetCcrLeft : currentCcrLeft - SPEED_STEP;

    if (currentCcrRight < targetCcrRight)
        currentCcrRight = (currentCcrRight + SPEED_STEP > targetCcrRight) ? targetCcrRight : currentCcrRight + SPEED_STEP;
    else if (currentCcrRight > targetCcrRight)
        currentCcrRight = (currentCcrRight < SPEED_STEP + targetCcrRight) ? targetCcrRight : currentCcrRight - SPEED_STEP;

    TIM3->CCR2 = (currentCcrLeft < 200) ? 0 : currentCcrLeft;
    TIM4->CCR2 = (currentCcrRight < 200) ? 0 : currentCcrRight;
}

void SetMotorDirection_Safe(void)
{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
}

void Motor_Init(void)
{
    // PWM 시작
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);

    // 초기값 설정
    currentCcrLeft = 0;
    currentCcrRight = 0;
    targetCcrLeft = 0;
    targetCcrRight = 0;

    // 모터 정지 상태로 초기화
    SetMotorDirection_Safe();

    // 초기 모드 설정
    currentMode = GetCurrentMode();

    printf("[MOTOR] Initialized - Mode: %s\r\n", (currentMode == MODE_AUTO) ? "AUTO" : "MANUAL");
}

void Motor_Task(void)
{
    // 모터 모드 체크
    MotorMode_t newMode = GetCurrentMode();
    if (newMode != currentMode)
    {
        currentMode = newMode;
        printf("[MOTOR] Mode changed to: %s\r\n", (currentMode == MODE_AUTO) ? "AUTO" : "MANUAL");
        SetMotorDirection_Safe();
        targetCcrLeft = 0;
        targetCcrRight = 0;
    }

    // 모터 속도 업데이트
    UpdateMotorSpeed();
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance != USART1) return;

    // 라인 종료 문자는 문자열 종료
    if (rxData == '\r' || rxData == '\n')
    {
        if(rx_index > 0)
        {
            rx_buf[rx_index] = '\0';
            rx_complete = 1;
            rx_index = 0;
        }
    }
    else
    {
        // 일반 문자 처리
        if(rx_index < RX_BUF_SIZE - 1)
        {
            rx_buf[rx_index++] = rxData;
        }
        else
        {
            // 버퍼 오버플로우 방지
            rx_index = 0;
            memset(rx_buf, 0, RX_BUF_SIZE);
        }
    }

    // 다음 수신 준비
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
}

/* 수신 데이터 파싱 */
void Process_Received_Data(void)
{
    if(!rx_complete) return;

    if(strncmp(rx_buf, "X1:", 3) == 0) joystick[0] = atoi(&rx_buf[3]);
    else if(strncmp(rx_buf, "Y1:", 3) == 0) joystick[1] = atoi(&rx_buf[3]);
    else if(strncmp(rx_buf, "X2:", 3) == 0) joystick[2] = atoi(&rx_buf[3]);
    else if(strncmp(rx_buf, "Y2:", 3) == 0) joystick[3] = atoi(&rx_buf[3]);
    else if(strcmp(rx_buf, "NEUTRAL") == 0)
    {
        for(int i=0;i<4;i++) joystick[i] = 2048;
        is_neutral = 1;
    }
    else if(strcmp(rx_buf, "END") == 0)
    {
        memcpy(last_joystick, joystick, sizeof(joystick));
        is_neutral = 0;
    }

    rx_complete = 0;
    memset(rx_buf, 0, RX_BUF_SIZE);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */

    // 시스템 시작 메시지
    printf("=== STM32 Bluetooth Receiver + Motor Control ===\r\n");
    printf("Waiting for data from Basys3...\r\n");

    // 변수 초기화
    rx_index = 0;
    rx_complete = 0;
    memset(rx_buf, 0, RX_BUF_SIZE);

    // 모터 초기화
    Motor_Init();

    // UART 인터럽트 수신 시작
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while(1)
    {
    	Process_Received_Data();

    	    // 모드에 따른 모터 속도 적용
    	    if(currentMode == MODE_MANUAL)
    	    {
    	        targetCcrLeft = joystick[0] >> 2;
    	        targetCcrRight = joystick[1] >> 2;
    	    }

    	    // 모터 업데이트
    	    Motor_Task();

    	    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
