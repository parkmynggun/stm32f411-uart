/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body (수정된 버전)
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include <stdio.h>
#include <string.h>

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define RX_BUF_SIZE 128  // 버퍼 크기 증가

uint8_t rxData;
char rxBuf[RX_BUF_SIZE];
volatile uint8_t rxIndex = 0;
volatile uint8_t dataReady = 0;  // 데이터 처리 플래그

uint32_t adc_parsed[4];
volatile uint32_t adc_live[4] = {0, 0, 0, 0};

// 통계용 변수들
volatile uint32_t total_packets = 0;
volatile uint32_t success_packets = 0;
volatile uint32_t error_packets = 0;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
  if(ch == '\n')
  {
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 1000);
  }
  HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 1000);
  return ch;
}
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void ProcessReceivedData(void);
void ClearRxBuffer(void);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if(huart->Instance == USART1)
    {
        // 버퍼 오버플로우 방지
        if(rxIndex >= RX_BUF_SIZE - 1) {
            printf("Buffer overflow! Resetting...\r\n");
            ClearRxBuffer();
            HAL_UART_Receive_IT(&huart1, &rxData, 1);
            return;
        }

        // 개행 문자 또는 캐리지 리턴을 받으면 처리
        if(rxData == '\n' || rxData == '\r') {
            if(rxIndex > 0) {  // 빈 줄 무시
                rxBuf[rxIndex] = '\0';    // 문자열 종료
                dataReady = 1;            // 메인 루프에서 처리하도록 플래그 설정
            }
        } else if(rxData >= 32 && rxData <= 126) {  // 인쇄 가능한 ASCII만 저장
            rxBuf[rxIndex++] = rxData;
        }
        // 제어 문자나 특수 문자는 무시

        // 다음 바이트 수신 준비
        HAL_UART_Receive_IT(&huart1, &rxData, 1);
    }
}

void ProcessReceivedData(void)
{
    total_packets++;

    printf("Raw data: [%s] (len=%d)\r\n", rxBuf, strlen(rxBuf));

    // 더 엄격한 파싱
    if(strncmp(rxBuf, "ADC:", 4) == 0) {
        int parsed_count = sscanf(rxBuf, "ADC:%lu,%lu,%lu,%lu",
                  &adc_parsed[0], &adc_parsed[1],
                  &adc_parsed[2], &adc_parsed[3]);

        if(parsed_count == 4) {
            // 범위 검증 (ADC는 0-4095 범위)
            uint8_t valid = 1;
            for(int i = 0; i < 4; i++) {
                if(adc_parsed[i] > 4095) {
                    valid = 0;
                    break;
                }
            }

            if(valid) {
                // 성공적으로 파싱 및 검증됨
                for(int i = 0; i < 4; i++) {
                    adc_live[i] = adc_parsed[i];
                }
                success_packets++;

                printf("✓ ADC: %lu, %lu, %lu, %lu [OK: %lu/%lu]\r\n",
                       adc_parsed[0], adc_parsed[1],
                       adc_parsed[2], adc_parsed[3],
                       success_packets, total_packets);
            } else {
                error_packets++;
                printf("✗ Invalid ADC range [Err: %lu/%lu]\r\n",
                       error_packets, total_packets);
            }
        } else {
            error_packets++;
            printf("✗ Parse failed (%d fields) [Err: %lu/%lu]\r\n",
                   parsed_count, error_packets, total_packets);
        }
    } else {
        error_packets++;
        printf("✗ Invalid format [Err: %lu/%lu]\r\n",
               error_packets, total_packets);
    }
}

void ClearRxBuffer(void)
{
    memset(rxBuf, 0, RX_BUF_SIZE);
    rxIndex = 0;
    dataReady = 0;
}

void StartUART_IT(void)
{
    ClearRxBuffer();
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();

  /* USER CODE BEGIN 2 */
  // UART 타임아웃 설정 (옵션)
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;

  StartUART_IT();

  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);

  printf("=== STM32 ADC Monitor Started ===\r\n");
  printf("Waiting for Basys3 data...\r\n\r\n");

  uint32_t status_counter = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // 데이터 처리는 메인 루프에서 (인터럽트 처리 시간 단축)
    if(dataReady) {
        ProcessReceivedData();
        ClearRxBuffer();
    }

    // 10초마다 상태 출력
    if(++status_counter >= 1000000) {  // 대략 10초 (CPU 속도에 따라 조정 필요)
        if(total_packets > 0) {
            printf("\n--- Status ---\r\n");
            printf("Success: %lu, Error: %lu, Total: %lu\r\n",
                   success_packets, error_packets, total_packets);
            printf("Success Rate: %lu%%\r\n",
                   (success_packets * 100) / total_packets);
            printf("Current ADC: %lu, %lu, %lu, %lu\r\n\n",
                   adc_live[0], adc_live[1], adc_live[2], adc_live[3]);
        }
        status_counter = 0;
    }

    // CPU 부하 줄이기
    HAL_Delay(1);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 12;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
