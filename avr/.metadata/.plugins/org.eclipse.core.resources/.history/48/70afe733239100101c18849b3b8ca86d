#include "pid_motor.h"
#include "tim.h"
#include "gpio.h"
#include <math.h>  // fabsf
#include "motor.h" // IsDoorOpen() 사용

// -----------------------------
// PID 상태 변수 (좌우/상하 분리)
static float pid_integral_lr = 0;
static float pid_prev_error_lr = 0;
static float pid_integral_ud = 0;
static float pid_prev_error_ud = 0;

// 디버깅용 변수
float pid_output_debug = 0;
float pid_p_debug_lr = 0;
float pid_i_debug_lr = 0;
float pid_d_debug_lr = 0;
float pid_p_debug_ud = 0;
float pid_i_debug_ud = 0;
float pid_d_debug_ud = 0;

// -----------------------------
// DC 모터 핀 정의
#define MOTOR_LR_IN1_PORT GPIOC
#define MOTOR_LR_IN1_PIN  GPIO_PIN_0
#define MOTOR_LR_IN2_PORT GPIOC
#define MOTOR_LR_IN2_PIN  GPIO_PIN_1
#define MOTOR_LR_PWM_CHANNEL TIM_CHANNEL_2
#define MOTOR_LR_PWM_TIMER   &htim3

#define MOTOR_UD_IN1_PORT GPIOB
#define MOTOR_UD_IN1_PIN  GPIO_PIN_1
#define MOTOR_UD_IN2_PORT GPIOB
#define MOTOR_UD_IN2_PIN  GPIO_PIN_2
#define MOTOR_UD_PWM_CHANNEL TIM_CHANNEL_3
#define MOTOR_UD_PWM_TIMER   &htim3

#define MOTOR_PWM_NEUTRAL 0
#define MOTOR_PWM_MAX     999
#define MOTOR_PWM_MIN     0

// -----------------------------
// 초기화
void PID_Motor_Init(void)
{
    HAL_TIM_PWM_Start(MOTOR_LR_PWM_TIMER, MOTOR_LR_PWM_CHANNEL);
    __HAL_TIM_SET_COMPARE(MOTOR_LR_PWM_TIMER, MOTOR_LR_PWM_CHANNEL, MOTOR_PWM_NEUTRAL);

    HAL_TIM_PWM_Start(MOTOR_UD_PWM_TIMER, MOTOR_UD_PWM_CHANNEL);
    __HAL_TIM_SET_COMPARE(MOTOR_UD_PWM_TIMER, MOTOR_UD_PWM_CHANNEL, MOTOR_PWM_NEUTRAL);

    pid_integral_lr = 0;
    pid_prev_error_lr = 0;
    pid_integral_ud = 0;
    pid_prev_error_ud = 0;

    HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_RESET);
}

// -----------------------------
// Turret PID 제어 + DC 모터 제어
void Turret_PID_Control(float dt, float ir_distances[])
{
    // 문 상태 확인
    uint8_t door_open = IsDoorOpen();
    if(!door_open)
    {
        // 문 닫힘: 모터 멈춤
        __HAL_TIM_SET_COMPARE(MOTOR_LR_PWM_TIMER, MOTOR_LR_PWM_CHANNEL, MOTOR_PWM_NEUTRAL);
        __HAL_TIM_SET_COMPARE(MOTOR_UD_PWM_TIMER, MOTOR_UD_PWM_CHANNEL, MOTOR_PWM_NEUTRAL);
        HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_RESET);
        return;
    }

    float left  = ir_distances[0];
    float right = ir_distances[1];
    float up    = ir_distances[2];
    float down  = ir_distances[3];

    float total_lr = left + right;
    float total_ud = up + down;

    // PID 상수
    const float DIST_THRESHOLD = 50.0f;
    const float Kp_lr = 2.0f, Ki_lr = 1.5f, Kd_lr = 0.3f;
    const float Kp_ud = 2.5f, Ki_ud = 1.2f, Kd_ud = 0.3f;

    // 좌우 PID 계산
    float error_lr = right - left;
    pid_integral_lr += error_lr * dt;
    float derivative_lr = (error_lr - pid_prev_error_lr) / dt;
    pid_prev_error_lr = error_lr;

    pid_p_debug_lr = Kp_lr * error_lr;
    pid_i_debug_lr = Ki_lr * pid_integral_lr;
    pid_d_debug_lr = Kd_lr * derivative_lr;

    float output_lr = pid_p_debug_lr + pid_i_debug_lr + pid_d_debug_lr;
    pid_output_debug = output_lr;

    if(total_lr <= DIST_THRESHOLD) output_lr = 50.0f;

    // 상하 PID 계산
    float error_ud = down - up;
    pid_integral_ud += error_ud * dt;
    float derivative_ud = (error_ud - pid_prev_error_ud) / dt;
    pid_prev_error_ud = error_ud;

    pid_p_debug_ud = Kp_ud * error_ud;
    pid_i_debug_ud = Ki_ud * pid_integral_ud;
    pid_d_debug_ud = Kd_ud * derivative_ud;

    float output_ud = pid_p_debug_ud + pid_i_debug_ud + pid_d_debug_ud;

    if(total_ud <= DIST_THRESHOLD) output_ud = 50.0f;

    // 출력 제한
    if(output_lr > 100.0f) output_lr = 100.0f;
    else if(output_lr < -100.0f) output_lr = -100.0f;

    if(output_ud > 100.0f) output_ud = 100.0f;
    else if(output_ud < -100.0f) output_ud = -100.0f;

    // PWM 계산
    int16_t pwm_lr = (int16_t)(output_lr * 7.0f);
    int16_t pwm_ud = (int16_t)(output_ud * 7.0f);

    if(pwm_lr > MOTOR_PWM_MAX) pwm_lr = MOTOR_PWM_MAX;
    if(pwm_lr < -MOTOR_PWM_MAX) pwm_lr = -MOTOR_PWM_MAX;

    if(pwm_ud > MOTOR_PWM_MAX) pwm_ud = MOTOR_PWM_MAX;
    if(pwm_ud < -MOTOR_PWM_MAX) pwm_ud = -MOTOR_PWM_MAX;

    // -----------------------------
    // 가운데 멈춤 로직 추가
    const float CENTER_THRESHOLD = 5.0f; // 오차 ±5 이내면 멈춤
    if(fabsf(output_lr) < CENTER_THRESHOLD) {
        pwm_lr = 0;
        HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_RESET);
    }

    if(fabsf(output_ud) < CENTER_THRESHOLD) {
        pwm_ud = 0;
        HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_RESET);
    }

    // PWM 설정
    __HAL_TIM_SET_COMPARE(MOTOR_LR_PWM_TIMER, MOTOR_LR_PWM_CHANNEL, abs(pwm_lr));
    __HAL_TIM_SET_COMPARE(MOTOR_UD_PWM_TIMER, MOTOR_UD_PWM_CHANNEL, abs(pwm_ud));

    // 모터 방향 설정 (PWM 0이면 방향 설정 안 함)
    if(pwm_lr != 0) {
        if(output_lr >= 0) {
            HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_SET);
            HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_RESET);
        } else {
            HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_SET);
        }
    }

    if(pwm_ud != 0) {
        if(output_ud >= 0) {
            HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_SET);
            HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_RESET);
        } else {
            HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD2_PIN, GPIO_PIN_SET);
        }
    }
}

