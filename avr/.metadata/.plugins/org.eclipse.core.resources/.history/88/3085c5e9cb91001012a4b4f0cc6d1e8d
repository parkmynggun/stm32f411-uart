/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : STM32 ADC Monitor (Basys3 + HC-05)
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;

#define RX_BUF_SIZE 64
uint8_t rxData;                // 수신 1바이트
char rx_buf[RX_BUF_SIZE];      // 라인 버퍼
uint8_t rx_index = 0;

uint32_t joystick[4];          // 최신 값
uint32_t last_joystick[4];     // END 신호 시 저장
uint8_t is_neutral = 0;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
    if(ch == '\n') HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 1000);
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
    return ch;
}
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART1)
    {
        char c = (char)rxData;

        if (c == '\n' || rx_index >= RX_BUF_SIZE-1) {
            rx_buf[rx_index] = '\0';

            if (strncmp(rx_buf, "X1:", 3) == 0) {
                joystick[0] = atoi(rx_buf+3);
                printf(">> X1 = %lu\r\n", joystick[0]);
            }
            // ... (Y1, X2, Y2, END 처리 동일)
            rx_index = 0;
        } else {
            rx_buf[rx_index++] = c;
        }

        HAL_UART_Receive_IT(&huart1, &rxData, 1); // 다시 수신 준비
    }
}
//
//void UART_ReceiveParse(void) {
//    uint8_t c;
//    if(HAL_UART_Receive(&huart1, &c, 1, 10) == HAL_OK) {
//        if(c == '\n' || rx_index >= BUF_SIZE-1) {
//            rx_buf[rx_index] = '\0';
//
//            if(strncmp(rx_buf, "X1:", 3) == 0) {
//                sscanf(rx_buf+3, "%lu", &joystick[0]);
//                is_neutral = 0;
//            } else if(strncmp(rx_buf, "Y1:", 3) == 0) {
//                sscanf(rx_buf+3, "%lu", &joystick[1]);
//                is_neutral = 0;
//            } else if(strncmp(rx_buf, "X2:", 3) == 0) {
//                sscanf(rx_buf+3, "%lu", &joystick[2]);
//                is_neutral = 0;
//            } else if(strncmp(rx_buf, "Y2:", 3) == 0) {
//                sscanf(rx_buf+3, "%lu", &joystick[3]);
//                is_neutral = 0;
//            } else if(strcmp(rx_buf, "NEUTRAL") == 0) {
//                for(int i=0;i<4;i++) joystick[i] = 2048;
//                is_neutral = 1;
//            } else if(strcmp(rx_buf, "END") == 0) {
//                // END 신호 기준으로 디버깅용 배열에 저장
//                for(int i=0;i<4;i++) last_joystick[i] = joystick[i];
//            }
//
//            rx_index = 0; // 버퍼 초기화
//        } else {
//            rx_buf[rx_index++] = c;
//        }
//    }
//}
//void ProcessReceivedData(void)
//{
//    total_packets++;
//
//    if(strncmp(rxBuf,"ADC:",4) == 0)
//    {
//        int parsed_count = sscanf(rxBuf,"ADC:%lu,%lu,%lu,%lu",
//                                  &adc_parsed[0], &adc_parsed[1],
//                                  &adc_parsed[2], &adc_parsed[3]);
//        if(parsed_count == 4)
//        {
//            uint8_t valid = 1;
//            for(int i=0;i<4;i++)
//                if(adc_parsed[i] > 4095) { valid=0; break; }
//
//            if(valid)
//            {
//                for(int i=0;i<4;i++) adc_live[i] = adc_parsed[i];
//                success_packets++;
//                printf("✓ ADC: %lu,%lu,%lu,%lu [OK %lu/%lu]\r\n",
//                       adc_live[0],adc_live[1],adc_live[2],adc_live[3],
//                       success_packets,total_packets);
//            }
//            else
//            {
//                error_packets++;
//                printf("✗ ADC out of range [Err %lu/%lu]\r\n",
//                       error_packets,total_packets);
//            }
//        }
//        else
//        {
//            error_packets++;
//            printf("✗ Parse failed (%d fields) [Err %lu/%lu]\r\n",
//                   parsed_count,error_packets,total_packets);
//        }
//    }
//    else if(strncmp(rxBuf,"END",3)==0)
//    {
//        printf("Packet complete.\r\n");
//    }
//    else
//    {
//        error_packets++;
//        printf("✗ Invalid format [Err %lu/%lu]\r\n",error_packets,total_packets);
//    }
//}
//
//void ClearRxBuffer(void)
//{
//    memset(rxBuf,0,RX_BUF_SIZE);
//    rxIndex = 0;
//    dataReady = 0;
//}
//
//void StartUART_IT(void)
//{
//    ClearRxBuffer();
//    HAL_UART_Receive_IT(&huart1,&rxData,1);
//}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */

    //HAL_UART_Receive_IT(&huart1, &rxData, 1);

    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
    // 시스템 시작 메시지
    HAL_UART_Transmit(&huart2, (uint8_t*)"System Starting...\r\n", 20, 100);
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while(1)
    {
    	   printf("[Loop] X1=%lu, Y1=%lu, X2=%lu, Y2=%lu\r\n",
    	           joystick[0], joystick[1], joystick[2], joystick[3]);
    	    HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 12;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
