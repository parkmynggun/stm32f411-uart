
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cfc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004e9c  08004e9c  00005e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050bc  080050bc  00007088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080050bc  080050bc  000060bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050c4  080050c4  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c4  080050c4  000060c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050c8  080050c8  000060c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080050cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000088  08005154  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08005154  00007368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e137  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232b  00000000  00000000  000151ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00017520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a76  00000000  00000000  00018298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017689  00000000  00000000  00018d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0f7  00000000  00000000  00030397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902b9  00000000  00000000  0003f48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf747  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004030  00000000  00000000  000cf78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d37bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e84 	.word	0x08004e84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08004e84 	.word	0x08004e84

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_GPIO_Init+0x68>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a16      	ldr	r2, [pc, #88]	@ (8000634 <MX_GPIO_Init+0x68>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_GPIO_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <MX_GPIO_Init+0x68>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000634 <MX_GPIO_Init+0x68>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <MX_GPIO_Init+0x68>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_GPIO_Init+0x68>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <MX_GPIO_Init+0x68>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_GPIO_Init+0x68>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800

08000638 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    if(ch == '\n') HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 1000);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b0a      	cmp	r3, #10
 8000644:	d106      	bne.n	8000654 <__io_putchar+0x1c>
 8000646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064a:	2201      	movs	r2, #1
 800064c:	4907      	ldr	r1, [pc, #28]	@ (800066c <__io_putchar+0x34>)
 800064e:	4808      	ldr	r0, [pc, #32]	@ (8000670 <__io_putchar+0x38>)
 8000650:	f002 fbd6 	bl	8002e00 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 8000654:	1d39      	adds	r1, r7, #4
 8000656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065a:	2201      	movs	r2, #1
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <__io_putchar+0x38>)
 800065e:	f002 fbcf 	bl	8002e00 <HAL_UART_Transmit>
    return ch;
 8000662:	687b      	ldr	r3, [r7, #4]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	08004e9c 	.word	0x08004e9c
 8000670:	200001d0 	.word	0x200001d0

08000674 <GetCurrentMode>:
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */

// 모터 관련 함수들
MotorMode_t GetCurrentMode(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
    // 사용자의 하드웨어에 맞게 핀 설정을 확인해야 합니다.
    // 예시: PB13, PB14 핀으로 모드 감지
    GPIO_PinState pc1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800067a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067e:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <GetCurrentMode+0x3c>)
 8000680:	f001 fa3c 	bl	8001afc <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState pc0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000688:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800068c:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <GetCurrentMode+0x3c>)
 800068e:	f001 fa35 	bl	8001afc <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	71bb      	strb	r3, [r7, #6]

    if (pc1 == GPIO_PIN_SET && pc0 == GPIO_PIN_RESET)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d104      	bne.n	80006a6 <GetCurrentMode+0x32>
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <GetCurrentMode+0x32>
    {
        return MODE_AUTO;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <GetCurrentMode+0x34>
    }
    else
    {
        return MODE_MANUAL;
 80006a6:	2300      	movs	r3, #0
    }
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40020400 	.word	0x40020400

080006b4 <UpdateMotorSpeed>:

void UpdateMotorSpeed(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
    // 현재 속도에서 목표 속도로 부드럽게 변경
    if (currentCcrLeft < targetCcrLeft)
 80006b8:	4b47      	ldr	r3, [pc, #284]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b47      	ldr	r3, [pc, #284]	@ (80007dc <UpdateMotorSpeed+0x128>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d214      	bcs.n	80006f2 <UpdateMotorSpeed+0x3e>
        currentCcrLeft = (currentCcrLeft + SPEED_STEP > targetCcrLeft) ? targetCcrLeft : currentCcrLeft + SPEED_STEP;
 80006c8:	4b43      	ldr	r3, [pc, #268]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	3309      	adds	r3, #9
 80006d0:	4a42      	ldr	r2, [pc, #264]	@ (80007dc <UpdateMotorSpeed+0x128>)
 80006d2:	8812      	ldrh	r2, [r2, #0]
 80006d4:	b292      	uxth	r2, r2
 80006d6:	4293      	cmp	r3, r2
 80006d8:	da05      	bge.n	80006e6 <UpdateMotorSpeed+0x32>
 80006da:	4b3f      	ldr	r3, [pc, #252]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	330a      	adds	r3, #10
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	e002      	b.n	80006ec <UpdateMotorSpeed+0x38>
 80006e6:	4b3d      	ldr	r3, [pc, #244]	@ (80007dc <UpdateMotorSpeed+0x128>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	4a3a      	ldr	r2, [pc, #232]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 80006ee:	8013      	strh	r3, [r2, #0]
 80006f0:	e01b      	b.n	800072a <UpdateMotorSpeed+0x76>
    else if (currentCcrLeft > targetCcrLeft)
 80006f2:	4b39      	ldr	r3, [pc, #228]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <UpdateMotorSpeed+0x128>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	429a      	cmp	r2, r3
 8000700:	d913      	bls.n	800072a <UpdateMotorSpeed+0x76>
        currentCcrLeft = (currentCcrLeft < SPEED_STEP + targetCcrLeft) ? targetCcrLeft : currentCcrLeft - SPEED_STEP;
 8000702:	4b36      	ldr	r3, [pc, #216]	@ (80007dc <UpdateMotorSpeed+0x128>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	b29b      	uxth	r3, r3
 8000708:	3309      	adds	r3, #9
 800070a:	4a33      	ldr	r2, [pc, #204]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 800070c:	8812      	ldrh	r2, [r2, #0]
 800070e:	b292      	uxth	r2, r2
 8000710:	4293      	cmp	r3, r2
 8000712:	da05      	bge.n	8000720 <UpdateMotorSpeed+0x6c>
 8000714:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	b29b      	uxth	r3, r3
 800071a:	3b0a      	subs	r3, #10
 800071c:	b29b      	uxth	r3, r3
 800071e:	e002      	b.n	8000726 <UpdateMotorSpeed+0x72>
 8000720:	4b2e      	ldr	r3, [pc, #184]	@ (80007dc <UpdateMotorSpeed+0x128>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4a2c      	ldr	r2, [pc, #176]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 8000728:	8013      	strh	r3, [r2, #0]

    if (currentCcrRight < targetCcrRight)
 800072a:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <UpdateMotorSpeed+0x130>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	b29b      	uxth	r3, r3
 8000736:	429a      	cmp	r2, r3
 8000738:	d214      	bcs.n	8000764 <UpdateMotorSpeed+0xb0>
        currentCcrRight = (currentCcrRight + SPEED_STEP > targetCcrRight) ? targetCcrRight : currentCcrRight + SPEED_STEP;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	3309      	adds	r3, #9
 8000742:	4a28      	ldr	r2, [pc, #160]	@ (80007e4 <UpdateMotorSpeed+0x130>)
 8000744:	8812      	ldrh	r2, [r2, #0]
 8000746:	b292      	uxth	r2, r2
 8000748:	4293      	cmp	r3, r2
 800074a:	da05      	bge.n	8000758 <UpdateMotorSpeed+0xa4>
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	b29b      	uxth	r3, r3
 8000752:	330a      	adds	r3, #10
 8000754:	b29b      	uxth	r3, r3
 8000756:	e002      	b.n	800075e <UpdateMotorSpeed+0xaa>
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <UpdateMotorSpeed+0x130>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4a20      	ldr	r2, [pc, #128]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 8000760:	8013      	strh	r3, [r2, #0]
 8000762:	e01b      	b.n	800079c <UpdateMotorSpeed+0xe8>
    else if (currentCcrRight > targetCcrRight)
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <UpdateMotorSpeed+0x130>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	b29b      	uxth	r3, r3
 8000770:	429a      	cmp	r2, r3
 8000772:	d913      	bls.n	800079c <UpdateMotorSpeed+0xe8>
        currentCcrRight = (currentCcrRight < SPEED_STEP + targetCcrRight) ? targetCcrRight : currentCcrRight - SPEED_STEP;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <UpdateMotorSpeed+0x130>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b29b      	uxth	r3, r3
 800077a:	3309      	adds	r3, #9
 800077c:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 800077e:	8812      	ldrh	r2, [r2, #0]
 8000780:	b292      	uxth	r2, r2
 8000782:	4293      	cmp	r3, r2
 8000784:	da05      	bge.n	8000792 <UpdateMotorSpeed+0xde>
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b29b      	uxth	r3, r3
 800078c:	3b0a      	subs	r3, #10
 800078e:	b29b      	uxth	r3, r3
 8000790:	e002      	b.n	8000798 <UpdateMotorSpeed+0xe4>
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <UpdateMotorSpeed+0x130>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b29b      	uxth	r3, r3
 8000798:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 800079a:	8013      	strh	r3, [r2, #0]

    // PWM 듀티 사이클 업데이트 (최소값 이하일 경우 0으로 처리)
    TIM3->CCR2 = (currentCcrLeft < 200) ? 0 : currentCcrLeft;
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80007a4:	d903      	bls.n	80007ae <UpdateMotorSpeed+0xfa>
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <UpdateMotorSpeed+0x124>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	e000      	b.n	80007b0 <UpdateMotorSpeed+0xfc>
 80007ae:	2300      	movs	r3, #0
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <UpdateMotorSpeed+0x134>)
 80007b2:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM4->CCR2 = (currentCcrRight < 200) ? 0 : currentCcrRight;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80007bc:	d903      	bls.n	80007c6 <UpdateMotorSpeed+0x112>
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <UpdateMotorSpeed+0x12c>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	e000      	b.n	80007c8 <UpdateMotorSpeed+0x114>
 80007c6:	2300      	movs	r3, #0
 80007c8:	4a08      	ldr	r2, [pc, #32]	@ (80007ec <UpdateMotorSpeed+0x138>)
 80007ca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	200000ea 	.word	0x200000ea
 80007dc:	200000ee 	.word	0x200000ee
 80007e0:	200000ec 	.word	0x200000ec
 80007e4:	200000f0 	.word	0x200000f0
 80007e8:	40000400 	.word	0x40000400
 80007ec:	40000800 	.word	0x40000800

080007f0 <SetMotorDirection_Safe>:

void SetMotorDirection_Safe(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
    // 모터 드라이버 방향 핀을 모두 LOW로 설정하여 정지 상태로 만듦
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2102      	movs	r1, #2
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <SetMotorDirection_Safe+0x30>)
 80007fa:	f001 f997 	bl	8001b2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4807      	ldr	r0, [pc, #28]	@ (8000820 <SetMotorDirection_Safe+0x30>)
 8000804:	f001 f992 	bl	8001b2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2110      	movs	r1, #16
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <SetMotorDirection_Safe+0x30>)
 800080e:	f001 f98d 	bl	8001b2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2101      	movs	r1, #1
 8000816:	4803      	ldr	r0, [pc, #12]	@ (8000824 <SetMotorDirection_Safe+0x34>)
 8000818:	f001 f988 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40020000 	.word	0x40020000
 8000824:	40020400 	.word	0x40020400

08000828 <Motor_Init>:

void Motor_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    // PWM 타이머 채널 시작
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800082c:	2104      	movs	r1, #4
 800082e:	4814      	ldr	r0, [pc, #80]	@ (8000880 <Motor_Init+0x58>)
 8000830:	f001 fe7e 	bl	8002530 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000834:	2104      	movs	r1, #4
 8000836:	4813      	ldr	r0, [pc, #76]	@ (8000884 <Motor_Init+0x5c>)
 8000838:	f001 fe7a 	bl	8002530 <HAL_TIM_PWM_Start>

    // 변수 초기화
    currentCcrLeft = 0;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <Motor_Init+0x60>)
 800083e:	2200      	movs	r2, #0
 8000840:	801a      	strh	r2, [r3, #0]
    currentCcrRight = 0;
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <Motor_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	801a      	strh	r2, [r3, #0]
    targetCcrLeft = 0;
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <Motor_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	801a      	strh	r2, [r3, #0]
    targetCcrRight = 0;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <Motor_Init+0x6c>)
 8000850:	2200      	movs	r2, #0
 8000852:	801a      	strh	r2, [r3, #0]

    // 모터를 안전한 정지 상태로 초기화
    SetMotorDirection_Safe();
 8000854:	f7ff ffcc 	bl	80007f0 <SetMotorDirection_Safe>

    // 초기 모드 설정
    currentMode = GetCurrentMode();
 8000858:	f7ff ff0c 	bl	8000674 <GetCurrentMode>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <Motor_Init+0x70>)
 8000862:	701a      	strb	r2, [r3, #0]

    printf("[MOTOR] Initialized - Mode: %s\r\n", (currentMode == MODE_AUTO) ? "AUTO" : "MANUAL");
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <Motor_Init+0x70>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b01      	cmp	r3, #1
 800086c:	d101      	bne.n	8000872 <Motor_Init+0x4a>
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <Motor_Init+0x74>)
 8000870:	e000      	b.n	8000874 <Motor_Init+0x4c>
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <Motor_Init+0x78>)
 8000874:	4619      	mov	r1, r3
 8000876:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <Motor_Init+0x7c>)
 8000878:	f003 fc28 	bl	80040cc <iprintf>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000f8 	.word	0x200000f8
 8000884:	20000140 	.word	0x20000140
 8000888:	200000ea 	.word	0x200000ea
 800088c:	200000ec 	.word	0x200000ec
 8000890:	200000ee 	.word	0x200000ee
 8000894:	200000f0 	.word	0x200000f0
 8000898:	200000f2 	.word	0x200000f2
 800089c:	08004ea0 	.word	0x08004ea0
 80008a0:	08004ea8 	.word	0x08004ea8
 80008a4:	08004eb0 	.word	0x08004eb0

080008a8 <Motor_Task>:

void Motor_Task(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
    // 스위치를 통해 모터 모드 변경 감지
    MotorMode_t newMode = GetCurrentMode();
 80008ae:	f7ff fee1 	bl	8000674 <GetCurrentMode>
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
    if (newMode != currentMode)
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <Motor_Task+0x54>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d016      	beq.n	80008f0 <Motor_Task+0x48>
    {
        currentMode = newMode;
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <Motor_Task+0x54>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	7013      	strb	r3, [r2, #0]
        printf("[MOTOR] Mode changed to: %s\r\n", (currentMode == MODE_AUTO) ? "AUTO" : "MANUAL");
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <Motor_Task+0x54>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d101      	bne.n	80008d6 <Motor_Task+0x2e>
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <Motor_Task+0x58>)
 80008d4:	e000      	b.n	80008d8 <Motor_Task+0x30>
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <Motor_Task+0x5c>)
 80008d8:	4619      	mov	r1, r3
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <Motor_Task+0x60>)
 80008dc:	f003 fbf6 	bl	80040cc <iprintf>

        // 모드 변경 시 모터를 정지시켜 안전 확보
        SetMotorDirection_Safe();
 80008e0:	f7ff ff86 	bl	80007f0 <SetMotorDirection_Safe>
        targetCcrLeft = 0;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <Motor_Task+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	801a      	strh	r2, [r3, #0]
        targetCcrRight = 0;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <Motor_Task+0x68>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	801a      	strh	r2, [r3, #0]
    }

    // 모터 속도 점진적 업데이트
    UpdateMotorSpeed();
 80008f0:	f7ff fee0 	bl	80006b4 <UpdateMotorSpeed>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000f2 	.word	0x200000f2
 8000900:	08004ea0 	.word	0x08004ea0
 8000904:	08004ea8 	.word	0x08004ea8
 8000908:	08004ed4 	.word	0x08004ed4
 800090c:	200000ee 	.word	0x200000ee
 8000910:	200000f0 	.word	0x200000f0

08000914 <HAL_UART_RxCpltCallback>:

/* USER CODE END 0 */
// 모터 관련 함수들

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    if (huart->Instance != USART1) return;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <HAL_UART_RxCpltCallback+0x80>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d131      	bne.n	800098a <HAL_UART_RxCpltCallback+0x76>

    // 라인 종료 문자('\r' 또는 '\n')를 받으면 라인 수신 완료로 처리
    if (rxData == '\r' || rxData == '\n')
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <HAL_UART_RxCpltCallback+0x84>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b0d      	cmp	r3, #13
 800092c:	d003      	beq.n	8000936 <HAL_UART_RxCpltCallback+0x22>
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <HAL_UART_RxCpltCallback+0x84>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b0a      	cmp	r3, #10
 8000934:	d110      	bne.n	8000958 <HAL_UART_RxCpltCallback+0x44>
    {
        if (rx_index > 0) // 내용이 있을 때만 처리
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <HAL_UART_RxCpltCallback+0x88>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d01f      	beq.n	800097e <HAL_UART_RxCpltCallback+0x6a>
        {
            rx_buf[rx_index] = '\0'; // Null 문자로 문자열 종료
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_UART_RxCpltCallback+0x88>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000946:	2100      	movs	r1, #0
 8000948:	5499      	strb	r1, [r3, r2]
            rx_complete = 1;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <HAL_UART_RxCpltCallback+0x90>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_UART_RxCpltCallback+0x88>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
        if (rx_index > 0) // 내용이 있을 때만 처리
 8000956:	e012      	b.n	800097e <HAL_UART_RxCpltCallback+0x6a>
        }
    }
    else
    {
        // 버퍼 크기를 넘지 않는 경우에만 데이터 저장
        if (rx_index < RX_BUF_SIZE - 1)
 8000958:	4b10      	ldr	r3, [pc, #64]	@ (800099c <HAL_UART_RxCpltCallback+0x88>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b3e      	cmp	r3, #62	@ 0x3e
 800095e:	d80b      	bhi.n	8000978 <HAL_UART_RxCpltCallback+0x64>
        {
            rx_buf[rx_index++] = rxData;
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_UART_RxCpltCallback+0x88>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	b2d1      	uxtb	r1, r2
 8000968:	4a0c      	ldr	r2, [pc, #48]	@ (800099c <HAL_UART_RxCpltCallback+0x88>)
 800096a:	7011      	strb	r1, [r2, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <HAL_UART_RxCpltCallback+0x84>)
 8000970:	7819      	ldrb	r1, [r3, #0]
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <HAL_UART_RxCpltCallback+0x8c>)
 8000974:	5499      	strb	r1, [r3, r2]
 8000976:	e002      	b.n	800097e <HAL_UART_RxCpltCallback+0x6a>
        }
        else
        {
            // 버퍼 오버플로우 방지 (에러 처리)
            rx_index = 0;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_UART_RxCpltCallback+0x88>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
        }
    }

    // 다음 1바이트 수신을 위해 인터럽트 다시 활성화
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800097e:	2201      	movs	r2, #1
 8000980:	4905      	ldr	r1, [pc, #20]	@ (8000998 <HAL_UART_RxCpltCallback+0x84>)
 8000982:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <HAL_UART_RxCpltCallback+0x94>)
 8000984:	f002 fac7 	bl	8002f16 <HAL_UART_Receive_IT>
 8000988:	e000      	b.n	800098c <HAL_UART_RxCpltCallback+0x78>
    if (huart->Instance != USART1) return;
 800098a:	bf00      	nop
}
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40011000 	.word	0x40011000
 8000998:	200000a4 	.word	0x200000a4
 800099c:	200000e8 	.word	0x200000e8
 80009a0:	200000a8 	.word	0x200000a8
 80009a4:	200000e9 	.word	0x200000e9
 80009a8:	20000188 	.word	0x20000188

080009ac <Process_Received_Data>:

/* 수신 데이터 파싱 및 처리 */
void Process_Received_Data(void)
{
 80009ac:	b598      	push	{r3, r4, r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    if (!rx_complete) return; // 수신 완료 플래그가 설정되지 않았으면 리턴
 80009b0:	4b39      	ldr	r3, [pc, #228]	@ (8000a98 <Process_Received_Data+0xec>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d06c      	beq.n	8000a94 <Process_Received_Data+0xe8>

    // [중요] 디버깅을 위해 수신된 문자열을 그대로 출력!
    // 이 부분을 통해 데이터가 제대로 들어오는지 확인해야 합니다.
    printf("RX: %s\n", rx_buf);
 80009ba:	4938      	ldr	r1, [pc, #224]	@ (8000a9c <Process_Received_Data+0xf0>)
 80009bc:	4838      	ldr	r0, [pc, #224]	@ (8000aa0 <Process_Received_Data+0xf4>)
 80009be:	f003 fb85 	bl	80040cc <iprintf>

    if (strncmp(rx_buf, "X1:", 3) == 0) temp_joystick[0] = atoi(&rx_buf[3]);
 80009c2:	2203      	movs	r2, #3
 80009c4:	4937      	ldr	r1, [pc, #220]	@ (8000aa4 <Process_Received_Data+0xf8>)
 80009c6:	4835      	ldr	r0, [pc, #212]	@ (8000a9c <Process_Received_Data+0xf0>)
 80009c8:	f003 fcd0 	bl	800436c <strncmp>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d107      	bne.n	80009e2 <Process_Received_Data+0x36>
 80009d2:	4835      	ldr	r0, [pc, #212]	@ (8000aa8 <Process_Received_Data+0xfc>)
 80009d4:	f003 fa30 	bl	8003e38 <atoi>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4b33      	ldr	r3, [pc, #204]	@ (8000aac <Process_Received_Data+0x100>)
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	e054      	b.n	8000a8c <Process_Received_Data+0xe0>
    else if (strncmp(rx_buf, "Y1:", 3) == 0) temp_joystick[1] = atoi(&rx_buf[3]);
 80009e2:	2203      	movs	r2, #3
 80009e4:	4932      	ldr	r1, [pc, #200]	@ (8000ab0 <Process_Received_Data+0x104>)
 80009e6:	482d      	ldr	r0, [pc, #180]	@ (8000a9c <Process_Received_Data+0xf0>)
 80009e8:	f003 fcc0 	bl	800436c <strncmp>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d107      	bne.n	8000a02 <Process_Received_Data+0x56>
 80009f2:	482d      	ldr	r0, [pc, #180]	@ (8000aa8 <Process_Received_Data+0xfc>)
 80009f4:	f003 fa20 	bl	8003e38 <atoi>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b2b      	ldr	r3, [pc, #172]	@ (8000aac <Process_Received_Data+0x100>)
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	e044      	b.n	8000a8c <Process_Received_Data+0xe0>
    else if (strncmp(rx_buf, "X2:", 3) == 0) temp_joystick[2] = atoi(&rx_buf[3]);
 8000a02:	2203      	movs	r2, #3
 8000a04:	492b      	ldr	r1, [pc, #172]	@ (8000ab4 <Process_Received_Data+0x108>)
 8000a06:	4825      	ldr	r0, [pc, #148]	@ (8000a9c <Process_Received_Data+0xf0>)
 8000a08:	f003 fcb0 	bl	800436c <strncmp>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d107      	bne.n	8000a22 <Process_Received_Data+0x76>
 8000a12:	4825      	ldr	r0, [pc, #148]	@ (8000aa8 <Process_Received_Data+0xfc>)
 8000a14:	f003 fa10 	bl	8003e38 <atoi>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <Process_Received_Data+0x100>)
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	e034      	b.n	8000a8c <Process_Received_Data+0xe0>
    else if (strncmp(rx_buf, "Y2:", 3) == 0) temp_joystick[3] = atoi(&rx_buf[3]);
 8000a22:	2203      	movs	r2, #3
 8000a24:	4924      	ldr	r1, [pc, #144]	@ (8000ab8 <Process_Received_Data+0x10c>)
 8000a26:	481d      	ldr	r0, [pc, #116]	@ (8000a9c <Process_Received_Data+0xf0>)
 8000a28:	f003 fca0 	bl	800436c <strncmp>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d107      	bne.n	8000a42 <Process_Received_Data+0x96>
 8000a32:	481d      	ldr	r0, [pc, #116]	@ (8000aa8 <Process_Received_Data+0xfc>)
 8000a34:	f003 fa00 	bl	8003e38 <atoi>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <Process_Received_Data+0x100>)
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	e024      	b.n	8000a8c <Process_Received_Data+0xe0>
    else if (strcmp(rx_buf, "NEUTRAL") == 0)
 8000a42:	491e      	ldr	r1, [pc, #120]	@ (8000abc <Process_Received_Data+0x110>)
 8000a44:	4815      	ldr	r0, [pc, #84]	@ (8000a9c <Process_Received_Data+0xf0>)
 8000a46:	f7ff fbcb 	bl	80001e0 <strcmp>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d110      	bne.n	8000a72 <Process_Received_Data+0xc6>
    {
        // NEUTRAL 신호를 받으면 즉시 모든 값을 중립으로 설정
        joystick[0] = 2048;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <Process_Received_Data+0x114>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a56:	601a      	str	r2, [r3, #0]
        joystick[1] = 2048;
 8000a58:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <Process_Received_Data+0x114>)
 8000a5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a5e:	605a      	str	r2, [r3, #4]
        joystick[2] = 2048;
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <Process_Received_Data+0x114>)
 8000a62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a66:	609a      	str	r2, [r3, #8]
        joystick[3] = 2048;
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <Process_Received_Data+0x114>)
 8000a6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	e00c      	b.n	8000a8c <Process_Received_Data+0xe0>
    }
    else if (strcmp(rx_buf, "END") == 0)
 8000a72:	4914      	ldr	r1, [pc, #80]	@ (8000ac4 <Process_Received_Data+0x118>)
 8000a74:	4809      	ldr	r0, [pc, #36]	@ (8000a9c <Process_Received_Data+0xf0>)
 8000a76:	f7ff fbb3 	bl	80001e0 <strcmp>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d105      	bne.n	8000a8c <Process_Received_Data+0xe0>
    {
        // END 신호를 받으면 임시 버퍼의 값을 실제 joystick 배열로 복사 (원자적 업데이트)
        memcpy(joystick, temp_joystick, sizeof(temp_joystick));
 8000a80:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac0 <Process_Received_Data+0x114>)
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <Process_Received_Data+0x100>)
 8000a84:	4614      	mov	r4, r2
 8000a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // 처리가 끝났으므로 플래그 리셋
    rx_complete = 0;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	@ (8000a98 <Process_Received_Data+0xec>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e000      	b.n	8000a96 <Process_Received_Data+0xea>
    if (!rx_complete) return; // 수신 완료 플래그가 설정되지 않았으면 리턴
 8000a94:	bf00      	nop
}
 8000a96:	bd98      	pop	{r3, r4, r7, pc}
 8000a98:	200000e9 	.word	0x200000e9
 8000a9c:	200000a8 	.word	0x200000a8
 8000aa0:	08004ef4 	.word	0x08004ef4
 8000aa4:	08004efc 	.word	0x08004efc
 8000aa8:	200000ab 	.word	0x200000ab
 8000aac:	20000010 	.word	0x20000010
 8000ab0:	08004f00 	.word	0x08004f00
 8000ab4:	08004f04 	.word	0x08004f04
 8000ab8:	08004f08 	.word	0x08004f08
 8000abc:	08004f0c 	.word	0x08004f0c
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	08004f14 	.word	0x08004f14

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000acc:	f000 fc58 	bl	8001380 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad0:	f000 f860 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f7ff fd7a 	bl	80005cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ad8:	f000 fb30 	bl	800113c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000adc:	f000 fb58 	bl	8001190 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ae0:	f000 f9de 	bl	8000ea0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ae4:	f000 fa36 	bl	8000f54 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

    // 시스템 시작 메시지
    printf("=== STM32 Bluetooth Receiver + Motor Control ===\r\n");
 8000ae8:	481f      	ldr	r0, [pc, #124]	@ (8000b68 <main+0xa0>)
 8000aea:	f003 fb57 	bl	800419c <puts>
    printf("Waiting for data from Basys3...\r\n");
 8000aee:	481f      	ldr	r0, [pc, #124]	@ (8000b6c <main+0xa4>)
 8000af0:	f003 fb54 	bl	800419c <puts>

    // 변수 초기화
    rx_index = 0;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <main+0xa8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
    rx_complete = 0;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <main+0xac>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
    memset(rx_buf, 0, RX_BUF_SIZE);
 8000b00:	2240      	movs	r2, #64	@ 0x40
 8000b02:	2100      	movs	r1, #0
 8000b04:	481c      	ldr	r0, [pc, #112]	@ (8000b78 <main+0xb0>)
 8000b06:	f003 fc29 	bl	800435c <memset>

    // 모터 초기화
    Motor_Init();
 8000b0a:	f7ff fe8d 	bl	8000828 <Motor_Init>

    // UART 인터럽트 수신 시작
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	491a      	ldr	r1, [pc, #104]	@ (8000b7c <main+0xb4>)
 8000b12:	481b      	ldr	r0, [pc, #108]	@ (8000b80 <main+0xb8>)
 8000b14:	f002 f9ff 	bl	8002f16 <HAL_UART_Receive_IT>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	201b      	movs	r0, #27
 8000b1e:	f000 fda0 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b22:	201b      	movs	r0, #27
 8000b24:	f000 fdb9 	bl	800169a <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while(1)
    {
    	Process_Received_Data();
 8000b28:	f7ff ff40 	bl	80009ac <Process_Received_Data>

    	        // 모드에 따른 모터 속도 적용
    	        if (currentMode == MODE_MANUAL)
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <main+0xbc>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10c      	bne.n	8000b50 <main+0x88>
    	        {
    	            // Y1 (joystick[1]) 값으로 왼쪽 모터 속도 제어
    	            // Y2 (joystick[3]) 값으로 오른쪽 모터 속도 제어
    	            // 4095 (12비트) 값을 1023 (10비트) PWM 값으로 변환 (>> 2)
    	            // 필요에 따라 조종 방식을 변경할 수 있습니다.
    	            targetCcrLeft = joystick[1] >> 2;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <main+0xc0>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <main+0xc4>)
 8000b40:	801a      	strh	r2, [r3, #0]
    	            targetCcrRight = joystick[3] >> 2;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <main+0xc0>)
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <main+0xc8>)
 8000b4c:	801a      	strh	r2, [r3, #0]
 8000b4e:	e005      	b.n	8000b5c <main+0x94>
    	        }
    	        else
    	        {
    	            // AUTO 모드일 때의 동작 (필요시 구현)
    	            targetCcrLeft = 0;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <main+0xc4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	801a      	strh	r2, [r3, #0]
    	            targetCcrRight = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <main+0xc8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	801a      	strh	r2, [r3, #0]
    	        }

    	        // 모터 업데이트 태스크 실행
    	        Motor_Task();
 8000b5c:	f7ff fea4 	bl	80008a8 <Motor_Task>

    	        HAL_Delay(10); // 시스템 부하를 줄이기 위한 짧은 딜레이
 8000b60:	200a      	movs	r0, #10
 8000b62:	f000 fc7f 	bl	8001464 <HAL_Delay>
    	Process_Received_Data();
 8000b66:	e7df      	b.n	8000b28 <main+0x60>
 8000b68:	08004f18 	.word	0x08004f18
 8000b6c:	08004f4c 	.word	0x08004f4c
 8000b70:	200000e8 	.word	0x200000e8
 8000b74:	200000e9 	.word	0x200000e9
 8000b78:	200000a8 	.word	0x200000a8
 8000b7c:	200000a4 	.word	0x200000a4
 8000b80:	20000188 	.word	0x20000188
 8000b84:	200000f2 	.word	0x200000f2
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	200000ee 	.word	0x200000ee
 8000b90:	200000f0 	.word	0x200000f0

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	@ 0x50
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0320 	add.w	r3, r7, #32
 8000b9e:	2230      	movs	r2, #48	@ 0x30
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 fbda 	bl	800435c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <SystemClock_Config+0xc8>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	4a26      	ldr	r2, [pc, #152]	@ (8000c5c <SystemClock_Config+0xc8>)
 8000bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc8:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <SystemClock_Config+0xc8>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <SystemClock_Config+0xcc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a20      	ldr	r2, [pc, #128]	@ (8000c60 <SystemClock_Config+0xcc>)
 8000bde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <SystemClock_Config+0xcc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000c08:	2364      	movs	r3, #100	@ 0x64
 8000c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c10:	2304      	movs	r3, #4
 8000c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0320 	add.w	r3, r7, #32
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 ffa1 	bl	8001b60 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c24:	f000 f81e 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2103      	movs	r1, #3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fa03 	bl	8002050 <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c50:	f000 f808 	bl	8000c64 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3750      	adds	r7, #80	@ 0x50
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <Error_Handler+0x8>

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d16:	f000 fb85 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <USART1_IRQHandler+0x10>)
 8000d26:	f002 f91b 	bl	8002f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000188 	.word	0x20000188

08000d34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
  }

  return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e009      	b.n	8000d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fc55 	bl	8000638 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf1      	blt.n	8000d80 <_write+0x12>
  }
  return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_close>:

int _close(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dce:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_isatty>:

int _isatty(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f003 faec 	bl	800441c <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20020000 	.word	0x20020000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	200000f4 	.word	0x200000f4
 8000e78:	20000368 	.word	0x20000368

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec2:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000ec4:	4a22      	ldr	r2, [pc, #136]	@ (8000f50 <MX_TIM3_Init+0xb0>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000ec8:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000eca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ece:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000ed8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000edc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eea:	4818      	ldr	r0, [pc, #96]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000eec:	f001 fad0 	bl	8002490 <HAL_TIM_PWM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ef6:	f7ff feb5 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4619      	mov	r1, r3
 8000f08:	4810      	ldr	r0, [pc, #64]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000f0a:	f001 febb 	bl	8002c84 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f14:	f7ff fea6 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	@ 0x60
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000f30:	f001 fbae 	bl	8002690 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f3a:	f7ff fe93 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f3e:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <MX_TIM3_Init+0xac>)
 8000f40:	f000 f89a 	bl	8001078 <HAL_TIM_MspPostInit>

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	@ 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000f8 	.word	0x200000f8
 8000f50:	40000400 	.word	0x40000400

08000f54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	@ 0x28
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f76:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000f78:	4a22      	ldr	r2, [pc, #136]	@ (8001004 <MX_TIM4_Init+0xb0>)
 8000f7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000f7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000f8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f9e:	4818      	ldr	r0, [pc, #96]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000fa0:	f001 fa76 	bl	8002490 <HAL_TIM_PWM_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000faa:	f7ff fe5b 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4810      	ldr	r0, [pc, #64]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000fbe:	f001 fe61 	bl	8002c84 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000fc8:	f7ff fe4c 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fcc:	2360      	movs	r3, #96	@ 0x60
 8000fce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2204      	movs	r2, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4807      	ldr	r0, [pc, #28]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000fe4:	f001 fb54 	bl	8002690 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000fee:	f7ff fe39 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ff2:	4803      	ldr	r0, [pc, #12]	@ (8001000 <MX_TIM4_Init+0xac>)
 8000ff4:	f000 f840 	bl	8001078 <HAL_TIM_MspPostInit>

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	@ 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000140 	.word	0x20000140
 8001004:	40000800 	.word	0x40000800

08001008 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a15      	ldr	r2, [pc, #84]	@ (800106c <HAL_TIM_PWM_MspInit+0x64>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10e      	bne.n	8001038 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <HAL_TIM_PWM_MspInit+0x68>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	4a13      	ldr	r2, [pc, #76]	@ (8001070 <HAL_TIM_PWM_MspInit+0x68>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6413      	str	r3, [r2, #64]	@ 0x40
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <HAL_TIM_PWM_MspInit+0x68>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001036:	e012      	b.n	800105e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <HAL_TIM_PWM_MspInit+0x6c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10d      	bne.n	800105e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_TIM_PWM_MspInit+0x68>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <HAL_TIM_PWM_MspInit+0x68>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6413      	str	r3, [r2, #64]	@ 0x40
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <HAL_TIM_PWM_MspInit+0x68>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40000400 	.word	0x40000400
 8001070:	40023800 	.word	0x40023800
 8001074:	40000800 	.word	0x40000800

08001078 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a24      	ldr	r2, [pc, #144]	@ (8001128 <HAL_TIM_MspPostInit+0xb0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d11e      	bne.n	80010d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b23      	ldr	r3, [pc, #140]	@ (800112c <HAL_TIM_MspPostInit+0xb4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a22      	ldr	r2, [pc, #136]	@ (800112c <HAL_TIM_MspPostInit+0xb4>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b20      	ldr	r3, [pc, #128]	@ (800112c <HAL_TIM_MspPostInit+0xb4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010b6:	2340      	movs	r3, #64	@ 0x40
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c6:	2302      	movs	r3, #2
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4817      	ldr	r0, [pc, #92]	@ (8001130 <HAL_TIM_MspPostInit+0xb8>)
 80010d2:	f000 fb8f 	bl	80017f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010d6:	e022      	b.n	800111e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a15      	ldr	r2, [pc, #84]	@ (8001134 <HAL_TIM_MspPostInit+0xbc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d11d      	bne.n	800111e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_TIM_MspPostInit+0xb4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_TIM_MspPostInit+0xb4>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_TIM_MspPostInit+0xb4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800110e:	2302      	movs	r3, #2
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4807      	ldr	r0, [pc, #28]	@ (8001138 <HAL_TIM_MspPostInit+0xc0>)
 800111a:	f000 fb6b 	bl	80017f4 <HAL_GPIO_Init>
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40000400 	.word	0x40000400
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000
 8001134:	40000800 	.word	0x40000800
 8001138:	40020400 	.word	0x40020400

0800113c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <MX_USART1_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001148:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800114c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001174:	f001 fdf4 	bl	8002d60 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f7ff fd71 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000188 	.word	0x20000188
 800118c:	40011000 	.word	0x40011000

08001190 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_USART2_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 800119c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80011a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c8:	f001 fdca 	bl	8002d60 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f7ff fd47 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001d0 	.word	0x200001d0
 80011e0:	40004400 	.word	0x40004400

080011e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	@ 0x30
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a45      	ldr	r2, [pc, #276]	@ (8001318 <HAL_UART_MspInit+0x134>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d153      	bne.n	80012ae <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	4b44      	ldr	r3, [pc, #272]	@ (800131c <HAL_UART_MspInit+0x138>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	4a43      	ldr	r2, [pc, #268]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001210:	f043 0310 	orr.w	r3, r3, #16
 8001214:	6453      	str	r3, [r2, #68]	@ 0x44
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	4b3d      	ldr	r3, [pc, #244]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a3c      	ldr	r2, [pc, #240]	@ (800131c <HAL_UART_MspInit+0x138>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b3a      	ldr	r3, [pc, #232]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b36      	ldr	r3, [pc, #216]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a35      	ldr	r2, [pc, #212]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b33      	ldr	r3, [pc, #204]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800125a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001268:	2302      	movs	r3, #2
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800126c:	2307      	movs	r3, #7
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	482a      	ldr	r0, [pc, #168]	@ (8001320 <HAL_UART_MspInit+0x13c>)
 8001278:	f000 fabc 	bl	80017f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800127c:	2308      	movs	r3, #8
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001288:	2302      	movs	r3, #2
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800128c:	2307      	movs	r3, #7
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4823      	ldr	r0, [pc, #140]	@ (8001324 <HAL_UART_MspInit+0x140>)
 8001298:	f000 faac 	bl	80017f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2025      	movs	r0, #37	@ 0x25
 80012a2:	f000 f9de 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012a6:	2025      	movs	r0, #37	@ 0x25
 80012a8:	f000 f9f7 	bl	800169a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ac:	e030      	b.n	8001310 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001328 <HAL_UART_MspInit+0x144>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d12b      	bne.n	8001310 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_UART_MspInit+0x138>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	4a16      	ldr	r2, [pc, #88]	@ (800131c <HAL_UART_MspInit+0x138>)
 80012c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_UART_MspInit+0x138>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <HAL_UART_MspInit+0x138>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	4a0f      	ldr	r2, [pc, #60]	@ (800131c <HAL_UART_MspInit+0x138>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <HAL_UART_MspInit+0x138>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f0:	230c      	movs	r3, #12
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fc:	2302      	movs	r3, #2
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001300:	2307      	movs	r3, #7
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_UART_MspInit+0x13c>)
 800130c:	f000 fa72 	bl	80017f4 <HAL_GPIO_Init>
}
 8001310:	bf00      	nop
 8001312:	3730      	adds	r7, #48	@ 0x30
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40011000 	.word	0x40011000
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40004400 	.word	0x40004400

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001364 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001330:	f7ff fda4 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	@ (800136c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	@ (8001378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135a:	f003 f865 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff fbb3 	bl	8000ac8 <main>
  bx  lr    
 8001362:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001370:	080050cc 	.word	0x080050cc
  ldr r2, =_sbss
 8001374:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001378:	20000368 	.word	0x20000368

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <HAL_Init+0x40>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800138e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <HAL_Init+0x40>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <HAL_Init+0x40>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f94f 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fc5c 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f967 	bl	80016b6 <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001400:	f000 f92f 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	@ (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000020 	.word	0x20000020
 800141c:	20000028 	.word	0x20000028
 8001420:	20000024 	.word	0x20000024

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000028 	.word	0x20000028
 8001448:	20000218 	.word	0x20000218

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000218 	.word	0x20000218

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffde 	bl	800144c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000028 	.word	0x20000028

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	@ (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	@ (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	@ (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	@ 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	@ 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800162c:	f7ff ff8e 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff29 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff3e 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff8e 	bl	80015a0 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5d 	bl	800154c <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff31 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa2 	bl	8001608 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff feb6 	bl	800144c <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d008      	beq.n	8001700 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2280      	movs	r2, #128	@ 0x80
 80016f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e052      	b.n	80017a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0216 	bic.w	r2, r2, #22
 800170e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800171e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	2b00      	cmp	r3, #0
 8001726:	d103      	bne.n	8001730 <HAL_DMA_Abort+0x62>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0208 	bic.w	r2, r2, #8
 800173e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001750:	e013      	b.n	800177a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001752:	f7ff fe7b 	bl	800144c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b05      	cmp	r3, #5
 800175e:	d90c      	bls.n	800177a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2220      	movs	r2, #32
 8001764:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e015      	b.n	80017a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e4      	bne.n	8001752 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178c:	223f      	movs	r2, #63	@ 0x3f
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d004      	beq.n	80017cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2280      	movs	r2, #128	@ 0x80
 80017c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e00c      	b.n	80017e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2205      	movs	r2, #5
 80017d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e159      	b.n	8001ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8148 	bne.w	8001abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d005      	beq.n	8001846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	2b02      	cmp	r3, #2
 8001844:	d130      	bne.n	80018a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 0201 	and.w	r2, r3, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d017      	beq.n	80018e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d123      	bne.n	8001938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	69b9      	ldr	r1, [r7, #24]
 8001934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a2 	beq.w	8001abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b57      	ldr	r3, [pc, #348]	@ (8001adc <HAL_GPIO_Init+0x2e8>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	4a56      	ldr	r2, [pc, #344]	@ (8001adc <HAL_GPIO_Init+0x2e8>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001988:	6453      	str	r3, [r2, #68]	@ 0x44
 800198a:	4b54      	ldr	r3, [pc, #336]	@ (8001adc <HAL_GPIO_Init+0x2e8>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001996:	4a52      	ldr	r2, [pc, #328]	@ (8001ae0 <HAL_GPIO_Init+0x2ec>)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a49      	ldr	r2, [pc, #292]	@ (8001ae4 <HAL_GPIO_Init+0x2f0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x202>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a48      	ldr	r2, [pc, #288]	@ (8001ae8 <HAL_GPIO_Init+0x2f4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x1fe>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a47      	ldr	r2, [pc, #284]	@ (8001aec <HAL_GPIO_Init+0x2f8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x1fa>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a46      	ldr	r2, [pc, #280]	@ (8001af0 <HAL_GPIO_Init+0x2fc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x1f6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a45      	ldr	r2, [pc, #276]	@ (8001af4 <HAL_GPIO_Init+0x300>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x1f2>
 80019e2:	2304      	movs	r3, #4
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019e6:	2307      	movs	r3, #7
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019f6:	2300      	movs	r3, #0
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a08:	4935      	ldr	r1, [pc, #212]	@ (8001ae0 <HAL_GPIO_Init+0x2ec>)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b38      	ldr	r3, [pc, #224]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a24      	ldr	r2, [pc, #144]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	f67f aea2 	bls.w	8001810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40013c00 	.word	0x40013c00

08001afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	619a      	str	r2, [r3, #24]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e267      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d075      	beq.n	8001c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b7e:	4b88      	ldr	r3, [pc, #544]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d00c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8a:	4b85      	ldr	r3, [pc, #532]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d112      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b96:	4b82      	ldr	r3, [pc, #520]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ba2:	d10b      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d05b      	beq.n	8001c68 <HAL_RCC_OscConfig+0x108>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d157      	bne.n	8001c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e242      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc4:	d106      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x74>
 8001bc6:	4b76      	ldr	r3, [pc, #472]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a75      	ldr	r2, [pc, #468]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xb0>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x98>
 8001bde:	4b70      	ldr	r3, [pc, #448]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6f      	ldr	r2, [pc, #444]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b6d      	ldr	r3, [pc, #436]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6c      	ldr	r2, [pc, #432]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xb0>
 8001bf8:	4b69      	ldr	r3, [pc, #420]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a68      	ldr	r2, [pc, #416]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a65      	ldr	r2, [pc, #404]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fc18 	bl	800144c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fc14 	bl	800144c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	@ 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e207      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b5b      	ldr	r3, [pc, #364]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xc0>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fc04 	bl	800144c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fc00 	bl	800144c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1f3      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	4b51      	ldr	r3, [pc, #324]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0xe8>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c76:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c82:	4b47      	ldr	r3, [pc, #284]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d11c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	4b44      	ldr	r3, [pc, #272]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	4b41      	ldr	r3, [pc, #260]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x152>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1c7      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4937      	ldr	r1, [pc, #220]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e03a      	b.n	8001d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_RCC_OscConfig+0x244>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fbb9 	bl	800144c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fbb5 	bl	800144c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1a8      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4925      	ldr	r1, [pc, #148]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <HAL_RCC_OscConfig+0x244>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff fb98 	bl	800144c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fb94 	bl	800144c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e187      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d036      	beq.n	8001db8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_RCC_OscConfig+0x248>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff fb78 	bl	800144c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fb74 	bl	800144c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e167      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x200>
 8001d7e:	e01b      	b.n	8001db8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_RCC_OscConfig+0x248>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fb61 	bl	800144c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8c:	e00e      	b.n	8001dac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fb5d 	bl	800144c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d907      	bls.n	8001dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e150      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
 8001da0:	40023800 	.word	0x40023800
 8001da4:	42470000 	.word	0x42470000
 8001da8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	4b88      	ldr	r3, [pc, #544]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ea      	bne.n	8001d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 8097 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b81      	ldr	r3, [pc, #516]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10f      	bne.n	8001df6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b7d      	ldr	r3, [pc, #500]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	4a7c      	ldr	r2, [pc, #496]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b77      	ldr	r3, [pc, #476]	@ (8001fd4 <HAL_RCC_OscConfig+0x474>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d118      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e02:	4b74      	ldr	r3, [pc, #464]	@ (8001fd4 <HAL_RCC_OscConfig+0x474>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a73      	ldr	r2, [pc, #460]	@ (8001fd4 <HAL_RCC_OscConfig+0x474>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb1d 	bl	800144c <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7ff fb19 	bl	800144c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e10c      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b6a      	ldr	r3, [pc, #424]	@ (8001fd4 <HAL_RCC_OscConfig+0x474>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x2ea>
 8001e3c:	4b64      	ldr	r3, [pc, #400]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e40:	4a63      	ldr	r2, [pc, #396]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e48:	e01c      	b.n	8001e84 <HAL_RCC_OscConfig+0x324>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x30c>
 8001e52:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e56:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e62:	4a5b      	ldr	r2, [pc, #364]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0x324>
 8001e6c:	4b58      	ldr	r3, [pc, #352]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e70:	4a57      	ldr	r2, [pc, #348]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e78:	4b55      	ldr	r3, [pc, #340]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7c:	4a54      	ldr	r2, [pc, #336]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	f023 0304 	bic.w	r3, r3, #4
 8001e82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d015      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fade 	bl	800144c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff fada 	bl	800144c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0cb      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eaa:	4b49      	ldr	r3, [pc, #292]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0ee      	beq.n	8001e94 <HAL_RCC_OscConfig+0x334>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fac8 	bl	800144c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fac4 	bl	800144c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0b5      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ee      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee8:	4b39      	ldr	r3, [pc, #228]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	4a38      	ldr	r2, [pc, #224]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001eee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a1 	beq.w	8002040 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001efe:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d05c      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d141      	bne.n	8001f96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b31      	ldr	r3, [pc, #196]	@ (8001fd8 <HAL_RCC_OscConfig+0x478>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fa98 	bl	800144c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff fa94 	bl	800144c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e087      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4c:	019b      	lsls	r3, r3, #6
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	3b01      	subs	r3, #1
 8001f58:	041b      	lsls	r3, r3, #16
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	491b      	ldr	r1, [pc, #108]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x478>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fa6d 	bl	800144c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7ff fa69 	bl	800144c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e05c      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x416>
 8001f94:	e054      	b.n	8002040 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <HAL_RCC_OscConfig+0x478>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fa56 	bl	800144c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff fa52 	bl	800144c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e045      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x444>
 8001fc2:	e03d      	b.n	8002040 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e038      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCC_OscConfig+0x4ec>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d028      	beq.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d121      	bne.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d11a      	bne.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800200c:	4013      	ands	r3, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002014:	4293      	cmp	r3, r2
 8002016:	d111      	bne.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	3b01      	subs	r3, #1
 8002026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0cc      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b68      	ldr	r3, [pc, #416]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d90c      	bls.n	800208c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b65      	ldr	r3, [pc, #404]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b63      	ldr	r3, [pc, #396]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0b8      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a4:	4b59      	ldr	r3, [pc, #356]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a58      	ldr	r2, [pc, #352]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020bc:	4b53      	ldr	r3, [pc, #332]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a52      	ldr	r2, [pc, #328]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b50      	ldr	r3, [pc, #320]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	494d      	ldr	r1, [pc, #308]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d044      	beq.n	8002170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b47      	ldr	r3, [pc, #284]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d119      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e07f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d003      	beq.n	800210e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210a:	2b03      	cmp	r3, #3
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210e:	4b3f      	ldr	r3, [pc, #252]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	4b3b      	ldr	r3, [pc, #236]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e067      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212e:	4b37      	ldr	r3, [pc, #220]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f023 0203 	bic.w	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4934      	ldr	r1, [pc, #208]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002140:	f7ff f984 	bl	800144c <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	e00a      	b.n	800215e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7ff f980 	bl	800144c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e04f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	4b2b      	ldr	r3, [pc, #172]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 020c 	and.w	r2, r3, #12
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	429a      	cmp	r2, r3
 800216e:	d1eb      	bne.n	8002148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002170:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d20c      	bcs.n	8002198 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e032      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4916      	ldr	r1, [pc, #88]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c2:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	490e      	ldr	r1, [pc, #56]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d6:	f000 f821 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021da:	4602      	mov	r2, r0
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	490a      	ldr	r1, [pc, #40]	@ (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	5ccb      	ldrb	r3, [r1, r3]
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	4a09      	ldr	r2, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f8e4 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00
 800220c:	40023800 	.word	0x40023800
 8002210:	08004f70 	.word	0x08004f70
 8002214:	20000020 	.word	0x20000020
 8002218:	20000024 	.word	0x20000024

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002220:	b094      	sub	sp, #80	@ 0x50
 8002222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002234:	4b79      	ldr	r3, [pc, #484]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d00d      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x40>
 8002240:	2b08      	cmp	r3, #8
 8002242:	f200 80e1 	bhi.w	8002408 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x34>
 800224a:	2b04      	cmp	r3, #4
 800224c:	d003      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0x3a>
 800224e:	e0db      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002250:	4b73      	ldr	r3, [pc, #460]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x204>)
 8002252:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002254:	e0db      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002256:	4b73      	ldr	r3, [pc, #460]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x208>)
 8002258:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800225a:	e0d8      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800225c:	4b6f      	ldr	r3, [pc, #444]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002264:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002266:	4b6d      	ldr	r3, [pc, #436]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d063      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002272:	4b6a      	ldr	r3, [pc, #424]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	099b      	lsrs	r3, r3, #6
 8002278:	2200      	movs	r2, #0
 800227a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800227c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800227e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002284:	633b      	str	r3, [r7, #48]	@ 0x30
 8002286:	2300      	movs	r3, #0
 8002288:	637b      	str	r3, [r7, #52]	@ 0x34
 800228a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800228e:	4622      	mov	r2, r4
 8002290:	462b      	mov	r3, r5
 8002292:	f04f 0000 	mov.w	r0, #0
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	0159      	lsls	r1, r3, #5
 800229c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a0:	0150      	lsls	r0, r2, #5
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4621      	mov	r1, r4
 80022a8:	1a51      	subs	r1, r2, r1
 80022aa:	6139      	str	r1, [r7, #16]
 80022ac:	4629      	mov	r1, r5
 80022ae:	eb63 0301 	sbc.w	r3, r3, r1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022c0:	4659      	mov	r1, fp
 80022c2:	018b      	lsls	r3, r1, #6
 80022c4:	4651      	mov	r1, sl
 80022c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ca:	4651      	mov	r1, sl
 80022cc:	018a      	lsls	r2, r1, #6
 80022ce:	4651      	mov	r1, sl
 80022d0:	ebb2 0801 	subs.w	r8, r2, r1
 80022d4:	4659      	mov	r1, fp
 80022d6:	eb63 0901 	sbc.w	r9, r3, r1
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ee:	4690      	mov	r8, r2
 80022f0:	4699      	mov	r9, r3
 80022f2:	4623      	mov	r3, r4
 80022f4:	eb18 0303 	adds.w	r3, r8, r3
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	462b      	mov	r3, r5
 80022fc:	eb49 0303 	adc.w	r3, r9, r3
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800230e:	4629      	mov	r1, r5
 8002310:	024b      	lsls	r3, r1, #9
 8002312:	4621      	mov	r1, r4
 8002314:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002318:	4621      	mov	r1, r4
 800231a:	024a      	lsls	r2, r1, #9
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002322:	2200      	movs	r2, #0
 8002324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800232c:	f7fd ffb8 	bl	80002a0 <__aeabi_uldivmod>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4613      	mov	r3, r2
 8002336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002338:	e058      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b38      	ldr	r3, [pc, #224]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	2200      	movs	r2, #0
 8002342:	4618      	mov	r0, r3
 8002344:	4611      	mov	r1, r2
 8002346:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800234a:	623b      	str	r3, [r7, #32]
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002350:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002354:	4642      	mov	r2, r8
 8002356:	464b      	mov	r3, r9
 8002358:	f04f 0000 	mov.w	r0, #0
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	0159      	lsls	r1, r3, #5
 8002362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002366:	0150      	lsls	r0, r2, #5
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4641      	mov	r1, r8
 800236e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002372:	4649      	mov	r1, r9
 8002374:	eb63 0b01 	sbc.w	fp, r3, r1
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002384:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002388:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800238c:	ebb2 040a 	subs.w	r4, r2, sl
 8002390:	eb63 050b 	sbc.w	r5, r3, fp
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	00eb      	lsls	r3, r5, #3
 800239e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a2:	00e2      	lsls	r2, r4, #3
 80023a4:	4614      	mov	r4, r2
 80023a6:	461d      	mov	r5, r3
 80023a8:	4643      	mov	r3, r8
 80023aa:	18e3      	adds	r3, r4, r3
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	464b      	mov	r3, r9
 80023b0:	eb45 0303 	adc.w	r3, r5, r3
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023c2:	4629      	mov	r1, r5
 80023c4:	028b      	lsls	r3, r1, #10
 80023c6:	4621      	mov	r1, r4
 80023c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023cc:	4621      	mov	r1, r4
 80023ce:	028a      	lsls	r2, r1, #10
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d6:	2200      	movs	r2, #0
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	61fa      	str	r2, [r7, #28]
 80023dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e0:	f7fd ff5e 	bl	80002a0 <__aeabi_uldivmod>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4613      	mov	r3, r2
 80023ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	3301      	adds	r3, #1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002406:	e002      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x204>)
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800240c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002410:	4618      	mov	r0, r3
 8002412:	3750      	adds	r7, #80	@ 0x50
 8002414:	46bd      	mov	sp, r7
 8002416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	00f42400 	.word	0x00f42400
 8002424:	007a1200 	.word	0x007a1200

08002428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_RCC_GetHCLKFreq+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000020 	.word	0x20000020

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002444:	f7ff fff0 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0a9b      	lsrs	r3, r3, #10
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4903      	ldr	r1, [pc, #12]	@ (8002464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	08004f80 	.word	0x08004f80

08002468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800246c:	f7ff ffdc 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0b5b      	lsrs	r3, r3, #13
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4903      	ldr	r1, [pc, #12]	@ (800248c <HAL_RCC_GetPCLK2Freq+0x24>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	08004f80 	.word	0x08004f80

08002490 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e041      	b.n	8002526 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fda6 	bl	8001008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f000 f9a0 	bl	8002814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_TIM_PWM_Start+0x24>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e022      	b.n	800259a <HAL_TIM_PWM_Start+0x6a>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d109      	bne.n	800256e <HAL_TIM_PWM_Start+0x3e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e015      	b.n	800259a <HAL_TIM_PWM_Start+0x6a>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d109      	bne.n	8002588 <HAL_TIM_PWM_Start+0x58>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e008      	b.n	800259a <HAL_TIM_PWM_Start+0x6a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e068      	b.n	8002674 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0x82>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025b0:	e013      	b.n	80025da <HAL_TIM_PWM_Start+0xaa>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_PWM_Start+0x92>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025c0:	e00b      	b.n	80025da <HAL_TIM_PWM_Start+0xaa>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d104      	bne.n	80025d2 <HAL_TIM_PWM_Start+0xa2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025d0:	e003      	b.n	80025da <HAL_TIM_PWM_Start+0xaa>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	6839      	ldr	r1, [r7, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fb28 	bl	8002c38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a23      	ldr	r2, [pc, #140]	@ (800267c <HAL_TIM_PWM_Start+0x14c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d107      	bne.n	8002602 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1d      	ldr	r2, [pc, #116]	@ (800267c <HAL_TIM_PWM_Start+0x14c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d018      	beq.n	800263e <HAL_TIM_PWM_Start+0x10e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002614:	d013      	beq.n	800263e <HAL_TIM_PWM_Start+0x10e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_TIM_PWM_Start+0x150>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00e      	beq.n	800263e <HAL_TIM_PWM_Start+0x10e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <HAL_TIM_PWM_Start+0x154>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d009      	beq.n	800263e <HAL_TIM_PWM_Start+0x10e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a16      	ldr	r2, [pc, #88]	@ (8002688 <HAL_TIM_PWM_Start+0x158>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d004      	beq.n	800263e <HAL_TIM_PWM_Start+0x10e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a14      	ldr	r2, [pc, #80]	@ (800268c <HAL_TIM_PWM_Start+0x15c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d111      	bne.n	8002662 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b06      	cmp	r3, #6
 800264e:	d010      	beq.n	8002672 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002660:	e007      	b.n	8002672 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40010000 	.word	0x40010000
 8002680:	40000400 	.word	0x40000400
 8002684:	40000800 	.word	0x40000800
 8002688:	40000c00 	.word	0x40000c00
 800268c:	40014000 	.word	0x40014000

08002690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0ae      	b.n	800280c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	f200 809f 	bhi.w	80027fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026be:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	080026f9 	.word	0x080026f9
 80026c8:	080027fd 	.word	0x080027fd
 80026cc:	080027fd 	.word	0x080027fd
 80026d0:	080027fd 	.word	0x080027fd
 80026d4:	08002739 	.word	0x08002739
 80026d8:	080027fd 	.word	0x080027fd
 80026dc:	080027fd 	.word	0x080027fd
 80026e0:	080027fd 	.word	0x080027fd
 80026e4:	0800277b 	.word	0x0800277b
 80026e8:	080027fd 	.word	0x080027fd
 80026ec:	080027fd 	.word	0x080027fd
 80026f0:	080027fd 	.word	0x080027fd
 80026f4:	080027bb 	.word	0x080027bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f90e 	bl	8002920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0208 	orr.w	r2, r2, #8
 8002712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0204 	bic.w	r2, r2, #4
 8002722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6999      	ldr	r1, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	619a      	str	r2, [r3, #24]
      break;
 8002736:	e064      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f954 	bl	80029ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6999      	ldr	r1, [r3, #24]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	021a      	lsls	r2, r3, #8
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	619a      	str	r2, [r3, #24]
      break;
 8002778:	e043      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f99f 	bl	8002ac4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0208 	orr.w	r2, r2, #8
 8002794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0204 	bic.w	r2, r2, #4
 80027a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69d9      	ldr	r1, [r3, #28]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]
      break;
 80027b8:	e023      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 f9e9 	bl	8002b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69da      	ldr	r2, [r3, #28]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69d9      	ldr	r1, [r3, #28]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	021a      	lsls	r2, r3, #8
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	61da      	str	r2, [r3, #28]
      break;
 80027fa:	e002      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800280a:	7dfb      	ldrb	r3, [r7, #23]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a37      	ldr	r2, [pc, #220]	@ (8002904 <TIM_Base_SetConfig+0xf0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00f      	beq.n	800284c <TIM_Base_SetConfig+0x38>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002832:	d00b      	beq.n	800284c <TIM_Base_SetConfig+0x38>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a34      	ldr	r2, [pc, #208]	@ (8002908 <TIM_Base_SetConfig+0xf4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d007      	beq.n	800284c <TIM_Base_SetConfig+0x38>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a33      	ldr	r2, [pc, #204]	@ (800290c <TIM_Base_SetConfig+0xf8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d003      	beq.n	800284c <TIM_Base_SetConfig+0x38>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a32      	ldr	r2, [pc, #200]	@ (8002910 <TIM_Base_SetConfig+0xfc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d108      	bne.n	800285e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a28      	ldr	r2, [pc, #160]	@ (8002904 <TIM_Base_SetConfig+0xf0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01b      	beq.n	800289e <TIM_Base_SetConfig+0x8a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286c:	d017      	beq.n	800289e <TIM_Base_SetConfig+0x8a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a25      	ldr	r2, [pc, #148]	@ (8002908 <TIM_Base_SetConfig+0xf4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <TIM_Base_SetConfig+0x8a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a24      	ldr	r2, [pc, #144]	@ (800290c <TIM_Base_SetConfig+0xf8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00f      	beq.n	800289e <TIM_Base_SetConfig+0x8a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a23      	ldr	r2, [pc, #140]	@ (8002910 <TIM_Base_SetConfig+0xfc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00b      	beq.n	800289e <TIM_Base_SetConfig+0x8a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a22      	ldr	r2, [pc, #136]	@ (8002914 <TIM_Base_SetConfig+0x100>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <TIM_Base_SetConfig+0x8a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a21      	ldr	r2, [pc, #132]	@ (8002918 <TIM_Base_SetConfig+0x104>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d003      	beq.n	800289e <TIM_Base_SetConfig+0x8a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a20      	ldr	r2, [pc, #128]	@ (800291c <TIM_Base_SetConfig+0x108>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d108      	bne.n	80028b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002904 <TIM_Base_SetConfig+0xf0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d103      	bne.n	80028de <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	601a      	str	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40010000 	.word	0x40010000
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800
 8002910:	40000c00 	.word	0x40000c00
 8002914:	40014000 	.word	0x40014000
 8002918:	40014400 	.word	0x40014400
 800291c:	40014800 	.word	0x40014800

08002920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f023 0201 	bic.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800294e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 0302 	bic.w	r3, r3, #2
 8002968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a1c      	ldr	r2, [pc, #112]	@ (80029e8 <TIM_OC1_SetConfig+0xc8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d10c      	bne.n	8002996 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 0308 	bic.w	r3, r3, #8
 8002982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a13      	ldr	r2, [pc, #76]	@ (80029e8 <TIM_OC1_SetConfig+0xc8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d111      	bne.n	80029c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	621a      	str	r2, [r3, #32]
}
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40010000 	.word	0x40010000

080029ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f023 0210 	bic.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0320 	bic.w	r3, r3, #32
 8002a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac0 <TIM_OC2_SetConfig+0xd4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10d      	bne.n	8002a68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ac0 <TIM_OC2_SetConfig+0xd4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d113      	bne.n	8002a98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40010000 	.word	0x40010000

08002ac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0303 	bic.w	r3, r3, #3
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b94 <TIM_OC3_SetConfig+0xd0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10d      	bne.n	8002b3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a14      	ldr	r2, [pc, #80]	@ (8002b94 <TIM_OC3_SetConfig+0xd0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d113      	bne.n	8002b6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	621a      	str	r2, [r3, #32]
}
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40010000 	.word	0x40010000

08002b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	031b      	lsls	r3, r3, #12
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a10      	ldr	r2, [pc, #64]	@ (8002c34 <TIM_OC4_SetConfig+0x9c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d109      	bne.n	8002c0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	621a      	str	r2, [r3, #32]
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40010000 	.word	0x40010000

08002c38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	431a      	orrs	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e050      	b.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce8:	d013      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a18      	ldr	r2, [pc, #96]	@ (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a16      	ldr	r2, [pc, #88]	@ (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a15      	ldr	r2, [pc, #84]	@ (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a13      	ldr	r2, [pc, #76]	@ (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10c      	bne.n	8002d2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	40014000 	.word	0x40014000

08002d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e042      	b.n	8002df8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fa2c 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	@ 0x24
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fdd3 	bl	8003950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	@ 0x28
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d175      	bne.n	8002f0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_UART_Transmit+0x2c>
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e06e      	b.n	8002f0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2221      	movs	r2, #33	@ 0x21
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e3e:	f7fe fb05 	bl	800144c <HAL_GetTick>
 8002e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	88fa      	ldrh	r2, [r7, #6]
 8002e4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e58:	d108      	bne.n	8002e6c <HAL_UART_Transmit+0x6c>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d104      	bne.n	8002e6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	e003      	b.n	8002e74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e74:	e02e      	b.n	8002ed4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2180      	movs	r1, #128	@ 0x80
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fb37 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e03a      	b.n	8002f0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	e007      	b.n	8002ec6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1cb      	bne.n	8002e76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2140      	movs	r1, #64	@ 0x40
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fb03 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e006      	b.n	8002f0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d112      	bne.n	8002f56 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Receive_IT+0x26>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e00b      	b.n	8002f58 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fb2a 	bl	80035a6 <UART_Start_Receive_IT>
 8002f52:	4603      	mov	r3, r0
 8002f54:	e000      	b.n	8002f58 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0ba      	sub	sp, #232	@ 0xe8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
 8002fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fc07 	bl	80037d2 <UART_Receive_IT>
      return;
 8002fc4:	e273      	b.n	80034ae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80de 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
 8002fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80d1 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
 8002ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
 800301a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	f043 0202 	orr.w	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
 800303e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
 8003062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f043 0208 	orr.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 820a 	beq.w	80034a4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
 800309c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fb92 	bl	80037d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b8:	2b40      	cmp	r3, #64	@ 0x40
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_UART_IRQHandler+0x17a>
 80030d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04f      	beq.n	800317a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa9d 	bl	800361a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ea:	2b40      	cmp	r3, #64	@ 0x40
 80030ec:	d141      	bne.n	8003172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800310c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800311a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800311e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d9      	bne.n	80030ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003146:	4a8a      	ldr	r2, [pc, #552]	@ (8003370 <HAL_UART_IRQHandler+0x410>)
 8003148:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fb2d 	bl	80017ae <HAL_DMA_Abort_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003164:	4610      	mov	r0, r2
 8003166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00e      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9ac 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e00a      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f9a8 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e006      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9a4 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003186:	e18d      	b.n	80034a4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	bf00      	nop
    return;
 800318a:	e18b      	b.n	80034a4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 8167 	bne.w	8003464 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8160 	beq.w	8003464 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8159 	beq.w	8003464 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b40      	cmp	r3, #64	@ 0x40
 80031d4:	f040 80ce 	bne.w	8003374 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80a9 	beq.w	8003340 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031f6:	429a      	cmp	r2, r3
 80031f8:	f080 80a2 	bcs.w	8003340 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003202:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800320e:	f000 8088 	beq.w	8003322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800322c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800323e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800324a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1d9      	bne.n	8003212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800326e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003282:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003286:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800328a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e1      	bne.n	800325e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e3      	bne.n	800329a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80032f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f2:	f023 0310 	bic.w	r3, r3, #16
 80032f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003304:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003306:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800330a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e3      	bne.n	80032e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe f9d6 	bl	80016ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003330:	b29b      	uxth	r3, r3
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	b29b      	uxth	r3, r3
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8cf 	bl	80034dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800333e:	e0b3      	b.n	80034a8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003344:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003348:	429a      	cmp	r2, r3
 800334a:	f040 80ad 	bne.w	80034a8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003358:	f040 80a6 	bne.w	80034a8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f8b7 	bl	80034dc <HAL_UARTEx_RxEventCallback>
      return;
 800336e:	e09b      	b.n	80034a8 <HAL_UART_IRQHandler+0x548>
 8003370:	080036e1 	.word	0x080036e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 808e 	beq.w	80034ac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8089 	beq.w	80034ac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033be:	647a      	str	r2, [r7, #68]	@ 0x44
 80033c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e3      	bne.n	800339a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	623b      	str	r3, [r7, #32]
   return(result);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e3      	bne.n	80033d2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	60fb      	str	r3, [r7, #12]
   return(result);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800343c:	61fa      	str	r2, [r7, #28]
 800343e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	617b      	str	r3, [r7, #20]
   return(result);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e3      	bne.n	8003418 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f83d 	bl	80034dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003462:	e023      	b.n	80034ac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_UART_IRQHandler+0x524>
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f940 	bl	8003702 <UART_Transmit_IT>
    return;
 8003482:	e014      	b.n	80034ae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <HAL_UART_IRQHandler+0x54e>
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f980 	bl	80037a2 <UART_EndTransmit_IT>
    return;
 80034a2:	e004      	b.n	80034ae <HAL_UART_IRQHandler+0x54e>
    return;
 80034a4:	bf00      	nop
 80034a6:	e002      	b.n	80034ae <HAL_UART_IRQHandler+0x54e>
      return;
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <HAL_UART_IRQHandler+0x54e>
      return;
 80034ac:	bf00      	nop
  }
}
 80034ae:	37e8      	adds	r7, #232	@ 0xe8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003504:	e03b      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800350c:	d037      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fd ff9d 	bl	800144c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	6a3a      	ldr	r2, [r7, #32]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <UART_WaitOnFlagUntilTimeout+0x30>
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e03a      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d023      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b80      	cmp	r3, #128	@ 0x80
 800353a:	d020      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d01d      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d116      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f857 	bl	800361a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2208      	movs	r2, #8
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e00f      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	429a      	cmp	r2, r3
 800359a:	d0b4      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	4613      	mov	r3, r2
 80035b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2222      	movs	r2, #34	@ 0x22
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0220 	orr.w	r2, r2, #32
 800360a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800361a:	b480      	push	{r7}
 800361c:	b095      	sub	sp, #84	@ 0x54
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	330c      	adds	r3, #12
 8003628:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003642:	643a      	str	r2, [r7, #64]	@ 0x40
 8003644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003648:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e5      	bne.n	8003622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	61fb      	str	r3, [r7, #28]
   return(result);
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3314      	adds	r3, #20
 8003674:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800367c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e5      	bne.n	8003656 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	2b01      	cmp	r3, #1
 8003690:	d119      	bne.n	80036c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f023 0310 	bic.w	r3, r3, #16
 80036a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036b2:	61ba      	str	r2, [r7, #24]
 80036b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6979      	ldr	r1, [r7, #20]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	613b      	str	r3, [r7, #16]
   return(result);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e5      	bne.n	8003692 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036d4:	bf00      	nop
 80036d6:	3754      	adds	r7, #84	@ 0x54
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff fee7 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b21      	cmp	r3, #33	@ 0x21
 8003714:	d13e      	bne.n	8003794 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371e:	d114      	bne.n	800374a <UART_Transmit_IT+0x48>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d110      	bne.n	800374a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800373c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	1c9a      	adds	r2, r3, #2
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	621a      	str	r2, [r3, #32]
 8003748:	e008      	b.n	800375c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	1c59      	adds	r1, r3, #1
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6211      	str	r1, [r2, #32]
 8003754:	781a      	ldrb	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29b      	uxth	r3, r3
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4619      	mov	r1, r3
 800376a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10f      	bne.n	8003790 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800377e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800378e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fe76 	bl	80034b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b08c      	sub	sp, #48	@ 0x30
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b22      	cmp	r3, #34	@ 0x22
 80037ec:	f040 80aa 	bne.w	8003944 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f8:	d115      	bne.n	8003826 <UART_Receive_IT+0x54>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d111      	bne.n	8003826 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003806:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003814:	b29a      	uxth	r2, r3
 8003816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003818:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	@ 0x28
 8003824:	e024      	b.n	8003870 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003834:	d007      	beq.n	8003846 <UART_Receive_IT+0x74>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <UART_Receive_IT+0x82>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e008      	b.n	8003866 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003860:	b2da      	uxtb	r2, r3
 8003862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003864:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29b      	uxth	r3, r3
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4619      	mov	r1, r3
 800387e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003880:	2b00      	cmp	r3, #0
 8003882:	d15d      	bne.n	8003940 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0220 	bic.w	r2, r2, #32
 8003892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d135      	bne.n	8003936 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	613b      	str	r3, [r7, #16]
   return(result);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f023 0310 	bic.w	r3, r3, #16
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f0:	623a      	str	r2, [r7, #32]
 80038f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	69f9      	ldr	r1, [r7, #28]
 80038f6:	6a3a      	ldr	r2, [r7, #32]
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b10      	cmp	r3, #16
 8003910:	d10a      	bne.n	8003928 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fdd4 	bl	80034dc <HAL_UARTEx_RxEventCallback>
 8003934:	e002      	b.n	800393c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fc ffec 	bl	8000914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e002      	b.n	8003946 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3730      	adds	r7, #48	@ 0x30
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003954:	b0c0      	sub	sp, #256	@ 0x100
 8003956:	af00      	add	r7, sp, #0
 8003958:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	68d9      	ldr	r1, [r3, #12]
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	ea40 0301 	orr.w	r3, r0, r1
 8003978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	431a      	orrs	r2, r3
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	431a      	orrs	r2, r3
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039a8:	f021 010c 	bic.w	r1, r1, #12
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039b6:	430b      	orrs	r3, r1
 80039b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ca:	6999      	ldr	r1, [r3, #24]
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	ea40 0301 	orr.w	r3, r0, r1
 80039d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b8f      	ldr	r3, [pc, #572]	@ (8003c1c <UART_SetConfig+0x2cc>)
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d005      	beq.n	80039f0 <UART_SetConfig+0xa0>
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003c20 <UART_SetConfig+0x2d0>)
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d104      	bne.n	80039fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7fe fd3a 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 80039f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039f8:	e003      	b.n	8003a02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039fa:	f7fe fd21 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 80039fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a0c:	f040 810c 	bne.w	8003c28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a22:	4622      	mov	r2, r4
 8003a24:	462b      	mov	r3, r5
 8003a26:	1891      	adds	r1, r2, r2
 8003a28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a2a:	415b      	adcs	r3, r3
 8003a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a32:	4621      	mov	r1, r4
 8003a34:	eb12 0801 	adds.w	r8, r2, r1
 8003a38:	4629      	mov	r1, r5
 8003a3a:	eb43 0901 	adc.w	r9, r3, r1
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a52:	4690      	mov	r8, r2
 8003a54:	4699      	mov	r9, r3
 8003a56:	4623      	mov	r3, r4
 8003a58:	eb18 0303 	adds.w	r3, r8, r3
 8003a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a60:	462b      	mov	r3, r5
 8003a62:	eb49 0303 	adc.w	r3, r9, r3
 8003a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a7e:	460b      	mov	r3, r1
 8003a80:	18db      	adds	r3, r3, r3
 8003a82:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a84:	4613      	mov	r3, r2
 8003a86:	eb42 0303 	adc.w	r3, r2, r3
 8003a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a94:	f7fc fc04 	bl	80002a0 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4b61      	ldr	r3, [pc, #388]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	011c      	lsls	r4, r3, #4
 8003aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ab0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ab4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	1891      	adds	r1, r2, r2
 8003abe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ac0:	415b      	adcs	r3, r3
 8003ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ac8:	4641      	mov	r1, r8
 8003aca:	eb12 0a01 	adds.w	sl, r2, r1
 8003ace:	4649      	mov	r1, r9
 8003ad0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ae0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae8:	4692      	mov	sl, r2
 8003aea:	469b      	mov	fp, r3
 8003aec:	4643      	mov	r3, r8
 8003aee:	eb1a 0303 	adds.w	r3, sl, r3
 8003af2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003af6:	464b      	mov	r3, r9
 8003af8:	eb4b 0303 	adc.w	r3, fp, r3
 8003afc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b14:	460b      	mov	r3, r1
 8003b16:	18db      	adds	r3, r3, r3
 8003b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	eb42 0303 	adc.w	r3, r2, r3
 8003b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b2a:	f7fc fbb9 	bl	80002a0 <__aeabi_uldivmod>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	4b3b      	ldr	r3, [pc, #236]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003b36:	fba3 2301 	umull	r2, r3, r3, r1
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2264      	movs	r2, #100	@ 0x64
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	1acb      	subs	r3, r1, r3
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b4a:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b58:	441c      	add	r4, r3
 8003b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	1891      	adds	r1, r2, r2
 8003b72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b74:	415b      	adcs	r3, r3
 8003b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	1851      	adds	r1, r2, r1
 8003b80:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b82:	4649      	mov	r1, r9
 8003b84:	414b      	adcs	r3, r1
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b94:	4659      	mov	r1, fp
 8003b96:	00cb      	lsls	r3, r1, #3
 8003b98:	4651      	mov	r1, sl
 8003b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	00ca      	lsls	r2, r1, #3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4642      	mov	r2, r8
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	eb42 0303 	adc.w	r3, r2, r3
 8003bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bc8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	18db      	adds	r3, r3, r3
 8003bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	eb42 0303 	adc.w	r3, r2, r3
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003be2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003be6:	f7fc fb5b 	bl	80002a0 <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	2164      	movs	r1, #100	@ 0x64
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	3332      	adds	r3, #50	@ 0x32
 8003c02:	4a08      	ldr	r2, [pc, #32]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	f003 0207 	and.w	r2, r3, #7
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4422      	add	r2, r4
 8003c16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c18:	e106      	b.n	8003e28 <UART_SetConfig+0x4d8>
 8003c1a:	bf00      	nop
 8003c1c:	40011000 	.word	0x40011000
 8003c20:	40011400 	.word	0x40011400
 8003c24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c3a:	4642      	mov	r2, r8
 8003c3c:	464b      	mov	r3, r9
 8003c3e:	1891      	adds	r1, r2, r2
 8003c40:	6239      	str	r1, [r7, #32]
 8003c42:	415b      	adcs	r3, r3
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c4a:	4641      	mov	r1, r8
 8003c4c:	1854      	adds	r4, r2, r1
 8003c4e:	4649      	mov	r1, r9
 8003c50:	eb43 0501 	adc.w	r5, r3, r1
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	00eb      	lsls	r3, r5, #3
 8003c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c62:	00e2      	lsls	r2, r4, #3
 8003c64:	4614      	mov	r4, r2
 8003c66:	461d      	mov	r5, r3
 8003c68:	4643      	mov	r3, r8
 8003c6a:	18e3      	adds	r3, r4, r3
 8003c6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c70:	464b      	mov	r3, r9
 8003c72:	eb45 0303 	adc.w	r3, r5, r3
 8003c76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c96:	4629      	mov	r1, r5
 8003c98:	008b      	lsls	r3, r1, #2
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	008a      	lsls	r2, r1, #2
 8003ca4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ca8:	f7fc fafa 	bl	80002a0 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4b60      	ldr	r3, [pc, #384]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	011c      	lsls	r4, r3, #4
 8003cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ccc:	4642      	mov	r2, r8
 8003cce:	464b      	mov	r3, r9
 8003cd0:	1891      	adds	r1, r2, r2
 8003cd2:	61b9      	str	r1, [r7, #24]
 8003cd4:	415b      	adcs	r3, r3
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cdc:	4641      	mov	r1, r8
 8003cde:	1851      	adds	r1, r2, r1
 8003ce0:	6139      	str	r1, [r7, #16]
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	414b      	adcs	r3, r1
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cf4:	4659      	mov	r1, fp
 8003cf6:	00cb      	lsls	r3, r1, #3
 8003cf8:	4651      	mov	r1, sl
 8003cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cfe:	4651      	mov	r1, sl
 8003d00:	00ca      	lsls	r2, r1, #3
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	4642      	mov	r2, r8
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d10:	464b      	mov	r3, r9
 8003d12:	460a      	mov	r2, r1
 8003d14:	eb42 0303 	adc.w	r3, r2, r3
 8003d18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d34:	4649      	mov	r1, r9
 8003d36:	008b      	lsls	r3, r1, #2
 8003d38:	4641      	mov	r1, r8
 8003d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d3e:	4641      	mov	r1, r8
 8003d40:	008a      	lsls	r2, r1, #2
 8003d42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d46:	f7fc faab 	bl	80002a0 <__aeabi_uldivmod>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4b38      	ldr	r3, [pc, #224]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003d52:	fba3 2301 	umull	r2, r3, r3, r1
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2264      	movs	r2, #100	@ 0x64
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	1acb      	subs	r3, r1, r3
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	3332      	adds	r3, #50	@ 0x32
 8003d64:	4a33      	ldr	r2, [pc, #204]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d70:	441c      	add	r4, r3
 8003d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d76:	2200      	movs	r2, #0
 8003d78:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d80:	4642      	mov	r2, r8
 8003d82:	464b      	mov	r3, r9
 8003d84:	1891      	adds	r1, r2, r2
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	415b      	adcs	r3, r3
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d90:	4641      	mov	r1, r8
 8003d92:	1851      	adds	r1, r2, r1
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	4649      	mov	r1, r9
 8003d98:	414b      	adcs	r3, r1
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003da8:	4659      	mov	r1, fp
 8003daa:	00cb      	lsls	r3, r1, #3
 8003dac:	4651      	mov	r1, sl
 8003dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003db2:	4651      	mov	r1, sl
 8003db4:	00ca      	lsls	r2, r1, #3
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	460a      	mov	r2, r1
 8003dc6:	eb42 0303 	adc.w	r3, r2, r3
 8003dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003de4:	4649      	mov	r1, r9
 8003de6:	008b      	lsls	r3, r1, #2
 8003de8:	4641      	mov	r1, r8
 8003dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dee:	4641      	mov	r1, r8
 8003df0:	008a      	lsls	r2, r1, #2
 8003df2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003df6:	f7fc fa53 	bl	80002a0 <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003e00:	fba3 1302 	umull	r1, r3, r3, r2
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	2164      	movs	r1, #100	@ 0x64
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	3332      	adds	r3, #50	@ 0x32
 8003e12:	4a08      	ldr	r2, [pc, #32]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	f003 020f 	and.w	r2, r3, #15
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4422      	add	r2, r4
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e34:	51eb851f 	.word	0x51eb851f

08003e38 <atoi>:
 8003e38:	220a      	movs	r2, #10
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	f000 b87a 	b.w	8003f34 <strtol>

08003e40 <_strtol_l.isra.0>:
 8003e40:	2b24      	cmp	r3, #36	@ 0x24
 8003e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e46:	4686      	mov	lr, r0
 8003e48:	4690      	mov	r8, r2
 8003e4a:	d801      	bhi.n	8003e50 <_strtol_l.isra.0+0x10>
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <_strtol_l.isra.0+0x1e>
 8003e50:	f000 fae4 	bl	800441c <__errno>
 8003e54:	2316      	movs	r3, #22
 8003e56:	6003      	str	r3, [r0, #0]
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5e:	4834      	ldr	r0, [pc, #208]	@ (8003f30 <_strtol_l.isra.0+0xf0>)
 8003e60:	460d      	mov	r5, r1
 8003e62:	462a      	mov	r2, r5
 8003e64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e68:	5d06      	ldrb	r6, [r0, r4]
 8003e6a:	f016 0608 	ands.w	r6, r6, #8
 8003e6e:	d1f8      	bne.n	8003e62 <_strtol_l.isra.0+0x22>
 8003e70:	2c2d      	cmp	r4, #45	@ 0x2d
 8003e72:	d110      	bne.n	8003e96 <_strtol_l.isra.0+0x56>
 8003e74:	782c      	ldrb	r4, [r5, #0]
 8003e76:	2601      	movs	r6, #1
 8003e78:	1c95      	adds	r5, r2, #2
 8003e7a:	f033 0210 	bics.w	r2, r3, #16
 8003e7e:	d115      	bne.n	8003eac <_strtol_l.isra.0+0x6c>
 8003e80:	2c30      	cmp	r4, #48	@ 0x30
 8003e82:	d10d      	bne.n	8003ea0 <_strtol_l.isra.0+0x60>
 8003e84:	782a      	ldrb	r2, [r5, #0]
 8003e86:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003e8a:	2a58      	cmp	r2, #88	@ 0x58
 8003e8c:	d108      	bne.n	8003ea0 <_strtol_l.isra.0+0x60>
 8003e8e:	786c      	ldrb	r4, [r5, #1]
 8003e90:	3502      	adds	r5, #2
 8003e92:	2310      	movs	r3, #16
 8003e94:	e00a      	b.n	8003eac <_strtol_l.isra.0+0x6c>
 8003e96:	2c2b      	cmp	r4, #43	@ 0x2b
 8003e98:	bf04      	itt	eq
 8003e9a:	782c      	ldrbeq	r4, [r5, #0]
 8003e9c:	1c95      	addeq	r5, r2, #2
 8003e9e:	e7ec      	b.n	8003e7a <_strtol_l.isra.0+0x3a>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f6      	bne.n	8003e92 <_strtol_l.isra.0+0x52>
 8003ea4:	2c30      	cmp	r4, #48	@ 0x30
 8003ea6:	bf14      	ite	ne
 8003ea8:	230a      	movne	r3, #10
 8003eaa:	2308      	moveq	r3, #8
 8003eac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003eb0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	fbbc f9f3 	udiv	r9, ip, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	fb03 ca19 	mls	sl, r3, r9, ip
 8003ec0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003ec4:	2f09      	cmp	r7, #9
 8003ec6:	d80f      	bhi.n	8003ee8 <_strtol_l.isra.0+0xa8>
 8003ec8:	463c      	mov	r4, r7
 8003eca:	42a3      	cmp	r3, r4
 8003ecc:	dd1b      	ble.n	8003f06 <_strtol_l.isra.0+0xc6>
 8003ece:	1c57      	adds	r7, r2, #1
 8003ed0:	d007      	beq.n	8003ee2 <_strtol_l.isra.0+0xa2>
 8003ed2:	4581      	cmp	r9, r0
 8003ed4:	d314      	bcc.n	8003f00 <_strtol_l.isra.0+0xc0>
 8003ed6:	d101      	bne.n	8003edc <_strtol_l.isra.0+0x9c>
 8003ed8:	45a2      	cmp	sl, r4
 8003eda:	db11      	blt.n	8003f00 <_strtol_l.isra.0+0xc0>
 8003edc:	fb00 4003 	mla	r0, r0, r3, r4
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ee6:	e7eb      	b.n	8003ec0 <_strtol_l.isra.0+0x80>
 8003ee8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003eec:	2f19      	cmp	r7, #25
 8003eee:	d801      	bhi.n	8003ef4 <_strtol_l.isra.0+0xb4>
 8003ef0:	3c37      	subs	r4, #55	@ 0x37
 8003ef2:	e7ea      	b.n	8003eca <_strtol_l.isra.0+0x8a>
 8003ef4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003ef8:	2f19      	cmp	r7, #25
 8003efa:	d804      	bhi.n	8003f06 <_strtol_l.isra.0+0xc6>
 8003efc:	3c57      	subs	r4, #87	@ 0x57
 8003efe:	e7e4      	b.n	8003eca <_strtol_l.isra.0+0x8a>
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f04:	e7ed      	b.n	8003ee2 <_strtol_l.isra.0+0xa2>
 8003f06:	1c53      	adds	r3, r2, #1
 8003f08:	d108      	bne.n	8003f1c <_strtol_l.isra.0+0xdc>
 8003f0a:	2322      	movs	r3, #34	@ 0x22
 8003f0c:	f8ce 3000 	str.w	r3, [lr]
 8003f10:	4660      	mov	r0, ip
 8003f12:	f1b8 0f00 	cmp.w	r8, #0
 8003f16:	d0a0      	beq.n	8003e5a <_strtol_l.isra.0+0x1a>
 8003f18:	1e69      	subs	r1, r5, #1
 8003f1a:	e006      	b.n	8003f2a <_strtol_l.isra.0+0xea>
 8003f1c:	b106      	cbz	r6, 8003f20 <_strtol_l.isra.0+0xe0>
 8003f1e:	4240      	negs	r0, r0
 8003f20:	f1b8 0f00 	cmp.w	r8, #0
 8003f24:	d099      	beq.n	8003e5a <_strtol_l.isra.0+0x1a>
 8003f26:	2a00      	cmp	r2, #0
 8003f28:	d1f6      	bne.n	8003f18 <_strtol_l.isra.0+0xd8>
 8003f2a:	f8c8 1000 	str.w	r1, [r8]
 8003f2e:	e794      	b.n	8003e5a <_strtol_l.isra.0+0x1a>
 8003f30:	08004f89 	.word	0x08004f89

08003f34 <strtol>:
 8003f34:	4613      	mov	r3, r2
 8003f36:	460a      	mov	r2, r1
 8003f38:	4601      	mov	r1, r0
 8003f3a:	4802      	ldr	r0, [pc, #8]	@ (8003f44 <strtol+0x10>)
 8003f3c:	6800      	ldr	r0, [r0, #0]
 8003f3e:	f7ff bf7f 	b.w	8003e40 <_strtol_l.isra.0>
 8003f42:	bf00      	nop
 8003f44:	20000038 	.word	0x20000038

08003f48 <std>:
 8003f48:	2300      	movs	r3, #0
 8003f4a:	b510      	push	{r4, lr}
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f56:	6083      	str	r3, [r0, #8]
 8003f58:	8181      	strh	r1, [r0, #12]
 8003f5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f5c:	81c2      	strh	r2, [r0, #14]
 8003f5e:	6183      	str	r3, [r0, #24]
 8003f60:	4619      	mov	r1, r3
 8003f62:	2208      	movs	r2, #8
 8003f64:	305c      	adds	r0, #92	@ 0x5c
 8003f66:	f000 f9f9 	bl	800435c <memset>
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <std+0x58>)
 8003f6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <std+0x5c>)
 8003f70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f72:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa8 <std+0x60>)
 8003f74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f76:	4b0d      	ldr	r3, [pc, #52]	@ (8003fac <std+0x64>)
 8003f78:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <std+0x68>)
 8003f7c:	6224      	str	r4, [r4, #32]
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	d006      	beq.n	8003f90 <std+0x48>
 8003f82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f86:	4294      	cmp	r4, r2
 8003f88:	d002      	beq.n	8003f90 <std+0x48>
 8003f8a:	33d0      	adds	r3, #208	@ 0xd0
 8003f8c:	429c      	cmp	r4, r3
 8003f8e:	d105      	bne.n	8003f9c <std+0x54>
 8003f90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f98:	f000 ba6a 	b.w	8004470 <__retarget_lock_init_recursive>
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	bf00      	nop
 8003fa0:	080041ad 	.word	0x080041ad
 8003fa4:	080041cf 	.word	0x080041cf
 8003fa8:	08004207 	.word	0x08004207
 8003fac:	0800422b 	.word	0x0800422b
 8003fb0:	2000021c 	.word	0x2000021c

08003fb4 <stdio_exit_handler>:
 8003fb4:	4a02      	ldr	r2, [pc, #8]	@ (8003fc0 <stdio_exit_handler+0xc>)
 8003fb6:	4903      	ldr	r1, [pc, #12]	@ (8003fc4 <stdio_exit_handler+0x10>)
 8003fb8:	4803      	ldr	r0, [pc, #12]	@ (8003fc8 <stdio_exit_handler+0x14>)
 8003fba:	f000 b869 	b.w	8004090 <_fwalk_sglue>
 8003fbe:	bf00      	nop
 8003fc0:	2000002c 	.word	0x2000002c
 8003fc4:	08004d0d 	.word	0x08004d0d
 8003fc8:	2000003c 	.word	0x2000003c

08003fcc <cleanup_stdio>:
 8003fcc:	6841      	ldr	r1, [r0, #4]
 8003fce:	4b0c      	ldr	r3, [pc, #48]	@ (8004000 <cleanup_stdio+0x34>)
 8003fd0:	4299      	cmp	r1, r3
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	d001      	beq.n	8003fdc <cleanup_stdio+0x10>
 8003fd8:	f000 fe98 	bl	8004d0c <_fflush_r>
 8003fdc:	68a1      	ldr	r1, [r4, #8]
 8003fde:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <cleanup_stdio+0x38>)
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	d002      	beq.n	8003fea <cleanup_stdio+0x1e>
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f000 fe91 	bl	8004d0c <_fflush_r>
 8003fea:	68e1      	ldr	r1, [r4, #12]
 8003fec:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <cleanup_stdio+0x3c>)
 8003fee:	4299      	cmp	r1, r3
 8003ff0:	d004      	beq.n	8003ffc <cleanup_stdio+0x30>
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ff8:	f000 be88 	b.w	8004d0c <_fflush_r>
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	bf00      	nop
 8004000:	2000021c 	.word	0x2000021c
 8004004:	20000284 	.word	0x20000284
 8004008:	200002ec 	.word	0x200002ec

0800400c <global_stdio_init.part.0>:
 800400c:	b510      	push	{r4, lr}
 800400e:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <global_stdio_init.part.0+0x30>)
 8004010:	4c0b      	ldr	r4, [pc, #44]	@ (8004040 <global_stdio_init.part.0+0x34>)
 8004012:	4a0c      	ldr	r2, [pc, #48]	@ (8004044 <global_stdio_init.part.0+0x38>)
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	4620      	mov	r0, r4
 8004018:	2200      	movs	r2, #0
 800401a:	2104      	movs	r1, #4
 800401c:	f7ff ff94 	bl	8003f48 <std>
 8004020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004024:	2201      	movs	r2, #1
 8004026:	2109      	movs	r1, #9
 8004028:	f7ff ff8e 	bl	8003f48 <std>
 800402c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004030:	2202      	movs	r2, #2
 8004032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004036:	2112      	movs	r1, #18
 8004038:	f7ff bf86 	b.w	8003f48 <std>
 800403c:	20000354 	.word	0x20000354
 8004040:	2000021c 	.word	0x2000021c
 8004044:	08003fb5 	.word	0x08003fb5

08004048 <__sfp_lock_acquire>:
 8004048:	4801      	ldr	r0, [pc, #4]	@ (8004050 <__sfp_lock_acquire+0x8>)
 800404a:	f000 ba12 	b.w	8004472 <__retarget_lock_acquire_recursive>
 800404e:	bf00      	nop
 8004050:	2000035d 	.word	0x2000035d

08004054 <__sfp_lock_release>:
 8004054:	4801      	ldr	r0, [pc, #4]	@ (800405c <__sfp_lock_release+0x8>)
 8004056:	f000 ba0d 	b.w	8004474 <__retarget_lock_release_recursive>
 800405a:	bf00      	nop
 800405c:	2000035d 	.word	0x2000035d

08004060 <__sinit>:
 8004060:	b510      	push	{r4, lr}
 8004062:	4604      	mov	r4, r0
 8004064:	f7ff fff0 	bl	8004048 <__sfp_lock_acquire>
 8004068:	6a23      	ldr	r3, [r4, #32]
 800406a:	b11b      	cbz	r3, 8004074 <__sinit+0x14>
 800406c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004070:	f7ff bff0 	b.w	8004054 <__sfp_lock_release>
 8004074:	4b04      	ldr	r3, [pc, #16]	@ (8004088 <__sinit+0x28>)
 8004076:	6223      	str	r3, [r4, #32]
 8004078:	4b04      	ldr	r3, [pc, #16]	@ (800408c <__sinit+0x2c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f5      	bne.n	800406c <__sinit+0xc>
 8004080:	f7ff ffc4 	bl	800400c <global_stdio_init.part.0>
 8004084:	e7f2      	b.n	800406c <__sinit+0xc>
 8004086:	bf00      	nop
 8004088:	08003fcd 	.word	0x08003fcd
 800408c:	20000354 	.word	0x20000354

08004090 <_fwalk_sglue>:
 8004090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004094:	4607      	mov	r7, r0
 8004096:	4688      	mov	r8, r1
 8004098:	4614      	mov	r4, r2
 800409a:	2600      	movs	r6, #0
 800409c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040a0:	f1b9 0901 	subs.w	r9, r9, #1
 80040a4:	d505      	bpl.n	80040b2 <_fwalk_sglue+0x22>
 80040a6:	6824      	ldr	r4, [r4, #0]
 80040a8:	2c00      	cmp	r4, #0
 80040aa:	d1f7      	bne.n	800409c <_fwalk_sglue+0xc>
 80040ac:	4630      	mov	r0, r6
 80040ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b2:	89ab      	ldrh	r3, [r5, #12]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d907      	bls.n	80040c8 <_fwalk_sglue+0x38>
 80040b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040bc:	3301      	adds	r3, #1
 80040be:	d003      	beq.n	80040c8 <_fwalk_sglue+0x38>
 80040c0:	4629      	mov	r1, r5
 80040c2:	4638      	mov	r0, r7
 80040c4:	47c0      	blx	r8
 80040c6:	4306      	orrs	r6, r0
 80040c8:	3568      	adds	r5, #104	@ 0x68
 80040ca:	e7e9      	b.n	80040a0 <_fwalk_sglue+0x10>

080040cc <iprintf>:
 80040cc:	b40f      	push	{r0, r1, r2, r3}
 80040ce:	b507      	push	{r0, r1, r2, lr}
 80040d0:	4906      	ldr	r1, [pc, #24]	@ (80040ec <iprintf+0x20>)
 80040d2:	ab04      	add	r3, sp, #16
 80040d4:	6808      	ldr	r0, [r1, #0]
 80040d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80040da:	6881      	ldr	r1, [r0, #8]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	f000 faed 	bl	80046bc <_vfiprintf_r>
 80040e2:	b003      	add	sp, #12
 80040e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040e8:	b004      	add	sp, #16
 80040ea:	4770      	bx	lr
 80040ec:	20000038 	.word	0x20000038

080040f0 <_puts_r>:
 80040f0:	6a03      	ldr	r3, [r0, #32]
 80040f2:	b570      	push	{r4, r5, r6, lr}
 80040f4:	6884      	ldr	r4, [r0, #8]
 80040f6:	4605      	mov	r5, r0
 80040f8:	460e      	mov	r6, r1
 80040fa:	b90b      	cbnz	r3, 8004100 <_puts_r+0x10>
 80040fc:	f7ff ffb0 	bl	8004060 <__sinit>
 8004100:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004102:	07db      	lsls	r3, r3, #31
 8004104:	d405      	bmi.n	8004112 <_puts_r+0x22>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	0598      	lsls	r0, r3, #22
 800410a:	d402      	bmi.n	8004112 <_puts_r+0x22>
 800410c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800410e:	f000 f9b0 	bl	8004472 <__retarget_lock_acquire_recursive>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	0719      	lsls	r1, r3, #28
 8004116:	d502      	bpl.n	800411e <_puts_r+0x2e>
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d135      	bne.n	800418a <_puts_r+0x9a>
 800411e:	4621      	mov	r1, r4
 8004120:	4628      	mov	r0, r5
 8004122:	f000 f8c5 	bl	80042b0 <__swsetup_r>
 8004126:	b380      	cbz	r0, 800418a <_puts_r+0x9a>
 8004128:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800412c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800412e:	07da      	lsls	r2, r3, #31
 8004130:	d405      	bmi.n	800413e <_puts_r+0x4e>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	059b      	lsls	r3, r3, #22
 8004136:	d402      	bmi.n	800413e <_puts_r+0x4e>
 8004138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800413a:	f000 f99b 	bl	8004474 <__retarget_lock_release_recursive>
 800413e:	4628      	mov	r0, r5
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	2b00      	cmp	r3, #0
 8004144:	da04      	bge.n	8004150 <_puts_r+0x60>
 8004146:	69a2      	ldr	r2, [r4, #24]
 8004148:	429a      	cmp	r2, r3
 800414a:	dc17      	bgt.n	800417c <_puts_r+0x8c>
 800414c:	290a      	cmp	r1, #10
 800414e:	d015      	beq.n	800417c <_puts_r+0x8c>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	6022      	str	r2, [r4, #0]
 8004156:	7019      	strb	r1, [r3, #0]
 8004158:	68a3      	ldr	r3, [r4, #8]
 800415a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800415e:	3b01      	subs	r3, #1
 8004160:	60a3      	str	r3, [r4, #8]
 8004162:	2900      	cmp	r1, #0
 8004164:	d1ed      	bne.n	8004142 <_puts_r+0x52>
 8004166:	2b00      	cmp	r3, #0
 8004168:	da11      	bge.n	800418e <_puts_r+0x9e>
 800416a:	4622      	mov	r2, r4
 800416c:	210a      	movs	r1, #10
 800416e:	4628      	mov	r0, r5
 8004170:	f000 f85f 	bl	8004232 <__swbuf_r>
 8004174:	3001      	adds	r0, #1
 8004176:	d0d7      	beq.n	8004128 <_puts_r+0x38>
 8004178:	250a      	movs	r5, #10
 800417a:	e7d7      	b.n	800412c <_puts_r+0x3c>
 800417c:	4622      	mov	r2, r4
 800417e:	4628      	mov	r0, r5
 8004180:	f000 f857 	bl	8004232 <__swbuf_r>
 8004184:	3001      	adds	r0, #1
 8004186:	d1e7      	bne.n	8004158 <_puts_r+0x68>
 8004188:	e7ce      	b.n	8004128 <_puts_r+0x38>
 800418a:	3e01      	subs	r6, #1
 800418c:	e7e4      	b.n	8004158 <_puts_r+0x68>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	6022      	str	r2, [r4, #0]
 8004194:	220a      	movs	r2, #10
 8004196:	701a      	strb	r2, [r3, #0]
 8004198:	e7ee      	b.n	8004178 <_puts_r+0x88>
	...

0800419c <puts>:
 800419c:	4b02      	ldr	r3, [pc, #8]	@ (80041a8 <puts+0xc>)
 800419e:	4601      	mov	r1, r0
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	f7ff bfa5 	b.w	80040f0 <_puts_r>
 80041a6:	bf00      	nop
 80041a8:	20000038 	.word	0x20000038

080041ac <__sread>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	460c      	mov	r4, r1
 80041b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b4:	f000 f90e 	bl	80043d4 <_read_r>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	bfab      	itete	ge
 80041bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80041be:	89a3      	ldrhlt	r3, [r4, #12]
 80041c0:	181b      	addge	r3, r3, r0
 80041c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80041c6:	bfac      	ite	ge
 80041c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80041ca:	81a3      	strhlt	r3, [r4, #12]
 80041cc:	bd10      	pop	{r4, pc}

080041ce <__swrite>:
 80041ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d2:	461f      	mov	r7, r3
 80041d4:	898b      	ldrh	r3, [r1, #12]
 80041d6:	05db      	lsls	r3, r3, #23
 80041d8:	4605      	mov	r5, r0
 80041da:	460c      	mov	r4, r1
 80041dc:	4616      	mov	r6, r2
 80041de:	d505      	bpl.n	80041ec <__swrite+0x1e>
 80041e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e4:	2302      	movs	r3, #2
 80041e6:	2200      	movs	r2, #0
 80041e8:	f000 f8e2 	bl	80043b0 <_lseek_r>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	4632      	mov	r2, r6
 80041fa:	463b      	mov	r3, r7
 80041fc:	4628      	mov	r0, r5
 80041fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004202:	f000 b8f9 	b.w	80043f8 <_write_r>

08004206 <__sseek>:
 8004206:	b510      	push	{r4, lr}
 8004208:	460c      	mov	r4, r1
 800420a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800420e:	f000 f8cf 	bl	80043b0 <_lseek_r>
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	89a3      	ldrh	r3, [r4, #12]
 8004216:	bf15      	itete	ne
 8004218:	6560      	strne	r0, [r4, #84]	@ 0x54
 800421a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800421e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004222:	81a3      	strheq	r3, [r4, #12]
 8004224:	bf18      	it	ne
 8004226:	81a3      	strhne	r3, [r4, #12]
 8004228:	bd10      	pop	{r4, pc}

0800422a <__sclose>:
 800422a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800422e:	f000 b8af 	b.w	8004390 <_close_r>

08004232 <__swbuf_r>:
 8004232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004234:	460e      	mov	r6, r1
 8004236:	4614      	mov	r4, r2
 8004238:	4605      	mov	r5, r0
 800423a:	b118      	cbz	r0, 8004244 <__swbuf_r+0x12>
 800423c:	6a03      	ldr	r3, [r0, #32]
 800423e:	b90b      	cbnz	r3, 8004244 <__swbuf_r+0x12>
 8004240:	f7ff ff0e 	bl	8004060 <__sinit>
 8004244:	69a3      	ldr	r3, [r4, #24]
 8004246:	60a3      	str	r3, [r4, #8]
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	071a      	lsls	r2, r3, #28
 800424c:	d501      	bpl.n	8004252 <__swbuf_r+0x20>
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	b943      	cbnz	r3, 8004264 <__swbuf_r+0x32>
 8004252:	4621      	mov	r1, r4
 8004254:	4628      	mov	r0, r5
 8004256:	f000 f82b 	bl	80042b0 <__swsetup_r>
 800425a:	b118      	cbz	r0, 8004264 <__swbuf_r+0x32>
 800425c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004260:	4638      	mov	r0, r7
 8004262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	6922      	ldr	r2, [r4, #16]
 8004268:	1a98      	subs	r0, r3, r2
 800426a:	6963      	ldr	r3, [r4, #20]
 800426c:	b2f6      	uxtb	r6, r6
 800426e:	4283      	cmp	r3, r0
 8004270:	4637      	mov	r7, r6
 8004272:	dc05      	bgt.n	8004280 <__swbuf_r+0x4e>
 8004274:	4621      	mov	r1, r4
 8004276:	4628      	mov	r0, r5
 8004278:	f000 fd48 	bl	8004d0c <_fflush_r>
 800427c:	2800      	cmp	r0, #0
 800427e:	d1ed      	bne.n	800425c <__swbuf_r+0x2a>
 8004280:	68a3      	ldr	r3, [r4, #8]
 8004282:	3b01      	subs	r3, #1
 8004284:	60a3      	str	r3, [r4, #8]
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	6022      	str	r2, [r4, #0]
 800428c:	701e      	strb	r6, [r3, #0]
 800428e:	6962      	ldr	r2, [r4, #20]
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	429a      	cmp	r2, r3
 8004294:	d004      	beq.n	80042a0 <__swbuf_r+0x6e>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	07db      	lsls	r3, r3, #31
 800429a:	d5e1      	bpl.n	8004260 <__swbuf_r+0x2e>
 800429c:	2e0a      	cmp	r6, #10
 800429e:	d1df      	bne.n	8004260 <__swbuf_r+0x2e>
 80042a0:	4621      	mov	r1, r4
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 fd32 	bl	8004d0c <_fflush_r>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d0d9      	beq.n	8004260 <__swbuf_r+0x2e>
 80042ac:	e7d6      	b.n	800425c <__swbuf_r+0x2a>
	...

080042b0 <__swsetup_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4b29      	ldr	r3, [pc, #164]	@ (8004358 <__swsetup_r+0xa8>)
 80042b4:	4605      	mov	r5, r0
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	460c      	mov	r4, r1
 80042ba:	b118      	cbz	r0, 80042c4 <__swsetup_r+0x14>
 80042bc:	6a03      	ldr	r3, [r0, #32]
 80042be:	b90b      	cbnz	r3, 80042c4 <__swsetup_r+0x14>
 80042c0:	f7ff fece 	bl	8004060 <__sinit>
 80042c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042c8:	0719      	lsls	r1, r3, #28
 80042ca:	d422      	bmi.n	8004312 <__swsetup_r+0x62>
 80042cc:	06da      	lsls	r2, r3, #27
 80042ce:	d407      	bmi.n	80042e0 <__swsetup_r+0x30>
 80042d0:	2209      	movs	r2, #9
 80042d2:	602a      	str	r2, [r5, #0]
 80042d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042de:	e033      	b.n	8004348 <__swsetup_r+0x98>
 80042e0:	0758      	lsls	r0, r3, #29
 80042e2:	d512      	bpl.n	800430a <__swsetup_r+0x5a>
 80042e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042e6:	b141      	cbz	r1, 80042fa <__swsetup_r+0x4a>
 80042e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042ec:	4299      	cmp	r1, r3
 80042ee:	d002      	beq.n	80042f6 <__swsetup_r+0x46>
 80042f0:	4628      	mov	r0, r5
 80042f2:	f000 f8c1 	bl	8004478 <_free_r>
 80042f6:	2300      	movs	r3, #0
 80042f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004300:	81a3      	strh	r3, [r4, #12]
 8004302:	2300      	movs	r3, #0
 8004304:	6063      	str	r3, [r4, #4]
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f043 0308 	orr.w	r3, r3, #8
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	b94b      	cbnz	r3, 800432a <__swsetup_r+0x7a>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800431c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004320:	d003      	beq.n	800432a <__swsetup_r+0x7a>
 8004322:	4621      	mov	r1, r4
 8004324:	4628      	mov	r0, r5
 8004326:	f000 fd3f 	bl	8004da8 <__smakebuf_r>
 800432a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800432e:	f013 0201 	ands.w	r2, r3, #1
 8004332:	d00a      	beq.n	800434a <__swsetup_r+0x9a>
 8004334:	2200      	movs	r2, #0
 8004336:	60a2      	str	r2, [r4, #8]
 8004338:	6962      	ldr	r2, [r4, #20]
 800433a:	4252      	negs	r2, r2
 800433c:	61a2      	str	r2, [r4, #24]
 800433e:	6922      	ldr	r2, [r4, #16]
 8004340:	b942      	cbnz	r2, 8004354 <__swsetup_r+0xa4>
 8004342:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004346:	d1c5      	bne.n	80042d4 <__swsetup_r+0x24>
 8004348:	bd38      	pop	{r3, r4, r5, pc}
 800434a:	0799      	lsls	r1, r3, #30
 800434c:	bf58      	it	pl
 800434e:	6962      	ldrpl	r2, [r4, #20]
 8004350:	60a2      	str	r2, [r4, #8]
 8004352:	e7f4      	b.n	800433e <__swsetup_r+0x8e>
 8004354:	2000      	movs	r0, #0
 8004356:	e7f7      	b.n	8004348 <__swsetup_r+0x98>
 8004358:	20000038 	.word	0x20000038

0800435c <memset>:
 800435c:	4402      	add	r2, r0
 800435e:	4603      	mov	r3, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	d100      	bne.n	8004366 <memset+0xa>
 8004364:	4770      	bx	lr
 8004366:	f803 1b01 	strb.w	r1, [r3], #1
 800436a:	e7f9      	b.n	8004360 <memset+0x4>

0800436c <strncmp>:
 800436c:	b510      	push	{r4, lr}
 800436e:	b16a      	cbz	r2, 800438c <strncmp+0x20>
 8004370:	3901      	subs	r1, #1
 8004372:	1884      	adds	r4, r0, r2
 8004374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004378:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800437c:	429a      	cmp	r2, r3
 800437e:	d103      	bne.n	8004388 <strncmp+0x1c>
 8004380:	42a0      	cmp	r0, r4
 8004382:	d001      	beq.n	8004388 <strncmp+0x1c>
 8004384:	2a00      	cmp	r2, #0
 8004386:	d1f5      	bne.n	8004374 <strncmp+0x8>
 8004388:	1ad0      	subs	r0, r2, r3
 800438a:	bd10      	pop	{r4, pc}
 800438c:	4610      	mov	r0, r2
 800438e:	e7fc      	b.n	800438a <strncmp+0x1e>

08004390 <_close_r>:
 8004390:	b538      	push	{r3, r4, r5, lr}
 8004392:	4d06      	ldr	r5, [pc, #24]	@ (80043ac <_close_r+0x1c>)
 8004394:	2300      	movs	r3, #0
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	602b      	str	r3, [r5, #0]
 800439c:	f7fc fd03 	bl	8000da6 <_close>
 80043a0:	1c43      	adds	r3, r0, #1
 80043a2:	d102      	bne.n	80043aa <_close_r+0x1a>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	b103      	cbz	r3, 80043aa <_close_r+0x1a>
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	bd38      	pop	{r3, r4, r5, pc}
 80043ac:	20000358 	.word	0x20000358

080043b0 <_lseek_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d07      	ldr	r5, [pc, #28]	@ (80043d0 <_lseek_r+0x20>)
 80043b4:	4604      	mov	r4, r0
 80043b6:	4608      	mov	r0, r1
 80043b8:	4611      	mov	r1, r2
 80043ba:	2200      	movs	r2, #0
 80043bc:	602a      	str	r2, [r5, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	f7fc fd18 	bl	8000df4 <_lseek>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d102      	bne.n	80043ce <_lseek_r+0x1e>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	b103      	cbz	r3, 80043ce <_lseek_r+0x1e>
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	20000358 	.word	0x20000358

080043d4 <_read_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4d07      	ldr	r5, [pc, #28]	@ (80043f4 <_read_r+0x20>)
 80043d8:	4604      	mov	r4, r0
 80043da:	4608      	mov	r0, r1
 80043dc:	4611      	mov	r1, r2
 80043de:	2200      	movs	r2, #0
 80043e0:	602a      	str	r2, [r5, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f7fc fca6 	bl	8000d34 <_read>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d102      	bne.n	80043f2 <_read_r+0x1e>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	b103      	cbz	r3, 80043f2 <_read_r+0x1e>
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	20000358 	.word	0x20000358

080043f8 <_write_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4d07      	ldr	r5, [pc, #28]	@ (8004418 <_write_r+0x20>)
 80043fc:	4604      	mov	r4, r0
 80043fe:	4608      	mov	r0, r1
 8004400:	4611      	mov	r1, r2
 8004402:	2200      	movs	r2, #0
 8004404:	602a      	str	r2, [r5, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	f7fc fcb1 	bl	8000d6e <_write>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_write_r+0x1e>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	b103      	cbz	r3, 8004416 <_write_r+0x1e>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	20000358 	.word	0x20000358

0800441c <__errno>:
 800441c:	4b01      	ldr	r3, [pc, #4]	@ (8004424 <__errno+0x8>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000038 	.word	0x20000038

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	@ (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	@ (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	@ (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	@ (800446c <__libc_init_array+0x44>)
 800443c:	f000 fd22 	bl	8004e84 <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	080050c4 	.word	0x080050c4
 8004464:	080050c4 	.word	0x080050c4
 8004468:	080050c4 	.word	0x080050c4
 800446c:	080050c8 	.word	0x080050c8

08004470 <__retarget_lock_init_recursive>:
 8004470:	4770      	bx	lr

08004472 <__retarget_lock_acquire_recursive>:
 8004472:	4770      	bx	lr

08004474 <__retarget_lock_release_recursive>:
 8004474:	4770      	bx	lr
	...

08004478 <_free_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4605      	mov	r5, r0
 800447c:	2900      	cmp	r1, #0
 800447e:	d041      	beq.n	8004504 <_free_r+0x8c>
 8004480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004484:	1f0c      	subs	r4, r1, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	bfb8      	it	lt
 800448a:	18e4      	addlt	r4, r4, r3
 800448c:	f000 f8e0 	bl	8004650 <__malloc_lock>
 8004490:	4a1d      	ldr	r2, [pc, #116]	@ (8004508 <_free_r+0x90>)
 8004492:	6813      	ldr	r3, [r2, #0]
 8004494:	b933      	cbnz	r3, 80044a4 <_free_r+0x2c>
 8004496:	6063      	str	r3, [r4, #4]
 8004498:	6014      	str	r4, [r2, #0]
 800449a:	4628      	mov	r0, r5
 800449c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044a0:	f000 b8dc 	b.w	800465c <__malloc_unlock>
 80044a4:	42a3      	cmp	r3, r4
 80044a6:	d908      	bls.n	80044ba <_free_r+0x42>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	1821      	adds	r1, r4, r0
 80044ac:	428b      	cmp	r3, r1
 80044ae:	bf01      	itttt	eq
 80044b0:	6819      	ldreq	r1, [r3, #0]
 80044b2:	685b      	ldreq	r3, [r3, #4]
 80044b4:	1809      	addeq	r1, r1, r0
 80044b6:	6021      	streq	r1, [r4, #0]
 80044b8:	e7ed      	b.n	8004496 <_free_r+0x1e>
 80044ba:	461a      	mov	r2, r3
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	b10b      	cbz	r3, 80044c4 <_free_r+0x4c>
 80044c0:	42a3      	cmp	r3, r4
 80044c2:	d9fa      	bls.n	80044ba <_free_r+0x42>
 80044c4:	6811      	ldr	r1, [r2, #0]
 80044c6:	1850      	adds	r0, r2, r1
 80044c8:	42a0      	cmp	r0, r4
 80044ca:	d10b      	bne.n	80044e4 <_free_r+0x6c>
 80044cc:	6820      	ldr	r0, [r4, #0]
 80044ce:	4401      	add	r1, r0
 80044d0:	1850      	adds	r0, r2, r1
 80044d2:	4283      	cmp	r3, r0
 80044d4:	6011      	str	r1, [r2, #0]
 80044d6:	d1e0      	bne.n	800449a <_free_r+0x22>
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	6053      	str	r3, [r2, #4]
 80044de:	4408      	add	r0, r1
 80044e0:	6010      	str	r0, [r2, #0]
 80044e2:	e7da      	b.n	800449a <_free_r+0x22>
 80044e4:	d902      	bls.n	80044ec <_free_r+0x74>
 80044e6:	230c      	movs	r3, #12
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	e7d6      	b.n	800449a <_free_r+0x22>
 80044ec:	6820      	ldr	r0, [r4, #0]
 80044ee:	1821      	adds	r1, r4, r0
 80044f0:	428b      	cmp	r3, r1
 80044f2:	bf04      	itt	eq
 80044f4:	6819      	ldreq	r1, [r3, #0]
 80044f6:	685b      	ldreq	r3, [r3, #4]
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	bf04      	itt	eq
 80044fc:	1809      	addeq	r1, r1, r0
 80044fe:	6021      	streq	r1, [r4, #0]
 8004500:	6054      	str	r4, [r2, #4]
 8004502:	e7ca      	b.n	800449a <_free_r+0x22>
 8004504:	bd38      	pop	{r3, r4, r5, pc}
 8004506:	bf00      	nop
 8004508:	20000364 	.word	0x20000364

0800450c <sbrk_aligned>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	4e0f      	ldr	r6, [pc, #60]	@ (800454c <sbrk_aligned+0x40>)
 8004510:	460c      	mov	r4, r1
 8004512:	6831      	ldr	r1, [r6, #0]
 8004514:	4605      	mov	r5, r0
 8004516:	b911      	cbnz	r1, 800451e <sbrk_aligned+0x12>
 8004518:	f000 fca4 	bl	8004e64 <_sbrk_r>
 800451c:	6030      	str	r0, [r6, #0]
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f000 fc9f 	bl	8004e64 <_sbrk_r>
 8004526:	1c43      	adds	r3, r0, #1
 8004528:	d103      	bne.n	8004532 <sbrk_aligned+0x26>
 800452a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800452e:	4620      	mov	r0, r4
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	1cc4      	adds	r4, r0, #3
 8004534:	f024 0403 	bic.w	r4, r4, #3
 8004538:	42a0      	cmp	r0, r4
 800453a:	d0f8      	beq.n	800452e <sbrk_aligned+0x22>
 800453c:	1a21      	subs	r1, r4, r0
 800453e:	4628      	mov	r0, r5
 8004540:	f000 fc90 	bl	8004e64 <_sbrk_r>
 8004544:	3001      	adds	r0, #1
 8004546:	d1f2      	bne.n	800452e <sbrk_aligned+0x22>
 8004548:	e7ef      	b.n	800452a <sbrk_aligned+0x1e>
 800454a:	bf00      	nop
 800454c:	20000360 	.word	0x20000360

08004550 <_malloc_r>:
 8004550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004554:	1ccd      	adds	r5, r1, #3
 8004556:	f025 0503 	bic.w	r5, r5, #3
 800455a:	3508      	adds	r5, #8
 800455c:	2d0c      	cmp	r5, #12
 800455e:	bf38      	it	cc
 8004560:	250c      	movcc	r5, #12
 8004562:	2d00      	cmp	r5, #0
 8004564:	4606      	mov	r6, r0
 8004566:	db01      	blt.n	800456c <_malloc_r+0x1c>
 8004568:	42a9      	cmp	r1, r5
 800456a:	d904      	bls.n	8004576 <_malloc_r+0x26>
 800456c:	230c      	movs	r3, #12
 800456e:	6033      	str	r3, [r6, #0]
 8004570:	2000      	movs	r0, #0
 8004572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800464c <_malloc_r+0xfc>
 800457a:	f000 f869 	bl	8004650 <__malloc_lock>
 800457e:	f8d8 3000 	ldr.w	r3, [r8]
 8004582:	461c      	mov	r4, r3
 8004584:	bb44      	cbnz	r4, 80045d8 <_malloc_r+0x88>
 8004586:	4629      	mov	r1, r5
 8004588:	4630      	mov	r0, r6
 800458a:	f7ff ffbf 	bl	800450c <sbrk_aligned>
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	4604      	mov	r4, r0
 8004592:	d158      	bne.n	8004646 <_malloc_r+0xf6>
 8004594:	f8d8 4000 	ldr.w	r4, [r8]
 8004598:	4627      	mov	r7, r4
 800459a:	2f00      	cmp	r7, #0
 800459c:	d143      	bne.n	8004626 <_malloc_r+0xd6>
 800459e:	2c00      	cmp	r4, #0
 80045a0:	d04b      	beq.n	800463a <_malloc_r+0xea>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	4639      	mov	r1, r7
 80045a6:	4630      	mov	r0, r6
 80045a8:	eb04 0903 	add.w	r9, r4, r3
 80045ac:	f000 fc5a 	bl	8004e64 <_sbrk_r>
 80045b0:	4581      	cmp	r9, r0
 80045b2:	d142      	bne.n	800463a <_malloc_r+0xea>
 80045b4:	6821      	ldr	r1, [r4, #0]
 80045b6:	1a6d      	subs	r5, r5, r1
 80045b8:	4629      	mov	r1, r5
 80045ba:	4630      	mov	r0, r6
 80045bc:	f7ff ffa6 	bl	800450c <sbrk_aligned>
 80045c0:	3001      	adds	r0, #1
 80045c2:	d03a      	beq.n	800463a <_malloc_r+0xea>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	442b      	add	r3, r5
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	f8d8 3000 	ldr.w	r3, [r8]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	bb62      	cbnz	r2, 800462c <_malloc_r+0xdc>
 80045d2:	f8c8 7000 	str.w	r7, [r8]
 80045d6:	e00f      	b.n	80045f8 <_malloc_r+0xa8>
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	1b52      	subs	r2, r2, r5
 80045dc:	d420      	bmi.n	8004620 <_malloc_r+0xd0>
 80045de:	2a0b      	cmp	r2, #11
 80045e0:	d917      	bls.n	8004612 <_malloc_r+0xc2>
 80045e2:	1961      	adds	r1, r4, r5
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	6025      	str	r5, [r4, #0]
 80045e8:	bf18      	it	ne
 80045ea:	6059      	strne	r1, [r3, #4]
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	bf08      	it	eq
 80045f0:	f8c8 1000 	streq.w	r1, [r8]
 80045f4:	5162      	str	r2, [r4, r5]
 80045f6:	604b      	str	r3, [r1, #4]
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 f82f 	bl	800465c <__malloc_unlock>
 80045fe:	f104 000b 	add.w	r0, r4, #11
 8004602:	1d23      	adds	r3, r4, #4
 8004604:	f020 0007 	bic.w	r0, r0, #7
 8004608:	1ac2      	subs	r2, r0, r3
 800460a:	bf1c      	itt	ne
 800460c:	1a1b      	subne	r3, r3, r0
 800460e:	50a3      	strne	r3, [r4, r2]
 8004610:	e7af      	b.n	8004572 <_malloc_r+0x22>
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	42a3      	cmp	r3, r4
 8004616:	bf0c      	ite	eq
 8004618:	f8c8 2000 	streq.w	r2, [r8]
 800461c:	605a      	strne	r2, [r3, #4]
 800461e:	e7eb      	b.n	80045f8 <_malloc_r+0xa8>
 8004620:	4623      	mov	r3, r4
 8004622:	6864      	ldr	r4, [r4, #4]
 8004624:	e7ae      	b.n	8004584 <_malloc_r+0x34>
 8004626:	463c      	mov	r4, r7
 8004628:	687f      	ldr	r7, [r7, #4]
 800462a:	e7b6      	b.n	800459a <_malloc_r+0x4a>
 800462c:	461a      	mov	r2, r3
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	42a3      	cmp	r3, r4
 8004632:	d1fb      	bne.n	800462c <_malloc_r+0xdc>
 8004634:	2300      	movs	r3, #0
 8004636:	6053      	str	r3, [r2, #4]
 8004638:	e7de      	b.n	80045f8 <_malloc_r+0xa8>
 800463a:	230c      	movs	r3, #12
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	4630      	mov	r0, r6
 8004640:	f000 f80c 	bl	800465c <__malloc_unlock>
 8004644:	e794      	b.n	8004570 <_malloc_r+0x20>
 8004646:	6005      	str	r5, [r0, #0]
 8004648:	e7d6      	b.n	80045f8 <_malloc_r+0xa8>
 800464a:	bf00      	nop
 800464c:	20000364 	.word	0x20000364

08004650 <__malloc_lock>:
 8004650:	4801      	ldr	r0, [pc, #4]	@ (8004658 <__malloc_lock+0x8>)
 8004652:	f7ff bf0e 	b.w	8004472 <__retarget_lock_acquire_recursive>
 8004656:	bf00      	nop
 8004658:	2000035c 	.word	0x2000035c

0800465c <__malloc_unlock>:
 800465c:	4801      	ldr	r0, [pc, #4]	@ (8004664 <__malloc_unlock+0x8>)
 800465e:	f7ff bf09 	b.w	8004474 <__retarget_lock_release_recursive>
 8004662:	bf00      	nop
 8004664:	2000035c 	.word	0x2000035c

08004668 <__sfputc_r>:
 8004668:	6893      	ldr	r3, [r2, #8]
 800466a:	3b01      	subs	r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	b410      	push	{r4}
 8004670:	6093      	str	r3, [r2, #8]
 8004672:	da08      	bge.n	8004686 <__sfputc_r+0x1e>
 8004674:	6994      	ldr	r4, [r2, #24]
 8004676:	42a3      	cmp	r3, r4
 8004678:	db01      	blt.n	800467e <__sfputc_r+0x16>
 800467a:	290a      	cmp	r1, #10
 800467c:	d103      	bne.n	8004686 <__sfputc_r+0x1e>
 800467e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004682:	f7ff bdd6 	b.w	8004232 <__swbuf_r>
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	1c58      	adds	r0, r3, #1
 800468a:	6010      	str	r0, [r2, #0]
 800468c:	7019      	strb	r1, [r3, #0]
 800468e:	4608      	mov	r0, r1
 8004690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004694:	4770      	bx	lr

08004696 <__sfputs_r>:
 8004696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004698:	4606      	mov	r6, r0
 800469a:	460f      	mov	r7, r1
 800469c:	4614      	mov	r4, r2
 800469e:	18d5      	adds	r5, r2, r3
 80046a0:	42ac      	cmp	r4, r5
 80046a2:	d101      	bne.n	80046a8 <__sfputs_r+0x12>
 80046a4:	2000      	movs	r0, #0
 80046a6:	e007      	b.n	80046b8 <__sfputs_r+0x22>
 80046a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ac:	463a      	mov	r2, r7
 80046ae:	4630      	mov	r0, r6
 80046b0:	f7ff ffda 	bl	8004668 <__sfputc_r>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d1f3      	bne.n	80046a0 <__sfputs_r+0xa>
 80046b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046bc <_vfiprintf_r>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	460d      	mov	r5, r1
 80046c2:	b09d      	sub	sp, #116	@ 0x74
 80046c4:	4614      	mov	r4, r2
 80046c6:	4698      	mov	r8, r3
 80046c8:	4606      	mov	r6, r0
 80046ca:	b118      	cbz	r0, 80046d4 <_vfiprintf_r+0x18>
 80046cc:	6a03      	ldr	r3, [r0, #32]
 80046ce:	b90b      	cbnz	r3, 80046d4 <_vfiprintf_r+0x18>
 80046d0:	f7ff fcc6 	bl	8004060 <__sinit>
 80046d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046d6:	07d9      	lsls	r1, r3, #31
 80046d8:	d405      	bmi.n	80046e6 <_vfiprintf_r+0x2a>
 80046da:	89ab      	ldrh	r3, [r5, #12]
 80046dc:	059a      	lsls	r2, r3, #22
 80046de:	d402      	bmi.n	80046e6 <_vfiprintf_r+0x2a>
 80046e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046e2:	f7ff fec6 	bl	8004472 <__retarget_lock_acquire_recursive>
 80046e6:	89ab      	ldrh	r3, [r5, #12]
 80046e8:	071b      	lsls	r3, r3, #28
 80046ea:	d501      	bpl.n	80046f0 <_vfiprintf_r+0x34>
 80046ec:	692b      	ldr	r3, [r5, #16]
 80046ee:	b99b      	cbnz	r3, 8004718 <_vfiprintf_r+0x5c>
 80046f0:	4629      	mov	r1, r5
 80046f2:	4630      	mov	r0, r6
 80046f4:	f7ff fddc 	bl	80042b0 <__swsetup_r>
 80046f8:	b170      	cbz	r0, 8004718 <_vfiprintf_r+0x5c>
 80046fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046fc:	07dc      	lsls	r4, r3, #31
 80046fe:	d504      	bpl.n	800470a <_vfiprintf_r+0x4e>
 8004700:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004704:	b01d      	add	sp, #116	@ 0x74
 8004706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470a:	89ab      	ldrh	r3, [r5, #12]
 800470c:	0598      	lsls	r0, r3, #22
 800470e:	d4f7      	bmi.n	8004700 <_vfiprintf_r+0x44>
 8004710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004712:	f7ff feaf 	bl	8004474 <__retarget_lock_release_recursive>
 8004716:	e7f3      	b.n	8004700 <_vfiprintf_r+0x44>
 8004718:	2300      	movs	r3, #0
 800471a:	9309      	str	r3, [sp, #36]	@ 0x24
 800471c:	2320      	movs	r3, #32
 800471e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004722:	f8cd 800c 	str.w	r8, [sp, #12]
 8004726:	2330      	movs	r3, #48	@ 0x30
 8004728:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80048d8 <_vfiprintf_r+0x21c>
 800472c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004730:	f04f 0901 	mov.w	r9, #1
 8004734:	4623      	mov	r3, r4
 8004736:	469a      	mov	sl, r3
 8004738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800473c:	b10a      	cbz	r2, 8004742 <_vfiprintf_r+0x86>
 800473e:	2a25      	cmp	r2, #37	@ 0x25
 8004740:	d1f9      	bne.n	8004736 <_vfiprintf_r+0x7a>
 8004742:	ebba 0b04 	subs.w	fp, sl, r4
 8004746:	d00b      	beq.n	8004760 <_vfiprintf_r+0xa4>
 8004748:	465b      	mov	r3, fp
 800474a:	4622      	mov	r2, r4
 800474c:	4629      	mov	r1, r5
 800474e:	4630      	mov	r0, r6
 8004750:	f7ff ffa1 	bl	8004696 <__sfputs_r>
 8004754:	3001      	adds	r0, #1
 8004756:	f000 80a7 	beq.w	80048a8 <_vfiprintf_r+0x1ec>
 800475a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800475c:	445a      	add	r2, fp
 800475e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004760:	f89a 3000 	ldrb.w	r3, [sl]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 809f 	beq.w	80048a8 <_vfiprintf_r+0x1ec>
 800476a:	2300      	movs	r3, #0
 800476c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004774:	f10a 0a01 	add.w	sl, sl, #1
 8004778:	9304      	str	r3, [sp, #16]
 800477a:	9307      	str	r3, [sp, #28]
 800477c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004780:	931a      	str	r3, [sp, #104]	@ 0x68
 8004782:	4654      	mov	r4, sl
 8004784:	2205      	movs	r2, #5
 8004786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478a:	4853      	ldr	r0, [pc, #332]	@ (80048d8 <_vfiprintf_r+0x21c>)
 800478c:	f7fb fd38 	bl	8000200 <memchr>
 8004790:	9a04      	ldr	r2, [sp, #16]
 8004792:	b9d8      	cbnz	r0, 80047cc <_vfiprintf_r+0x110>
 8004794:	06d1      	lsls	r1, r2, #27
 8004796:	bf44      	itt	mi
 8004798:	2320      	movmi	r3, #32
 800479a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800479e:	0713      	lsls	r3, r2, #28
 80047a0:	bf44      	itt	mi
 80047a2:	232b      	movmi	r3, #43	@ 0x2b
 80047a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047a8:	f89a 3000 	ldrb.w	r3, [sl]
 80047ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ae:	d015      	beq.n	80047dc <_vfiprintf_r+0x120>
 80047b0:	9a07      	ldr	r2, [sp, #28]
 80047b2:	4654      	mov	r4, sl
 80047b4:	2000      	movs	r0, #0
 80047b6:	f04f 0c0a 	mov.w	ip, #10
 80047ba:	4621      	mov	r1, r4
 80047bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047c0:	3b30      	subs	r3, #48	@ 0x30
 80047c2:	2b09      	cmp	r3, #9
 80047c4:	d94b      	bls.n	800485e <_vfiprintf_r+0x1a2>
 80047c6:	b1b0      	cbz	r0, 80047f6 <_vfiprintf_r+0x13a>
 80047c8:	9207      	str	r2, [sp, #28]
 80047ca:	e014      	b.n	80047f6 <_vfiprintf_r+0x13a>
 80047cc:	eba0 0308 	sub.w	r3, r0, r8
 80047d0:	fa09 f303 	lsl.w	r3, r9, r3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	46a2      	mov	sl, r4
 80047da:	e7d2      	b.n	8004782 <_vfiprintf_r+0xc6>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	1d19      	adds	r1, r3, #4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	9103      	str	r1, [sp, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bfbb      	ittet	lt
 80047e8:	425b      	neglt	r3, r3
 80047ea:	f042 0202 	orrlt.w	r2, r2, #2
 80047ee:	9307      	strge	r3, [sp, #28]
 80047f0:	9307      	strlt	r3, [sp, #28]
 80047f2:	bfb8      	it	lt
 80047f4:	9204      	strlt	r2, [sp, #16]
 80047f6:	7823      	ldrb	r3, [r4, #0]
 80047f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80047fa:	d10a      	bne.n	8004812 <_vfiprintf_r+0x156>
 80047fc:	7863      	ldrb	r3, [r4, #1]
 80047fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004800:	d132      	bne.n	8004868 <_vfiprintf_r+0x1ac>
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	1d1a      	adds	r2, r3, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	9203      	str	r2, [sp, #12]
 800480a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800480e:	3402      	adds	r4, #2
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80048e8 <_vfiprintf_r+0x22c>
 8004816:	7821      	ldrb	r1, [r4, #0]
 8004818:	2203      	movs	r2, #3
 800481a:	4650      	mov	r0, sl
 800481c:	f7fb fcf0 	bl	8000200 <memchr>
 8004820:	b138      	cbz	r0, 8004832 <_vfiprintf_r+0x176>
 8004822:	9b04      	ldr	r3, [sp, #16]
 8004824:	eba0 000a 	sub.w	r0, r0, sl
 8004828:	2240      	movs	r2, #64	@ 0x40
 800482a:	4082      	lsls	r2, r0
 800482c:	4313      	orrs	r3, r2
 800482e:	3401      	adds	r4, #1
 8004830:	9304      	str	r3, [sp, #16]
 8004832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004836:	4829      	ldr	r0, [pc, #164]	@ (80048dc <_vfiprintf_r+0x220>)
 8004838:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800483c:	2206      	movs	r2, #6
 800483e:	f7fb fcdf 	bl	8000200 <memchr>
 8004842:	2800      	cmp	r0, #0
 8004844:	d03f      	beq.n	80048c6 <_vfiprintf_r+0x20a>
 8004846:	4b26      	ldr	r3, [pc, #152]	@ (80048e0 <_vfiprintf_r+0x224>)
 8004848:	bb1b      	cbnz	r3, 8004892 <_vfiprintf_r+0x1d6>
 800484a:	9b03      	ldr	r3, [sp, #12]
 800484c:	3307      	adds	r3, #7
 800484e:	f023 0307 	bic.w	r3, r3, #7
 8004852:	3308      	adds	r3, #8
 8004854:	9303      	str	r3, [sp, #12]
 8004856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004858:	443b      	add	r3, r7
 800485a:	9309      	str	r3, [sp, #36]	@ 0x24
 800485c:	e76a      	b.n	8004734 <_vfiprintf_r+0x78>
 800485e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004862:	460c      	mov	r4, r1
 8004864:	2001      	movs	r0, #1
 8004866:	e7a8      	b.n	80047ba <_vfiprintf_r+0xfe>
 8004868:	2300      	movs	r3, #0
 800486a:	3401      	adds	r4, #1
 800486c:	9305      	str	r3, [sp, #20]
 800486e:	4619      	mov	r1, r3
 8004870:	f04f 0c0a 	mov.w	ip, #10
 8004874:	4620      	mov	r0, r4
 8004876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800487a:	3a30      	subs	r2, #48	@ 0x30
 800487c:	2a09      	cmp	r2, #9
 800487e:	d903      	bls.n	8004888 <_vfiprintf_r+0x1cc>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0c6      	beq.n	8004812 <_vfiprintf_r+0x156>
 8004884:	9105      	str	r1, [sp, #20]
 8004886:	e7c4      	b.n	8004812 <_vfiprintf_r+0x156>
 8004888:	fb0c 2101 	mla	r1, ip, r1, r2
 800488c:	4604      	mov	r4, r0
 800488e:	2301      	movs	r3, #1
 8004890:	e7f0      	b.n	8004874 <_vfiprintf_r+0x1b8>
 8004892:	ab03      	add	r3, sp, #12
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	462a      	mov	r2, r5
 8004898:	4b12      	ldr	r3, [pc, #72]	@ (80048e4 <_vfiprintf_r+0x228>)
 800489a:	a904      	add	r1, sp, #16
 800489c:	4630      	mov	r0, r6
 800489e:	f3af 8000 	nop.w
 80048a2:	4607      	mov	r7, r0
 80048a4:	1c78      	adds	r0, r7, #1
 80048a6:	d1d6      	bne.n	8004856 <_vfiprintf_r+0x19a>
 80048a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048aa:	07d9      	lsls	r1, r3, #31
 80048ac:	d405      	bmi.n	80048ba <_vfiprintf_r+0x1fe>
 80048ae:	89ab      	ldrh	r3, [r5, #12]
 80048b0:	059a      	lsls	r2, r3, #22
 80048b2:	d402      	bmi.n	80048ba <_vfiprintf_r+0x1fe>
 80048b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048b6:	f7ff fddd 	bl	8004474 <__retarget_lock_release_recursive>
 80048ba:	89ab      	ldrh	r3, [r5, #12]
 80048bc:	065b      	lsls	r3, r3, #25
 80048be:	f53f af1f 	bmi.w	8004700 <_vfiprintf_r+0x44>
 80048c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048c4:	e71e      	b.n	8004704 <_vfiprintf_r+0x48>
 80048c6:	ab03      	add	r3, sp, #12
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	462a      	mov	r2, r5
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <_vfiprintf_r+0x228>)
 80048ce:	a904      	add	r1, sp, #16
 80048d0:	4630      	mov	r0, r6
 80048d2:	f000 f879 	bl	80049c8 <_printf_i>
 80048d6:	e7e4      	b.n	80048a2 <_vfiprintf_r+0x1e6>
 80048d8:	08005089 	.word	0x08005089
 80048dc:	08005093 	.word	0x08005093
 80048e0:	00000000 	.word	0x00000000
 80048e4:	08004697 	.word	0x08004697
 80048e8:	0800508f 	.word	0x0800508f

080048ec <_printf_common>:
 80048ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	4616      	mov	r6, r2
 80048f2:	4698      	mov	r8, r3
 80048f4:	688a      	ldr	r2, [r1, #8]
 80048f6:	690b      	ldr	r3, [r1, #16]
 80048f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048fc:	4293      	cmp	r3, r2
 80048fe:	bfb8      	it	lt
 8004900:	4613      	movlt	r3, r2
 8004902:	6033      	str	r3, [r6, #0]
 8004904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004908:	4607      	mov	r7, r0
 800490a:	460c      	mov	r4, r1
 800490c:	b10a      	cbz	r2, 8004912 <_printf_common+0x26>
 800490e:	3301      	adds	r3, #1
 8004910:	6033      	str	r3, [r6, #0]
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	0699      	lsls	r1, r3, #26
 8004916:	bf42      	ittt	mi
 8004918:	6833      	ldrmi	r3, [r6, #0]
 800491a:	3302      	addmi	r3, #2
 800491c:	6033      	strmi	r3, [r6, #0]
 800491e:	6825      	ldr	r5, [r4, #0]
 8004920:	f015 0506 	ands.w	r5, r5, #6
 8004924:	d106      	bne.n	8004934 <_printf_common+0x48>
 8004926:	f104 0a19 	add.w	sl, r4, #25
 800492a:	68e3      	ldr	r3, [r4, #12]
 800492c:	6832      	ldr	r2, [r6, #0]
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	42ab      	cmp	r3, r5
 8004932:	dc26      	bgt.n	8004982 <_printf_common+0x96>
 8004934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004938:	6822      	ldr	r2, [r4, #0]
 800493a:	3b00      	subs	r3, #0
 800493c:	bf18      	it	ne
 800493e:	2301      	movne	r3, #1
 8004940:	0692      	lsls	r2, r2, #26
 8004942:	d42b      	bmi.n	800499c <_printf_common+0xb0>
 8004944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004948:	4641      	mov	r1, r8
 800494a:	4638      	mov	r0, r7
 800494c:	47c8      	blx	r9
 800494e:	3001      	adds	r0, #1
 8004950:	d01e      	beq.n	8004990 <_printf_common+0xa4>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	6922      	ldr	r2, [r4, #16]
 8004956:	f003 0306 	and.w	r3, r3, #6
 800495a:	2b04      	cmp	r3, #4
 800495c:	bf02      	ittt	eq
 800495e:	68e5      	ldreq	r5, [r4, #12]
 8004960:	6833      	ldreq	r3, [r6, #0]
 8004962:	1aed      	subeq	r5, r5, r3
 8004964:	68a3      	ldr	r3, [r4, #8]
 8004966:	bf0c      	ite	eq
 8004968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800496c:	2500      	movne	r5, #0
 800496e:	4293      	cmp	r3, r2
 8004970:	bfc4      	itt	gt
 8004972:	1a9b      	subgt	r3, r3, r2
 8004974:	18ed      	addgt	r5, r5, r3
 8004976:	2600      	movs	r6, #0
 8004978:	341a      	adds	r4, #26
 800497a:	42b5      	cmp	r5, r6
 800497c:	d11a      	bne.n	80049b4 <_printf_common+0xc8>
 800497e:	2000      	movs	r0, #0
 8004980:	e008      	b.n	8004994 <_printf_common+0xa8>
 8004982:	2301      	movs	r3, #1
 8004984:	4652      	mov	r2, sl
 8004986:	4641      	mov	r1, r8
 8004988:	4638      	mov	r0, r7
 800498a:	47c8      	blx	r9
 800498c:	3001      	adds	r0, #1
 800498e:	d103      	bne.n	8004998 <_printf_common+0xac>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004998:	3501      	adds	r5, #1
 800499a:	e7c6      	b.n	800492a <_printf_common+0x3e>
 800499c:	18e1      	adds	r1, r4, r3
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	2030      	movs	r0, #48	@ 0x30
 80049a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049a6:	4422      	add	r2, r4
 80049a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049b0:	3302      	adds	r3, #2
 80049b2:	e7c7      	b.n	8004944 <_printf_common+0x58>
 80049b4:	2301      	movs	r3, #1
 80049b6:	4622      	mov	r2, r4
 80049b8:	4641      	mov	r1, r8
 80049ba:	4638      	mov	r0, r7
 80049bc:	47c8      	blx	r9
 80049be:	3001      	adds	r0, #1
 80049c0:	d0e6      	beq.n	8004990 <_printf_common+0xa4>
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7d9      	b.n	800497a <_printf_common+0x8e>
	...

080049c8 <_printf_i>:
 80049c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	7e0f      	ldrb	r7, [r1, #24]
 80049ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049d0:	2f78      	cmp	r7, #120	@ 0x78
 80049d2:	4691      	mov	r9, r2
 80049d4:	4680      	mov	r8, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	469a      	mov	sl, r3
 80049da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049de:	d807      	bhi.n	80049f0 <_printf_i+0x28>
 80049e0:	2f62      	cmp	r7, #98	@ 0x62
 80049e2:	d80a      	bhi.n	80049fa <_printf_i+0x32>
 80049e4:	2f00      	cmp	r7, #0
 80049e6:	f000 80d1 	beq.w	8004b8c <_printf_i+0x1c4>
 80049ea:	2f58      	cmp	r7, #88	@ 0x58
 80049ec:	f000 80b8 	beq.w	8004b60 <_printf_i+0x198>
 80049f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049f8:	e03a      	b.n	8004a70 <_printf_i+0xa8>
 80049fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049fe:	2b15      	cmp	r3, #21
 8004a00:	d8f6      	bhi.n	80049f0 <_printf_i+0x28>
 8004a02:	a101      	add	r1, pc, #4	@ (adr r1, 8004a08 <_printf_i+0x40>)
 8004a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a08:	08004a61 	.word	0x08004a61
 8004a0c:	08004a75 	.word	0x08004a75
 8004a10:	080049f1 	.word	0x080049f1
 8004a14:	080049f1 	.word	0x080049f1
 8004a18:	080049f1 	.word	0x080049f1
 8004a1c:	080049f1 	.word	0x080049f1
 8004a20:	08004a75 	.word	0x08004a75
 8004a24:	080049f1 	.word	0x080049f1
 8004a28:	080049f1 	.word	0x080049f1
 8004a2c:	080049f1 	.word	0x080049f1
 8004a30:	080049f1 	.word	0x080049f1
 8004a34:	08004b73 	.word	0x08004b73
 8004a38:	08004a9f 	.word	0x08004a9f
 8004a3c:	08004b2d 	.word	0x08004b2d
 8004a40:	080049f1 	.word	0x080049f1
 8004a44:	080049f1 	.word	0x080049f1
 8004a48:	08004b95 	.word	0x08004b95
 8004a4c:	080049f1 	.word	0x080049f1
 8004a50:	08004a9f 	.word	0x08004a9f
 8004a54:	080049f1 	.word	0x080049f1
 8004a58:	080049f1 	.word	0x080049f1
 8004a5c:	08004b35 	.word	0x08004b35
 8004a60:	6833      	ldr	r3, [r6, #0]
 8004a62:	1d1a      	adds	r2, r3, #4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6032      	str	r2, [r6, #0]
 8004a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a70:	2301      	movs	r3, #1
 8004a72:	e09c      	b.n	8004bae <_printf_i+0x1e6>
 8004a74:	6833      	ldr	r3, [r6, #0]
 8004a76:	6820      	ldr	r0, [r4, #0]
 8004a78:	1d19      	adds	r1, r3, #4
 8004a7a:	6031      	str	r1, [r6, #0]
 8004a7c:	0606      	lsls	r6, r0, #24
 8004a7e:	d501      	bpl.n	8004a84 <_printf_i+0xbc>
 8004a80:	681d      	ldr	r5, [r3, #0]
 8004a82:	e003      	b.n	8004a8c <_printf_i+0xc4>
 8004a84:	0645      	lsls	r5, r0, #25
 8004a86:	d5fb      	bpl.n	8004a80 <_printf_i+0xb8>
 8004a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	da03      	bge.n	8004a98 <_printf_i+0xd0>
 8004a90:	232d      	movs	r3, #45	@ 0x2d
 8004a92:	426d      	negs	r5, r5
 8004a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a98:	4858      	ldr	r0, [pc, #352]	@ (8004bfc <_printf_i+0x234>)
 8004a9a:	230a      	movs	r3, #10
 8004a9c:	e011      	b.n	8004ac2 <_printf_i+0xfa>
 8004a9e:	6821      	ldr	r1, [r4, #0]
 8004aa0:	6833      	ldr	r3, [r6, #0]
 8004aa2:	0608      	lsls	r0, r1, #24
 8004aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004aa8:	d402      	bmi.n	8004ab0 <_printf_i+0xe8>
 8004aaa:	0649      	lsls	r1, r1, #25
 8004aac:	bf48      	it	mi
 8004aae:	b2ad      	uxthmi	r5, r5
 8004ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ab2:	4852      	ldr	r0, [pc, #328]	@ (8004bfc <_printf_i+0x234>)
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	bf14      	ite	ne
 8004ab8:	230a      	movne	r3, #10
 8004aba:	2308      	moveq	r3, #8
 8004abc:	2100      	movs	r1, #0
 8004abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ac2:	6866      	ldr	r6, [r4, #4]
 8004ac4:	60a6      	str	r6, [r4, #8]
 8004ac6:	2e00      	cmp	r6, #0
 8004ac8:	db05      	blt.n	8004ad6 <_printf_i+0x10e>
 8004aca:	6821      	ldr	r1, [r4, #0]
 8004acc:	432e      	orrs	r6, r5
 8004ace:	f021 0104 	bic.w	r1, r1, #4
 8004ad2:	6021      	str	r1, [r4, #0]
 8004ad4:	d04b      	beq.n	8004b6e <_printf_i+0x1a6>
 8004ad6:	4616      	mov	r6, r2
 8004ad8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004adc:	fb03 5711 	mls	r7, r3, r1, r5
 8004ae0:	5dc7      	ldrb	r7, [r0, r7]
 8004ae2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ae6:	462f      	mov	r7, r5
 8004ae8:	42bb      	cmp	r3, r7
 8004aea:	460d      	mov	r5, r1
 8004aec:	d9f4      	bls.n	8004ad8 <_printf_i+0x110>
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d10b      	bne.n	8004b0a <_printf_i+0x142>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	07df      	lsls	r7, r3, #31
 8004af6:	d508      	bpl.n	8004b0a <_printf_i+0x142>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	6861      	ldr	r1, [r4, #4]
 8004afc:	4299      	cmp	r1, r3
 8004afe:	bfde      	ittt	le
 8004b00:	2330      	movle	r3, #48	@ 0x30
 8004b02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b06:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b0a:	1b92      	subs	r2, r2, r6
 8004b0c:	6122      	str	r2, [r4, #16]
 8004b0e:	f8cd a000 	str.w	sl, [sp]
 8004b12:	464b      	mov	r3, r9
 8004b14:	aa03      	add	r2, sp, #12
 8004b16:	4621      	mov	r1, r4
 8004b18:	4640      	mov	r0, r8
 8004b1a:	f7ff fee7 	bl	80048ec <_printf_common>
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d14a      	bne.n	8004bb8 <_printf_i+0x1f0>
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b26:	b004      	add	sp, #16
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	f043 0320 	orr.w	r3, r3, #32
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	4832      	ldr	r0, [pc, #200]	@ (8004c00 <_printf_i+0x238>)
 8004b36:	2778      	movs	r7, #120	@ 0x78
 8004b38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	6831      	ldr	r1, [r6, #0]
 8004b40:	061f      	lsls	r7, r3, #24
 8004b42:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b46:	d402      	bmi.n	8004b4e <_printf_i+0x186>
 8004b48:	065f      	lsls	r7, r3, #25
 8004b4a:	bf48      	it	mi
 8004b4c:	b2ad      	uxthmi	r5, r5
 8004b4e:	6031      	str	r1, [r6, #0]
 8004b50:	07d9      	lsls	r1, r3, #31
 8004b52:	bf44      	itt	mi
 8004b54:	f043 0320 	orrmi.w	r3, r3, #32
 8004b58:	6023      	strmi	r3, [r4, #0]
 8004b5a:	b11d      	cbz	r5, 8004b64 <_printf_i+0x19c>
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	e7ad      	b.n	8004abc <_printf_i+0xf4>
 8004b60:	4826      	ldr	r0, [pc, #152]	@ (8004bfc <_printf_i+0x234>)
 8004b62:	e7e9      	b.n	8004b38 <_printf_i+0x170>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	f023 0320 	bic.w	r3, r3, #32
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	e7f6      	b.n	8004b5c <_printf_i+0x194>
 8004b6e:	4616      	mov	r6, r2
 8004b70:	e7bd      	b.n	8004aee <_printf_i+0x126>
 8004b72:	6833      	ldr	r3, [r6, #0]
 8004b74:	6825      	ldr	r5, [r4, #0]
 8004b76:	6961      	ldr	r1, [r4, #20]
 8004b78:	1d18      	adds	r0, r3, #4
 8004b7a:	6030      	str	r0, [r6, #0]
 8004b7c:	062e      	lsls	r6, r5, #24
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	d501      	bpl.n	8004b86 <_printf_i+0x1be>
 8004b82:	6019      	str	r1, [r3, #0]
 8004b84:	e002      	b.n	8004b8c <_printf_i+0x1c4>
 8004b86:	0668      	lsls	r0, r5, #25
 8004b88:	d5fb      	bpl.n	8004b82 <_printf_i+0x1ba>
 8004b8a:	8019      	strh	r1, [r3, #0]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	4616      	mov	r6, r2
 8004b92:	e7bc      	b.n	8004b0e <_printf_i+0x146>
 8004b94:	6833      	ldr	r3, [r6, #0]
 8004b96:	1d1a      	adds	r2, r3, #4
 8004b98:	6032      	str	r2, [r6, #0]
 8004b9a:	681e      	ldr	r6, [r3, #0]
 8004b9c:	6862      	ldr	r2, [r4, #4]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f7fb fb2d 	bl	8000200 <memchr>
 8004ba6:	b108      	cbz	r0, 8004bac <_printf_i+0x1e4>
 8004ba8:	1b80      	subs	r0, r0, r6
 8004baa:	6060      	str	r0, [r4, #4]
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb6:	e7aa      	b.n	8004b0e <_printf_i+0x146>
 8004bb8:	6923      	ldr	r3, [r4, #16]
 8004bba:	4632      	mov	r2, r6
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	47d0      	blx	sl
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d0ad      	beq.n	8004b22 <_printf_i+0x15a>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	079b      	lsls	r3, r3, #30
 8004bca:	d413      	bmi.n	8004bf4 <_printf_i+0x22c>
 8004bcc:	68e0      	ldr	r0, [r4, #12]
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	4298      	cmp	r0, r3
 8004bd2:	bfb8      	it	lt
 8004bd4:	4618      	movlt	r0, r3
 8004bd6:	e7a6      	b.n	8004b26 <_printf_i+0x15e>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4632      	mov	r2, r6
 8004bdc:	4649      	mov	r1, r9
 8004bde:	4640      	mov	r0, r8
 8004be0:	47d0      	blx	sl
 8004be2:	3001      	adds	r0, #1
 8004be4:	d09d      	beq.n	8004b22 <_printf_i+0x15a>
 8004be6:	3501      	adds	r5, #1
 8004be8:	68e3      	ldr	r3, [r4, #12]
 8004bea:	9903      	ldr	r1, [sp, #12]
 8004bec:	1a5b      	subs	r3, r3, r1
 8004bee:	42ab      	cmp	r3, r5
 8004bf0:	dcf2      	bgt.n	8004bd8 <_printf_i+0x210>
 8004bf2:	e7eb      	b.n	8004bcc <_printf_i+0x204>
 8004bf4:	2500      	movs	r5, #0
 8004bf6:	f104 0619 	add.w	r6, r4, #25
 8004bfa:	e7f5      	b.n	8004be8 <_printf_i+0x220>
 8004bfc:	0800509a 	.word	0x0800509a
 8004c00:	080050ab 	.word	0x080050ab

08004c04 <__sflush_r>:
 8004c04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0c:	0716      	lsls	r6, r2, #28
 8004c0e:	4605      	mov	r5, r0
 8004c10:	460c      	mov	r4, r1
 8004c12:	d454      	bmi.n	8004cbe <__sflush_r+0xba>
 8004c14:	684b      	ldr	r3, [r1, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	dc02      	bgt.n	8004c20 <__sflush_r+0x1c>
 8004c1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	dd48      	ble.n	8004cb2 <__sflush_r+0xae>
 8004c20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c22:	2e00      	cmp	r6, #0
 8004c24:	d045      	beq.n	8004cb2 <__sflush_r+0xae>
 8004c26:	2300      	movs	r3, #0
 8004c28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c2c:	682f      	ldr	r7, [r5, #0]
 8004c2e:	6a21      	ldr	r1, [r4, #32]
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	d030      	beq.n	8004c96 <__sflush_r+0x92>
 8004c34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	0759      	lsls	r1, r3, #29
 8004c3a:	d505      	bpl.n	8004c48 <__sflush_r+0x44>
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	1ad2      	subs	r2, r2, r3
 8004c40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c42:	b10b      	cbz	r3, 8004c48 <__sflush_r+0x44>
 8004c44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c46:	1ad2      	subs	r2, r2, r3
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c4c:	6a21      	ldr	r1, [r4, #32]
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b0      	blx	r6
 8004c52:	1c43      	adds	r3, r0, #1
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	d106      	bne.n	8004c66 <__sflush_r+0x62>
 8004c58:	6829      	ldr	r1, [r5, #0]
 8004c5a:	291d      	cmp	r1, #29
 8004c5c:	d82b      	bhi.n	8004cb6 <__sflush_r+0xb2>
 8004c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004d08 <__sflush_r+0x104>)
 8004c60:	40ca      	lsrs	r2, r1
 8004c62:	07d6      	lsls	r6, r2, #31
 8004c64:	d527      	bpl.n	8004cb6 <__sflush_r+0xb2>
 8004c66:	2200      	movs	r2, #0
 8004c68:	6062      	str	r2, [r4, #4]
 8004c6a:	04d9      	lsls	r1, r3, #19
 8004c6c:	6922      	ldr	r2, [r4, #16]
 8004c6e:	6022      	str	r2, [r4, #0]
 8004c70:	d504      	bpl.n	8004c7c <__sflush_r+0x78>
 8004c72:	1c42      	adds	r2, r0, #1
 8004c74:	d101      	bne.n	8004c7a <__sflush_r+0x76>
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	b903      	cbnz	r3, 8004c7c <__sflush_r+0x78>
 8004c7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c7e:	602f      	str	r7, [r5, #0]
 8004c80:	b1b9      	cbz	r1, 8004cb2 <__sflush_r+0xae>
 8004c82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c86:	4299      	cmp	r1, r3
 8004c88:	d002      	beq.n	8004c90 <__sflush_r+0x8c>
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f7ff fbf4 	bl	8004478 <_free_r>
 8004c90:	2300      	movs	r3, #0
 8004c92:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c94:	e00d      	b.n	8004cb2 <__sflush_r+0xae>
 8004c96:	2301      	movs	r3, #1
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b0      	blx	r6
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	1c50      	adds	r0, r2, #1
 8004ca0:	d1c9      	bne.n	8004c36 <__sflush_r+0x32>
 8004ca2:	682b      	ldr	r3, [r5, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0c6      	beq.n	8004c36 <__sflush_r+0x32>
 8004ca8:	2b1d      	cmp	r3, #29
 8004caa:	d001      	beq.n	8004cb0 <__sflush_r+0xac>
 8004cac:	2b16      	cmp	r3, #22
 8004cae:	d11e      	bne.n	8004cee <__sflush_r+0xea>
 8004cb0:	602f      	str	r7, [r5, #0]
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e022      	b.n	8004cfc <__sflush_r+0xf8>
 8004cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cba:	b21b      	sxth	r3, r3
 8004cbc:	e01b      	b.n	8004cf6 <__sflush_r+0xf2>
 8004cbe:	690f      	ldr	r7, [r1, #16]
 8004cc0:	2f00      	cmp	r7, #0
 8004cc2:	d0f6      	beq.n	8004cb2 <__sflush_r+0xae>
 8004cc4:	0793      	lsls	r3, r2, #30
 8004cc6:	680e      	ldr	r6, [r1, #0]
 8004cc8:	bf08      	it	eq
 8004cca:	694b      	ldreq	r3, [r1, #20]
 8004ccc:	600f      	str	r7, [r1, #0]
 8004cce:	bf18      	it	ne
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	eba6 0807 	sub.w	r8, r6, r7
 8004cd6:	608b      	str	r3, [r1, #8]
 8004cd8:	f1b8 0f00 	cmp.w	r8, #0
 8004cdc:	dde9      	ble.n	8004cb2 <__sflush_r+0xae>
 8004cde:	6a21      	ldr	r1, [r4, #32]
 8004ce0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ce2:	4643      	mov	r3, r8
 8004ce4:	463a      	mov	r2, r7
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	47b0      	blx	r6
 8004cea:	2800      	cmp	r0, #0
 8004cec:	dc08      	bgt.n	8004d00 <__sflush_r+0xfc>
 8004cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf6:	81a3      	strh	r3, [r4, #12]
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	4407      	add	r7, r0
 8004d02:	eba8 0800 	sub.w	r8, r8, r0
 8004d06:	e7e7      	b.n	8004cd8 <__sflush_r+0xd4>
 8004d08:	20400001 	.word	0x20400001

08004d0c <_fflush_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	690b      	ldr	r3, [r1, #16]
 8004d10:	4605      	mov	r5, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	b913      	cbnz	r3, 8004d1c <_fflush_r+0x10>
 8004d16:	2500      	movs	r5, #0
 8004d18:	4628      	mov	r0, r5
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	b118      	cbz	r0, 8004d26 <_fflush_r+0x1a>
 8004d1e:	6a03      	ldr	r3, [r0, #32]
 8004d20:	b90b      	cbnz	r3, 8004d26 <_fflush_r+0x1a>
 8004d22:	f7ff f99d 	bl	8004060 <__sinit>
 8004d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f3      	beq.n	8004d16 <_fflush_r+0xa>
 8004d2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d30:	07d0      	lsls	r0, r2, #31
 8004d32:	d404      	bmi.n	8004d3e <_fflush_r+0x32>
 8004d34:	0599      	lsls	r1, r3, #22
 8004d36:	d402      	bmi.n	8004d3e <_fflush_r+0x32>
 8004d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d3a:	f7ff fb9a 	bl	8004472 <__retarget_lock_acquire_recursive>
 8004d3e:	4628      	mov	r0, r5
 8004d40:	4621      	mov	r1, r4
 8004d42:	f7ff ff5f 	bl	8004c04 <__sflush_r>
 8004d46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d48:	07da      	lsls	r2, r3, #31
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	d4e4      	bmi.n	8004d18 <_fflush_r+0xc>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	059b      	lsls	r3, r3, #22
 8004d52:	d4e1      	bmi.n	8004d18 <_fflush_r+0xc>
 8004d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d56:	f7ff fb8d 	bl	8004474 <__retarget_lock_release_recursive>
 8004d5a:	e7dd      	b.n	8004d18 <_fflush_r+0xc>

08004d5c <__swhatbuf_r>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	460c      	mov	r4, r1
 8004d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d64:	2900      	cmp	r1, #0
 8004d66:	b096      	sub	sp, #88	@ 0x58
 8004d68:	4615      	mov	r5, r2
 8004d6a:	461e      	mov	r6, r3
 8004d6c:	da0d      	bge.n	8004d8a <__swhatbuf_r+0x2e>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d74:	f04f 0100 	mov.w	r1, #0
 8004d78:	bf14      	ite	ne
 8004d7a:	2340      	movne	r3, #64	@ 0x40
 8004d7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d80:	2000      	movs	r0, #0
 8004d82:	6031      	str	r1, [r6, #0]
 8004d84:	602b      	str	r3, [r5, #0]
 8004d86:	b016      	add	sp, #88	@ 0x58
 8004d88:	bd70      	pop	{r4, r5, r6, pc}
 8004d8a:	466a      	mov	r2, sp
 8004d8c:	f000 f848 	bl	8004e20 <_fstat_r>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	dbec      	blt.n	8004d6e <__swhatbuf_r+0x12>
 8004d94:	9901      	ldr	r1, [sp, #4]
 8004d96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d9e:	4259      	negs	r1, r3
 8004da0:	4159      	adcs	r1, r3
 8004da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004da6:	e7eb      	b.n	8004d80 <__swhatbuf_r+0x24>

08004da8 <__smakebuf_r>:
 8004da8:	898b      	ldrh	r3, [r1, #12]
 8004daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dac:	079d      	lsls	r5, r3, #30
 8004dae:	4606      	mov	r6, r0
 8004db0:	460c      	mov	r4, r1
 8004db2:	d507      	bpl.n	8004dc4 <__smakebuf_r+0x1c>
 8004db4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	6163      	str	r3, [r4, #20]
 8004dc0:	b003      	add	sp, #12
 8004dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc4:	ab01      	add	r3, sp, #4
 8004dc6:	466a      	mov	r2, sp
 8004dc8:	f7ff ffc8 	bl	8004d5c <__swhatbuf_r>
 8004dcc:	9f00      	ldr	r7, [sp, #0]
 8004dce:	4605      	mov	r5, r0
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f7ff fbbc 	bl	8004550 <_malloc_r>
 8004dd8:	b948      	cbnz	r0, 8004dee <__smakebuf_r+0x46>
 8004dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dde:	059a      	lsls	r2, r3, #22
 8004de0:	d4ee      	bmi.n	8004dc0 <__smakebuf_r+0x18>
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	f043 0302 	orr.w	r3, r3, #2
 8004dea:	81a3      	strh	r3, [r4, #12]
 8004dec:	e7e2      	b.n	8004db4 <__smakebuf_r+0xc>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	6020      	str	r0, [r4, #0]
 8004df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	9b01      	ldr	r3, [sp, #4]
 8004dfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dfe:	b15b      	cbz	r3, 8004e18 <__smakebuf_r+0x70>
 8004e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e04:	4630      	mov	r0, r6
 8004e06:	f000 f81d 	bl	8004e44 <_isatty_r>
 8004e0a:	b128      	cbz	r0, 8004e18 <__smakebuf_r+0x70>
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	81a3      	strh	r3, [r4, #12]
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	431d      	orrs	r5, r3
 8004e1c:	81a5      	strh	r5, [r4, #12]
 8004e1e:	e7cf      	b.n	8004dc0 <__smakebuf_r+0x18>

08004e20 <_fstat_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d07      	ldr	r5, [pc, #28]	@ (8004e40 <_fstat_r+0x20>)
 8004e24:	2300      	movs	r3, #0
 8004e26:	4604      	mov	r4, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	602b      	str	r3, [r5, #0]
 8004e2e:	f7fb ffc6 	bl	8000dbe <_fstat>
 8004e32:	1c43      	adds	r3, r0, #1
 8004e34:	d102      	bne.n	8004e3c <_fstat_r+0x1c>
 8004e36:	682b      	ldr	r3, [r5, #0]
 8004e38:	b103      	cbz	r3, 8004e3c <_fstat_r+0x1c>
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	bd38      	pop	{r3, r4, r5, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000358 	.word	0x20000358

08004e44 <_isatty_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d06      	ldr	r5, [pc, #24]	@ (8004e60 <_isatty_r+0x1c>)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	f7fb ffc5 	bl	8000dde <_isatty>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_isatty_r+0x1a>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_isatty_r+0x1a>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20000358 	.word	0x20000358

08004e64 <_sbrk_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4d06      	ldr	r5, [pc, #24]	@ (8004e80 <_sbrk_r+0x1c>)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	602b      	str	r3, [r5, #0]
 8004e70:	f7fb ffce 	bl	8000e10 <_sbrk>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	d102      	bne.n	8004e7e <_sbrk_r+0x1a>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	b103      	cbz	r3, 8004e7e <_sbrk_r+0x1a>
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	20000358 	.word	0x20000358

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
