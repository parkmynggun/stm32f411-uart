
LRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004178  08004178  00005178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a0  080041a0  00006020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041a0  080041a0  000051a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a8  080041a8  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041ac  080041ac  000051ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080041b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000020  080041d0  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080041d0  00006184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df97  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f6  00000000  00000000  00013fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  000168e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009df  00000000  00000000  000175c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018219  00000000  00000000  00017f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b9  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098157  00000000  00000000  00040371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d84c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003380  00000000  00000000  000d850c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000db88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004160 	.word	0x08004160

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08004160 	.word	0x08004160

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000516:	4b36      	ldr	r3, [pc, #216]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000518:	4a36      	ldr	r2, [pc, #216]	@ (80005f4 <MX_ADC1_Init+0xf0>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800051c:	4b34      	ldr	r3, [pc, #208]	@ (80005f0 <MX_ADC1_Init+0xec>)
 800051e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000524:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800052a:	4b31      	ldr	r3, [pc, #196]	@ (80005f0 <MX_ADC1_Init+0xec>)
 800052c:	2201      	movs	r2, #1
 800052e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000530:	4b2f      	ldr	r3, [pc, #188]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000532:	2201      	movs	r2, #1
 8000534:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053e:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000540:	2200      	movs	r2, #0
 8000542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000544:	4b2a      	ldr	r3, [pc, #168]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000546:	4a2c      	ldr	r2, [pc, #176]	@ (80005f8 <MX_ADC1_Init+0xf4>)
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054a:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xec>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000550:	4b27      	ldr	r3, [pc, #156]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000552:	2204      	movs	r2, #4
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000556:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000558:	2201      	movs	r2, #1
 800055a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000560:	2201      	movs	r2, #1
 8000562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000564:	4822      	ldr	r0, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000566:	f001 f9af 	bl	80018c8 <HAL_ADC_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000570:	f000 fbf8 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000574:	2300      	movs	r3, #0
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800057c:	2301      	movs	r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	481a      	ldr	r0, [pc, #104]	@ (80005f0 <MX_ADC1_Init+0xec>)
 8000586:	f001 fbd3 	bl	8001d30 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000590:	f000 fbe8 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000594:	2301      	movs	r3, #1
 8000596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000598:	2302      	movs	r3, #2
 800059a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059c:	463b      	mov	r3, r7
 800059e:	4619      	mov	r1, r3
 80005a0:	4813      	ldr	r0, [pc, #76]	@ (80005f0 <MX_ADC1_Init+0xec>)
 80005a2:	f001 fbc5 	bl	8001d30 <HAL_ADC_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005ac:	f000 fbda 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80005b4:	2303      	movs	r3, #3
 80005b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <MX_ADC1_Init+0xec>)
 80005be:	f001 fbb7 	bl	8001d30 <HAL_ADC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005c8:	f000 fbcc 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005cc:	2303      	movs	r3, #3
 80005ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <MX_ADC1_Init+0xec>)
 80005da:	f001 fba9 	bl	8001d30 <HAL_ADC_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005e4:	f000 fbbe 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000003c 	.word	0x2000003c
 80005f4:	40012000 	.word	0x40012000
 80005f8:	0f000001 	.word	0x0f000001

080005fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <HAL_ADC_MspInit+0xec>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d15f      	bne.n	80006de <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	4b32      	ldr	r3, [pc, #200]	@ (80006ec <HAL_ADC_MspInit+0xf0>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000626:	4a31      	ldr	r2, [pc, #196]	@ (80006ec <HAL_ADC_MspInit+0xf0>)
 8000628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800062c:	6453      	str	r3, [r2, #68]	@ 0x44
 800062e:	4b2f      	ldr	r3, [pc, #188]	@ (80006ec <HAL_ADC_MspInit+0xf0>)
 8000630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <HAL_ADC_MspInit+0xf0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a2a      	ldr	r2, [pc, #168]	@ (80006ec <HAL_ADC_MspInit+0xf0>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <HAL_ADC_MspInit+0xf0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000656:	2333      	movs	r3, #51	@ 0x33
 8000658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065a:	2303      	movs	r3, #3
 800065c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4821      	ldr	r0, [pc, #132]	@ (80006f0 <HAL_ADC_MspInit+0xf4>)
 800066a:	f002 f995 	bl	8002998 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <HAL_ADC_MspInit+0xfc>)
 8000672:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800067a:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 8000688:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800068c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 8000690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000694:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 8000698:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800069c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 80006a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006b2:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 80006b4:	f001 fe86 	bl	80023c4 <HAL_DMA_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006be:	f000 fb51 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 80006c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <HAL_ADC_MspInit+0xf8>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2012      	movs	r0, #18
 80006d4:	f001 fe3f 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006d8:	2012      	movs	r0, #18
 80006da:	f001 fe58 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	@ 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40012000 	.word	0x40012000
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	20000084 	.word	0x20000084
 80006f8:	40026410 	.word	0x40026410

080006fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_DMA_Init+0x3c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <MX_DMA_Init+0x3c>)
 800070c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_DMA_Init+0x3c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2038      	movs	r0, #56	@ 0x38
 8000724:	f001 fe17 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000728:	2038      	movs	r0, #56	@ 0x38
 800072a:	f001 fe30 	bl	800238e <HAL_NVIC_EnableIRQ>

}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b3d      	ldr	r3, [pc, #244]	@ (800084c <MX_GPIO_Init+0x110>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a3c      	ldr	r2, [pc, #240]	@ (800084c <MX_GPIO_Init+0x110>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b3a      	ldr	r3, [pc, #232]	@ (800084c <MX_GPIO_Init+0x110>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b36      	ldr	r3, [pc, #216]	@ (800084c <MX_GPIO_Init+0x110>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a35      	ldr	r2, [pc, #212]	@ (800084c <MX_GPIO_Init+0x110>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b33      	ldr	r3, [pc, #204]	@ (800084c <MX_GPIO_Init+0x110>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b2f      	ldr	r3, [pc, #188]	@ (800084c <MX_GPIO_Init+0x110>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a2e      	ldr	r2, [pc, #184]	@ (800084c <MX_GPIO_Init+0x110>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b2c      	ldr	r3, [pc, #176]	@ (800084c <MX_GPIO_Init+0x110>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b28      	ldr	r3, [pc, #160]	@ (800084c <MX_GPIO_Init+0x110>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a27      	ldr	r2, [pc, #156]	@ (800084c <MX_GPIO_Init+0x110>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b25      	ldr	r3, [pc, #148]	@ (800084c <MX_GPIO_Init+0x110>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2103      	movs	r1, #3
 80007c6:	4822      	ldr	r0, [pc, #136]	@ (8000850 <MX_GPIO_Init+0x114>)
 80007c8:	f002 fa82 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2106      	movs	r1, #6
 80007d0:	4820      	ldr	r0, [pc, #128]	@ (8000854 <MX_GPIO_Init+0x118>)
 80007d2:	f002 fa7d 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007d6:	2303      	movs	r3, #3
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4818      	ldr	r0, [pc, #96]	@ (8000850 <MX_GPIO_Init+0x114>)
 80007ee:	f002 f8d3 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80007f2:	2306      	movs	r3, #6
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4812      	ldr	r0, [pc, #72]	@ (8000854 <MX_GPIO_Init+0x118>)
 800080a:	f002 f8c5 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800080e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000818:	2301      	movs	r3, #1
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	480b      	ldr	r0, [pc, #44]	@ (8000850 <MX_GPIO_Init+0x114>)
 8000824:	f002 f8b8 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_GPIO_Init+0x118>)
 800083e:	f002 f8ab 	bl	8002998 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	@ 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40020800 	.word	0x40020800
 8000854:	40020400 	.word	0x40020400

08000858 <IR_Init>:
#define IR_MAX_STEP 25.0f
#define DETECTION_THRESHOLD 100.0f
#define NO_OBJECT_CONFIRM_COUNT 10

void IR_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
    ir_idx=0;
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <IR_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
    ir_reading_active=0;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <IR_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
    object_detected=0;
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <IR_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
    no_object_counter=0;
 8000870:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <IR_Init+0x6c>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
    object_lost_timestamp=HAL_GetTick();
 8000876:	f000 fff7 	bl	8001868 <HAL_GetTick>
 800087a:	4603      	mov	r3, r0
 800087c:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <IR_Init+0x70>)
 800087e:	6013      	str	r3, [r2, #0]

    for(int i=0;i<IR_NUM;i++) ir_distance[i]=IR_MAX_DISTANCE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	e008      	b.n	8000898 <IR_Init+0x40>
 8000886:	4a11      	ldr	r2, [pc, #68]	@ (80008cc <IR_Init+0x74>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	4a10      	ldr	r2, [pc, #64]	@ (80008d0 <IR_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3301      	adds	r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b03      	cmp	r3, #3
 800089c:	ddf3      	ble.n	8000886 <IR_Init+0x2e>
    ir0_distance=ir1_distance=ir2_distance=ir3_distance=IR_MAX_DISTANCE;
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <IR_Init+0x78>)
 80008a0:	4a0c      	ldr	r2, [pc, #48]	@ (80008d4 <IR_Init+0x7c>)
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <IR_Init+0x80>)
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <IR_Init+0x84>)
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4a0c      	ldr	r2, [pc, #48]	@ (80008e0 <IR_Init+0x88>)
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000110 	.word	0x20000110
 80008bc:	20000111 	.word	0x20000111
 80008c0:	20000105 	.word	0x20000105
 80008c4:	20000108 	.word	0x20000108
 80008c8:	2000010c 	.word	0x2000010c
 80008cc:	200000e4 	.word	0x200000e4
 80008d0:	43160000 	.word	0x43160000
 80008d4:	20000100 	.word	0x20000100
 80008d8:	200000fc 	.word	0x200000fc
 80008dc:	200000f8 	.word	0x200000f8
 80008e0:	200000f4 	.word	0x200000f4

080008e4 <IR_StartADC>:

static void IR_StartADC(uint8_t idx)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig={0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
    sConfig.Channel=ir_channel[idx];
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <IR_StartADC+0x44>)
 8000900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000904:	60bb      	str	r3, [r7, #8]
    sConfig.Rank=1;
 8000906:	2301      	movs	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime=ADC_SAMPLETIME_15CYCLES;
 800090a:	2301      	movs	r3, #1
 800090c:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(&hadc1,&sConfig);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <IR_StartADC+0x48>)
 8000916:	f001 fa0b 	bl	8001d30 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start_IT(&hadc1);
 800091a:	4804      	ldr	r0, [pc, #16]	@ (800092c <IR_StartADC+0x48>)
 800091c:	f001 f818 	bl	8001950 <HAL_ADC_Start_IT>
}
 8000920:	bf00      	nop
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	08004178 	.word	0x08004178
 800092c:	2000003c 	.word	0x2000003c

08000930 <IR_StartReadAll>:

void IR_StartReadAll(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    if(!ir_dummy_mode && !ir_reading_active)
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <IR_StartReadAll+0x30>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10e      	bne.n	800095a <IR_StartReadAll+0x2a>
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <IR_StartReadAll+0x34>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10a      	bne.n	800095a <IR_StartReadAll+0x2a>
    {
        ir_reading_active=1;
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <IR_StartReadAll+0x34>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
        ir_idx=0;
 800094a:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <IR_StartReadAll+0x38>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
        IR_StartADC(ir_idx);
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <IR_StartReadAll+0x38>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffc5 	bl	80008e4 <IR_StartADC>
    }
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000104 	.word	0x20000104
 8000964:	20000111 	.word	0x20000111
 8000968:	20000110 	.word	0x20000110

0800096c <IR_IRQHandler>:

void IR_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
    float distance;
    if(ir_dummy_mode)
 8000972:	4b92      	ldr	r3, [pc, #584]	@ (8000bbc <IR_IRQHandler+0x250>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d007      	beq.n	800098a <IR_IRQHandler+0x1e>
    {
        distance=ir_dummy_vals[ir_idx];
 800097a:	4b91      	ldr	r3, [pc, #580]	@ (8000bc0 <IR_IRQHandler+0x254>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4a91      	ldr	r2, [pc, #580]	@ (8000bc4 <IR_IRQHandler+0x258>)
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	e093      	b.n	8000ab2 <IR_IRQHandler+0x146>
    }
    else
    {
        uint32_t adcValue=HAL_ADC_GetValue(&hadc1);
 800098a:	488f      	ldr	r0, [pc, #572]	@ (8000bc8 <IR_IRQHandler+0x25c>)
 800098c:	f001 f9ae 	bl	8001cec <HAL_ADC_GetValue>
 8000990:	6138      	str	r0, [r7, #16]
        float voltage=(adcValue/4095.0f)*3.3f;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	ee07 3a90 	vmov	s15, r3
 8000998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800099c:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8000bcc <IR_IRQHandler+0x260>
 80009a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009a4:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8000bd0 <IR_IRQHandler+0x264>
 80009a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ac:	edc7 7a03 	vstr	s15, [r7, #12]
        distance=(voltage>0.42f)?(27.86f/(voltage-0.42f)):IR_MAX_DISTANCE;
 80009b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80009b4:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8000bd4 <IR_IRQHandler+0x268>
 80009b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c0:	dd0a      	ble.n	80009d8 <IR_IRQHandler+0x6c>
 80009c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009c6:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8000bd4 <IR_IRQHandler+0x268>
 80009ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80009ce:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8000bd8 <IR_IRQHandler+0x26c>
 80009d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d6:	e001      	b.n	80009dc <IR_IRQHandler+0x70>
 80009d8:	eddf 7a80 	vldr	s15, [pc, #512]	@ 8000bdc <IR_IRQHandler+0x270>
 80009dc:	edc7 7a07 	vstr	s15, [r7, #28]

        if(distance<IR_MIN_DISTANCE) distance=IR_MIN_DISTANCE;
 80009e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80009e4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80009e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f0:	d501      	bpl.n	80009f6 <IR_IRQHandler+0x8a>
 80009f2:	4b7b      	ldr	r3, [pc, #492]	@ (8000be0 <IR_IRQHandler+0x274>)
 80009f4:	61fb      	str	r3, [r7, #28]
        if(distance>IR_MAX_DISTANCE) distance=IR_MAX_DISTANCE;
 80009f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80009fa:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8000bdc <IR_IRQHandler+0x270>
 80009fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a06:	dd01      	ble.n	8000a0c <IR_IRQHandler+0xa0>
 8000a08:	4b76      	ldr	r3, [pc, #472]	@ (8000be4 <IR_IRQHandler+0x278>)
 8000a0a:	61fb      	str	r3, [r7, #28]

        float prev=ir_distance[ir_idx];
 8000a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8000bc0 <IR_IRQHandler+0x254>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4a75      	ldr	r2, [pc, #468]	@ (8000be8 <IR_IRQHandler+0x27c>)
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60bb      	str	r3, [r7, #8]
        float diff=distance-prev;
 8000a1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a26:	edc7 7a01 	vstr	s15, [r7, #4]
        if(diff>IR_MAX_STEP) distance=prev+IR_MAX_STEP;
 8000a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a2e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3a:	dd08      	ble.n	8000a4e <IR_IRQHandler+0xe2>
 8000a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a40:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000a44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a48:	edc7 7a07 	vstr	s15, [r7, #28]
 8000a4c:	e010      	b.n	8000a70 <IR_IRQHandler+0x104>
        else if(diff<-IR_MAX_STEP) distance=prev-IR_MAX_STEP;
 8000a4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a52:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 8000a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5e:	d507      	bpl.n	8000a70 <IR_IRQHandler+0x104>
 8000a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a64:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000a68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a6c:	edc7 7a07 	vstr	s15, [r7, #28]

        distance=prev*0.5f+distance*0.5f;
 8000a70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000a78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a80:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8000a84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a8c:	edc7 7a07 	vstr	s15, [r7, #28]

        if(fabsf(distance-prev)<0.3f) distance=prev;
 8000a90:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a94:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a9c:	eef0 7ae7 	vabs.f32	s15, s15
 8000aa0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8000bec <IR_IRQHandler+0x280>
 8000aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aac:	d501      	bpl.n	8000ab2 <IR_IRQHandler+0x146>
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	61fb      	str	r3, [r7, #28]
    }

    ir_distance[ir_idx]=distance;
 8000ab2:	4b43      	ldr	r3, [pc, #268]	@ (8000bc0 <IR_IRQHandler+0x254>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8000be8 <IR_IRQHandler+0x27c>)
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	69fa      	ldr	r2, [r7, #28]
 8000abe:	601a      	str	r2, [r3, #0]
    switch(ir_idx){case 0:ir0_distance=distance;break;case 1:ir1_distance=distance;break;case 2:ir2_distance=distance;break;case 3:ir3_distance=distance;break;}
 8000ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc0 <IR_IRQHandler+0x254>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d81b      	bhi.n	8000b00 <IR_IRQHandler+0x194>
 8000ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad0 <IR_IRQHandler+0x164>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000ae1 	.word	0x08000ae1
 8000ad4:	08000ae9 	.word	0x08000ae9
 8000ad8:	08000af1 	.word	0x08000af1
 8000adc:	08000af9 	.word	0x08000af9
 8000ae0:	4a43      	ldr	r2, [pc, #268]	@ (8000bf0 <IR_IRQHandler+0x284>)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	e00b      	b.n	8000b00 <IR_IRQHandler+0x194>
 8000ae8:	4a42      	ldr	r2, [pc, #264]	@ (8000bf4 <IR_IRQHandler+0x288>)
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e007      	b.n	8000b00 <IR_IRQHandler+0x194>
 8000af0:	4a41      	ldr	r2, [pc, #260]	@ (8000bf8 <IR_IRQHandler+0x28c>)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e003      	b.n	8000b00 <IR_IRQHandler+0x194>
 8000af8:	4a40      	ldr	r2, [pc, #256]	@ (8000bfc <IR_IRQHandler+0x290>)
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	bf00      	nop

    ir_idx++;
 8000b00:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <IR_IRQHandler+0x254>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <IR_IRQHandler+0x254>)
 8000b0a:	701a      	strb	r2, [r3, #0]
    if(ir_idx>=IR_NUM)
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <IR_IRQHandler+0x254>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d946      	bls.n	8000ba2 <IR_IRQHandler+0x236>
    {
        ir_idx=0;
 8000b14:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <IR_IRQHandler+0x254>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
        ir_reading_active=0;
 8000b1a:	4b39      	ldr	r3, [pc, #228]	@ (8000c00 <IR_IRQHandler+0x294>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]

        uint8_t any_object=0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	76fb      	strb	r3, [r7, #27]
        for(int i=0;i<IR_NUM;i++) if(ir_distance[i]<DETECTION_THRESHOLD) any_object=1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e011      	b.n	8000b4e <IR_IRQHandler+0x1e2>
 8000b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000be8 <IR_IRQHandler+0x27c>)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	edd3 7a00 	vldr	s15, [r3]
 8000b36:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000c04 <IR_IRQHandler+0x298>
 8000b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b42:	d501      	bpl.n	8000b48 <IR_IRQHandler+0x1dc>
 8000b44:	2301      	movs	r3, #1
 8000b46:	76fb      	strb	r3, [r7, #27]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	ddea      	ble.n	8000b2a <IR_IRQHandler+0x1be>

        if(any_object)
 8000b54:	7efb      	ldrb	r3, [r7, #27]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00a      	beq.n	8000b70 <IR_IRQHandler+0x204>
        {
            if(!object_detected){object_detected=1; no_object_counter=0;}
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <IR_IRQHandler+0x29c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d128      	bne.n	8000bb4 <IR_IRQHandler+0x248>
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <IR_IRQHandler+0x29c>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <IR_IRQHandler+0x2a0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
                no_object_counter=0;
            }
        }
    }
    else if(!ir_dummy_mode) IR_StartADC(ir_idx);
}
 8000b6e:	e021      	b.n	8000bb4 <IR_IRQHandler+0x248>
            no_object_counter++;
 8000b70:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <IR_IRQHandler+0x2a0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a25      	ldr	r2, [pc, #148]	@ (8000c0c <IR_IRQHandler+0x2a0>)
 8000b78:	6013      	str	r3, [r2, #0]
            if(no_object_counter>=NO_OBJECT_CONFIRM_COUNT && object_detected)
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <IR_IRQHandler+0x2a0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b09      	cmp	r3, #9
 8000b80:	d918      	bls.n	8000bb4 <IR_IRQHandler+0x248>
 8000b82:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <IR_IRQHandler+0x29c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d014      	beq.n	8000bb4 <IR_IRQHandler+0x248>
                object_detected=0;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <IR_IRQHandler+0x29c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
                object_lost_timestamp=HAL_GetTick();
 8000b90:	f000 fe6a 	bl	8001868 <HAL_GetTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a1e      	ldr	r2, [pc, #120]	@ (8000c10 <IR_IRQHandler+0x2a4>)
 8000b98:	6013      	str	r3, [r2, #0]
                no_object_counter=0;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <IR_IRQHandler+0x2a0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	e008      	b.n	8000bb4 <IR_IRQHandler+0x248>
    else if(!ir_dummy_mode) IR_StartADC(ir_idx);
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <IR_IRQHandler+0x250>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d104      	bne.n	8000bb4 <IR_IRQHandler+0x248>
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <IR_IRQHandler+0x254>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fe98 	bl	80008e4 <IR_StartADC>
}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000104 	.word	0x20000104
 8000bc0:	20000110 	.word	0x20000110
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	2000003c 	.word	0x2000003c
 8000bcc:	457ff000 	.word	0x457ff000
 8000bd0:	40533333 	.word	0x40533333
 8000bd4:	3ed70a3d 	.word	0x3ed70a3d
 8000bd8:	41dee148 	.word	0x41dee148
 8000bdc:	43160000 	.word	0x43160000
 8000be0:	41200000 	.word	0x41200000
 8000be4:	43160000 	.word	0x43160000
 8000be8:	200000e4 	.word	0x200000e4
 8000bec:	3e99999a 	.word	0x3e99999a
 8000bf0:	200000f4 	.word	0x200000f4
 8000bf4:	200000f8 	.word	0x200000f8
 8000bf8:	200000fc 	.word	0x200000fc
 8000bfc:	20000100 	.word	0x20000100
 8000c00:	20000111 	.word	0x20000111
 8000c04:	42c80000 	.word	0x42c80000
 8000c08:	20000105 	.word	0x20000105
 8000c0c:	20000108 	.word	0x20000108
 8000c10:	2000010c 	.word	0x2000010c

08000c14 <HAL_ADC_ConvCpltCallback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
// main.c
// main.c
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == hadc1.Instance)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <HAL_ADC_ConvCpltCallback+0x20>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d101      	bne.n	8000c2c <HAL_ADC_ConvCpltCallback+0x18>
        IR_IRQHandler();  // ir.c 함수 호출
 8000c28:	f7ff fea0 	bl	800096c <IR_IRQHandler>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000003c 	.word	0x2000003c

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
                                                          HAL_Init();
 8000c3e:	f000 fdad 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f827 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f7ff fd79 	bl	800073c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4a:	f7ff fd57 	bl	80006fc <MX_DMA_Init>
  MX_ADC1_Init();
 8000c4e:	f7ff fc59 	bl	8000504 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c52:	f000 fc87 	bl	8001564 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  IR_Init();
 8000c56:	f7ff fdff 	bl	8000858 <IR_Init>
  Motor_Init();
 8000c5a:	f000 f8a9 	bl	8000db0 <Motor_Init>


  PID_Motor_Init();  // 변경된 초기화 함수 호출
 8000c5e:	f000 f91b 	bl	8000e98 <PID_Motor_Init>
  float ir_values[4] = {0}; // IR 거리 더미 배열
 8000c62:	463b      	mov	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  IR_StartReadAll();
 8000c6e:	f7ff fe5f 	bl	8000930 <IR_StartReadAll>



	    Turret_PID_Control(0.05f, ir_distance);
 8000c72:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <main+0x54>)
 8000c74:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000c90 <main+0x58>
 8000c78:	f000 f95a 	bl	8000f30 <Turret_PID_Control>
	    Motor_HandleInput();
 8000c7c:	f000 f8b2 	bl	8000de4 <Motor_HandleInput>

HAL_Delay(5);
 8000c80:	2005      	movs	r0, #5
 8000c82:	f000 fdfd 	bl	8001880 <HAL_Delay>
	  IR_StartReadAll();
 8000c86:	bf00      	nop
 8000c88:	e7f1      	b.n	8000c6e <main+0x36>
 8000c8a:	bf00      	nop
 8000c8c:	200000e4 	.word	0x200000e4
 8000c90:	3d4ccccd 	.word	0x3d4ccccd

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	@ 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2230      	movs	r2, #48	@ 0x30
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fa30 	bl	8004108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <SystemClock_Config+0xc8>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	4a26      	ldr	r2, [pc, #152]	@ (8000d5c <SystemClock_Config+0xc8>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc8:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <SystemClock_Config+0xc8>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <SystemClock_Config+0xcc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a20      	ldr	r2, [pc, #128]	@ (8000d60 <SystemClock_Config+0xcc>)
 8000cde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <SystemClock_Config+0xcc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d08:	2364      	movs	r3, #100	@ 0x64
 8000d0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d10:	2304      	movs	r3, #4
 8000d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fff3 	bl	8002d04 <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d24:	f000 f81e 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	230f      	movs	r3, #15
 8000d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	2103      	movs	r1, #3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f002 fa55 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d50:	f000 f808 	bl	8000d64 <Error_Handler>
  }
}
 8000d54:	bf00      	nop
 8000d56:	3750      	adds	r7, #80	@ 0x50
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40007000 	.word	0x40007000

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <readDebounce>:

// -----------------------------
// 디바운스 함수
// -----------------------------
static uint8_t readDebounce(GPIO_TypeDef* port, uint16_t pin)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
    if(HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET) // 눌렸다면
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f001 ff8d 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10c      	bne.n	8000da6 <readDebounce+0x36>
    {
        HAL_Delay(20); // 20ms 디바운싱
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f000 fd77 	bl	8001880 <HAL_Delay>
        if(HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET)
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f001 ff82 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <readDebounce+0x36>
            return 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <readDebounce+0x38>
    }
    return 0;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <Motor_Init>:

// -----------------------------
// 모터 초기화
// -----------------------------
void Motor_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PWM 시작
 8000db4:	2100      	movs	r1, #0
 8000db6:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <Motor_Init+0x28>)
 8000db8:	f002 fc58 	bl	800366c <HAL_TIM_PWM_Start>
    TIM3->CCR1 = 50;                           // 서보 중립 위치
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <Motor_Init+0x2c>)
 8000dbe:	2232      	movs	r2, #50	@ 0x32
 8000dc0:	635a      	str	r2, [r3, #52]	@ 0x34
    servo_ccr_value = TIM3->CCR1;              // 디버깅용 저장
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <Motor_Init+0x2c>)
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <Motor_Init+0x30>)
 8000dca:	801a      	strh	r2, [r3, #0]

    HAL_Delay(500);
 8000dcc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dd0:	f000 fd56 	bl	8001880 <HAL_Delay>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000138 	.word	0x20000138
 8000ddc:	40000400 	.word	0x40000400
 8000de0:	20000114 	.word	0x20000114

08000de4 <Motor_HandleInput>:

// -----------------------------
// 버튼 처리
// -----------------------------
void Motor_HandleInput(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    // 문 열림 버튼
	if(readDebounce(GPIOC, GPIO_PIN_9) && !is_door_open) // 문이 닫혀 있을 때만 열기
 8000de8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dec:	481e      	ldr	r0, [pc, #120]	@ (8000e68 <Motor_HandleInput+0x84>)
 8000dee:	f7ff ffbf 	bl	8000d70 <readDebounce>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d016      	beq.n	8000e26 <Motor_HandleInput+0x42>
 8000df8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e6c <Motor_HandleInput+0x88>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d112      	bne.n	8000e26 <Motor_HandleInput+0x42>
	{
	    TIM3->CCR1 = 25;  // 열림 위치
 8000e00:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <Motor_HandleInput+0x8c>)
 8000e02:	2219      	movs	r2, #25
 8000e04:	635a      	str	r2, [r3, #52]	@ 0x34
	    servo_ccr_value = TIM3->CCR1;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <Motor_HandleInput+0x8c>)
 8000e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <Motor_HandleInput+0x90>)
 8000e0e:	801a      	strh	r2, [r3, #0]
	    HAL_Delay(500);
 8000e10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e14:	f000 fd34 	bl	8001880 <HAL_Delay>

	    is_door_open = 1;
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <Motor_HandleInput+0x88>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
	    is_door_off  = 0;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <Motor_HandleInput+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
	    HAL_Delay(500);

	    is_door_open = 0;
	    is_door_off  = 1;
	}
}
 8000e24:	e01d      	b.n	8000e62 <Motor_HandleInput+0x7e>
	else if(readDebounce(GPIOB, GPIO_PIN_8) && is_door_open) // 문이 열려 있을 때만 닫기
 8000e26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2a:	4814      	ldr	r0, [pc, #80]	@ (8000e7c <Motor_HandleInput+0x98>)
 8000e2c:	f7ff ffa0 	bl	8000d70 <readDebounce>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d015      	beq.n	8000e62 <Motor_HandleInput+0x7e>
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <Motor_HandleInput+0x88>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d011      	beq.n	8000e62 <Motor_HandleInput+0x7e>
	    TIM3->CCR1 = 120; // 닫힘 위치
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <Motor_HandleInput+0x8c>)
 8000e40:	2278      	movs	r2, #120	@ 0x78
 8000e42:	635a      	str	r2, [r3, #52]	@ 0x34
	    servo_ccr_value = TIM3->CCR1;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <Motor_HandleInput+0x8c>)
 8000e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <Motor_HandleInput+0x90>)
 8000e4c:	801a      	strh	r2, [r3, #0]
	    HAL_Delay(500);
 8000e4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e52:	f000 fd15 	bl	8001880 <HAL_Delay>
	    is_door_open = 0;
 8000e56:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <Motor_HandleInput+0x88>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
	    is_door_off  = 1;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <Motor_HandleInput+0x94>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	20000112 	.word	0x20000112
 8000e70:	40000400 	.word	0x40000400
 8000e74:	20000114 	.word	0x20000114
 8000e78:	20000010 	.word	0x20000010
 8000e7c:	40020400 	.word	0x40020400

08000e80 <IsDoorOpen>:



uint8_t IsDoorOpen(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
	   return is_door_open;
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <IsDoorOpen+0x14>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000112 	.word	0x20000112

08000e98 <PID_Motor_Init>:
#define MOTOR_PWM_MIN     0

// -----------------------------
// 초기화
void PID_Motor_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(MOTOR_LR_PWM_TIMER, MOTOR_LR_PWM_CHANNEL);
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	481c      	ldr	r0, [pc, #112]	@ (8000f10 <PID_Motor_Init+0x78>)
 8000ea0:	f002 fbe4 	bl	800366c <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(MOTOR_LR_PWM_TIMER, MOTOR_LR_PWM_CHANNEL, MOTOR_PWM_NEUTRAL);
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <PID_Motor_Init+0x78>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38

    HAL_TIM_PWM_Start(MOTOR_UD_PWM_TIMER, MOTOR_UD_PWM_CHANNEL);
 8000eac:	2108      	movs	r1, #8
 8000eae:	4818      	ldr	r0, [pc, #96]	@ (8000f10 <PID_Motor_Init+0x78>)
 8000eb0:	f002 fbdc 	bl	800366c <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(MOTOR_UD_PWM_TIMER, MOTOR_UD_PWM_CHANNEL, MOTOR_PWM_NEUTRAL);
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <PID_Motor_Init+0x78>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	63da      	str	r2, [r3, #60]	@ 0x3c

    pid_integral_lr = 0;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <PID_Motor_Init+0x7c>)
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
    pid_prev_error_lr = 0;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <PID_Motor_Init+0x80>)
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
    pid_integral_ud = 0;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <PID_Motor_Init+0x84>)
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
    pid_prev_error_ud = 0;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <PID_Motor_Init+0x88>)
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]

    search_mode = 1;  // 시작시 탐색모드
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <PID_Motor_Init+0x8c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4810      	ldr	r0, [pc, #64]	@ (8000f28 <PID_Motor_Init+0x90>)
 8000ee8:	f001 fef2 	bl	8002cd0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2102      	movs	r1, #2
 8000ef0:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <PID_Motor_Init+0x90>)
 8000ef2:	f001 feed 	bl	8002cd0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2102      	movs	r1, #2
 8000efa:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <PID_Motor_Init+0x94>)
 8000efc:	f001 fee8 	bl	8002cd0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2104      	movs	r1, #4
 8000f04:	4809      	ldr	r0, [pc, #36]	@ (8000f2c <PID_Motor_Init+0x94>)
 8000f06:	f001 fee3 	bl	8002cd0 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000138 	.word	0x20000138
 8000f14:	20000118 	.word	0x20000118
 8000f18:	2000011c 	.word	0x2000011c
 8000f1c:	20000120 	.word	0x20000120
 8000f20:	20000124 	.word	0x20000124
 8000f24:	20000011 	.word	0x20000011
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020400 	.word	0x40020400

08000f30 <Turret_PID_Control>:

// -----------------------------
// Turret PID 제어 + DC 모터 제어
void Turret_PID_Control(float dt, float ir_distances[])
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b098      	sub	sp, #96	@ 0x60
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f3a:	6038      	str	r0, [r7, #0]
    // 문 상태 확인 (기존과 동일)
    uint8_t door_open = IsDoorOpen();
 8000f3c:	f7ff ffa0 	bl	8000e80 <IsDoorOpen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if(!door_open)
 8000f46:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d12f      	bne.n	8000fae <Turret_PID_Control+0x7e>
    {
        // 문 닫힘: 모터 멈춤 + PID 적분 리셋
        __HAL_TIM_SET_COMPARE(MOTOR_LR_PWM_TIMER, MOTOR_LR_PWM_CHANNEL, MOTOR_PWM_NEUTRAL);
 8000f4e:	4baf      	ldr	r3, [pc, #700]	@ (800120c <Turret_PID_Control+0x2dc>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_TIM_SET_COMPARE(MOTOR_UD_PWM_TIMER, MOTOR_UD_PWM_CHANNEL, MOTOR_PWM_NEUTRAL);
 8000f56:	4bad      	ldr	r3, [pc, #692]	@ (800120c <Turret_PID_Control+0x2dc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2101      	movs	r1, #1
 8000f62:	48ab      	ldr	r0, [pc, #684]	@ (8001210 <Turret_PID_Control+0x2e0>)
 8000f64:	f001 feb4 	bl	8002cd0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	48a8      	ldr	r0, [pc, #672]	@ (8001210 <Turret_PID_Control+0x2e0>)
 8000f6e:	f001 feaf 	bl	8002cd0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2102      	movs	r1, #2
 8000f76:	48a7      	ldr	r0, [pc, #668]	@ (8001214 <Turret_PID_Control+0x2e4>)
 8000f78:	f001 feaa 	bl	8002cd0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2104      	movs	r1, #4
 8000f80:	48a4      	ldr	r0, [pc, #656]	@ (8001214 <Turret_PID_Control+0x2e4>)
 8000f82:	f001 fea5 	bl	8002cd0 <HAL_GPIO_WritePin>

        // PID 상태 리셋
        pid_integral_lr = 0;
 8000f86:	4ba4      	ldr	r3, [pc, #656]	@ (8001218 <Turret_PID_Control+0x2e8>)
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
        pid_prev_error_lr = 0;
 8000f8e:	4ba3      	ldr	r3, [pc, #652]	@ (800121c <Turret_PID_Control+0x2ec>)
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
        pid_integral_ud = 0;
 8000f96:	4ba2      	ldr	r3, [pc, #648]	@ (8001220 <Turret_PID_Control+0x2f0>)
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
        pid_prev_error_ud = 0;
 8000f9e:	4ba1      	ldr	r3, [pc, #644]	@ (8001224 <Turret_PID_Control+0x2f4>)
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
        search_mode = 1;  // 탐색모드로 리셋
 8000fa6:	4ba0      	ldr	r3, [pc, #640]	@ (8001228 <Turret_PID_Control+0x2f8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
        return;
 8000fac:	e23b      	b.n	8001426 <Turret_PID_Control+0x4f6>
    }

    float left  = ir_distances[0];
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float right = ir_distances[1];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
    float up    = ir_distances[2];
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	647b      	str	r3, [r7, #68]	@ 0x44
    float down  = ir_distances[3];
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	643b      	str	r3, [r7, #64]	@ 0x40

    // 플래그 기반 물체 탐지 (기존과 동일)
    const float OBJECT_THRESHOLD = 100.0f;
 8000fc6:	4b99      	ldr	r3, [pc, #612]	@ (800122c <Turret_PID_Control+0x2fc>)
 8000fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if(left < OBJECT_THRESHOLD || right < OBJECT_THRESHOLD ||
 8000fca:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000fce:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d41a      	bmi.n	8001012 <Turret_PID_Control+0xe2>
 8000fdc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000fe0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000fe4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	d411      	bmi.n	8001012 <Turret_PID_Control+0xe2>
 8000fee:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000ff2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffe:	d408      	bmi.n	8001012 <Turret_PID_Control+0xe2>
       up < OBJECT_THRESHOLD || down < OBJECT_THRESHOLD) {
 8001000:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001004:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	d517      	bpl.n	8001042 <Turret_PID_Control+0x112>
        if(search_mode == 1) { // 탐색 -> 추적 전환 시 PID 상태 초기화
 8001012:	4b85      	ldr	r3, [pc, #532]	@ (8001228 <Turret_PID_Control+0x2f8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10f      	bne.n	800103a <Turret_PID_Control+0x10a>
            pid_integral_lr = 0;
 800101a:	4b7f      	ldr	r3, [pc, #508]	@ (8001218 <Turret_PID_Control+0x2e8>)
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
            pid_prev_error_lr = 0;
 8001022:	4b7e      	ldr	r3, [pc, #504]	@ (800121c <Turret_PID_Control+0x2ec>)
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
            pid_integral_ud = 0;
 800102a:	4b7d      	ldr	r3, [pc, #500]	@ (8001220 <Turret_PID_Control+0x2f0>)
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
            pid_prev_error_ud = 0;
 8001032:	4b7c      	ldr	r3, [pc, #496]	@ (8001224 <Turret_PID_Control+0x2f4>)
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
        }
        search_mode = 0;
 800103a:	4b7b      	ldr	r3, [pc, #492]	@ (8001228 <Turret_PID_Control+0x2f8>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e002      	b.n	8001048 <Turret_PID_Control+0x118>
    } else {
        search_mode = 1;
 8001042:	4b79      	ldr	r3, [pc, #484]	@ (8001228 <Turret_PID_Control+0x2f8>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
    }

    // ★★★ 탐색모드: 시계방향 계속 회전 ★★★ (기존과 동일)
    if(search_mode == 1) {
 8001048:	4b77      	ldr	r3, [pc, #476]	@ (8001228 <Turret_PID_Control+0x2f8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d12d      	bne.n	80010ac <Turret_PID_Control+0x17c>
        // ... (기존 탐색모드 코드와 동일)
        __HAL_TIM_SET_COMPARE(MOTOR_LR_PWM_TIMER, MOTOR_LR_PWM_CHANNEL, 300);
 8001050:	4b6e      	ldr	r3, [pc, #440]	@ (800120c <Turret_PID_Control+0x2dc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001058:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2101      	movs	r1, #1
 800105e:	486c      	ldr	r0, [pc, #432]	@ (8001210 <Turret_PID_Control+0x2e0>)
 8001060:	f001 fe36 	bl	8002cd0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2102      	movs	r1, #2
 8001068:	4869      	ldr	r0, [pc, #420]	@ (8001210 <Turret_PID_Control+0x2e0>)
 800106a:	f001 fe31 	bl	8002cd0 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(MOTOR_UD_PWM_TIMER, MOTOR_UD_PWM_CHANNEL, 0);
 800106e:	4b67      	ldr	r3, [pc, #412]	@ (800120c <Turret_PID_Control+0x2dc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2102      	movs	r1, #2
 800107a:	4866      	ldr	r0, [pc, #408]	@ (8001214 <Turret_PID_Control+0x2e4>)
 800107c:	f001 fe28 	bl	8002cd0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2104      	movs	r1, #4
 8001084:	4863      	ldr	r0, [pc, #396]	@ (8001214 <Turret_PID_Control+0x2e4>)
 8001086:	f001 fe23 	bl	8002cd0 <HAL_GPIO_WritePin>
        pid_integral_lr = 0;
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <Turret_PID_Control+0x2e8>)
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
        pid_prev_error_lr = 0;
 8001092:	4b62      	ldr	r3, [pc, #392]	@ (800121c <Turret_PID_Control+0x2ec>)
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
        pid_integral_ud = 0;
 800109a:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <Turret_PID_Control+0x2f0>)
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
        pid_prev_error_ud = 0;
 80010a2:	4b60      	ldr	r3, [pc, #384]	@ (8001224 <Turret_PID_Control+0x2f4>)
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
        return;
 80010aa:	e1bc      	b.n	8001426 <Turret_PID_Control+0x4f6>
    }

    // ★★★ 추적모드: 수정된 PID 제어 ★★★
    // PID 상수 (이 값들은 환경에 맞게 다시 튜닝해야 합니다!)
    const float Kp_lr =14.8f, Ki_lr = 1.6f, Kd_lr = 3.6f;
 80010ac:	4b60      	ldr	r3, [pc, #384]	@ (8001230 <Turret_PID_Control+0x300>)
 80010ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80010b0:	4b60      	ldr	r3, [pc, #384]	@ (8001234 <Turret_PID_Control+0x304>)
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80010b4:	4b60      	ldr	r3, [pc, #384]	@ (8001238 <Turret_PID_Control+0x308>)
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
    const float Kp_ud = 14.8f, Ki_ud = 1.6f, Kd_ud = 3.6f;
 80010b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001230 <Turret_PID_Control+0x300>)
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001234 <Turret_PID_Control+0x304>)
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010c0:	4b5d      	ldr	r3, [pc, #372]	@ (8001238 <Turret_PID_Control+0x308>)
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    const float ERROR_THRESHOLD = 3.0f; // 이 오차 범위 안에서는 움직이지 않음
 80010c4:	4b5d      	ldr	r3, [pc, #372]	@ (800123c <Turret_PID_Control+0x30c>)
 80010c6:	623b      	str	r3, [r7, #32]
    const float INTEGRAL_MAX = 500.0f;  // PWM MAX 값과 비슷하게 설정하는 것이 좋음
 80010c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001240 <Turret_PID_Control+0x310>)
 80010ca:	61fb      	str	r3, [r7, #28]
    // ==========================================================
    // 1. 좌우 PID 계산
    // ==========================================================

    // [수정 1] 오차 계산 방향을 바로잡았습니다. (left - right)
    float error_lr = left - right;
 80010cc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80010d0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // [수정 2] 데드존 로직을 개선했습니다.
    // 오차가 작을 땐 추가적인 제어량 계산을 하지 않도록 합니다.
    if (fabsf(error_lr) < ERROR_THRESHOLD) {
 80010dc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80010e0:	eef0 7ae7 	vabs.f32	s15, s15
 80010e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80010e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	dd02      	ble.n	80010f8 <Turret_PID_Control+0x1c8>
        error_lr = 0;
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    // 적분항 계산 (error_lr이 0이면 더 이상 누적되지 않음)
    pid_integral_lr += error_lr * dt;
 80010f8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80010fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001104:	4b44      	ldr	r3, [pc, #272]	@ (8001218 <Turret_PID_Control+0x2e8>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110e:	4b42      	ldr	r3, [pc, #264]	@ (8001218 <Turret_PID_Control+0x2e8>)
 8001110:	edc3 7a00 	vstr	s15, [r3]
    // 적분값이 과도하게 커지는 것을 방지 (Anti-windup)
    if (pid_integral_lr > INTEGRAL_MAX) pid_integral_lr = INTEGRAL_MAX;
 8001114:	4b40      	ldr	r3, [pc, #256]	@ (8001218 <Turret_PID_Control+0x2e8>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	ed97 7a07 	vldr	s14, [r7, #28]
 800111e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	d503      	bpl.n	8001130 <Turret_PID_Control+0x200>
 8001128:	4a3b      	ldr	r2, [pc, #236]	@ (8001218 <Turret_PID_Control+0x2e8>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e012      	b.n	8001156 <Turret_PID_Control+0x226>
    else if (pid_integral_lr < -INTEGRAL_MAX) pid_integral_lr = -INTEGRAL_MAX;
 8001130:	edd7 7a07 	vldr	s15, [r7, #28]
 8001134:	eeb1 7a67 	vneg.f32	s14, s15
 8001138:	4b37      	ldr	r3, [pc, #220]	@ (8001218 <Turret_PID_Control+0x2e8>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	dd06      	ble.n	8001156 <Turret_PID_Control+0x226>
 8001148:	edd7 7a07 	vldr	s15, [r7, #28]
 800114c:	eef1 7a67 	vneg.f32	s15, s15
 8001150:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <Turret_PID_Control+0x2e8>)
 8001152:	edc3 7a00 	vstr	s15, [r3]

    // 미분항 계산
    float derivative_lr = (error_lr - pid_prev_error_lr) / dt;
 8001156:	4b31      	ldr	r3, [pc, #196]	@ (800121c <Turret_PID_Control+0x2ec>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001160:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001164:	ed97 7a01 	vldr	s14, [r7, #4]
 8001168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800116c:	edc7 7a06 	vstr	s15, [r7, #24]
    pid_prev_error_lr = error_lr;
 8001170:	4a2a      	ldr	r2, [pc, #168]	@ (800121c <Turret_PID_Control+0x2ec>)
 8001172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001174:	6013      	str	r3, [r2, #0]

    // 최종 PID 출력 계산
    float output_lr = (Kp_lr * error_lr) + (Ki_lr * pid_integral_lr) + (Kd_lr * derivative_lr);
 8001176:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800117a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800117e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001182:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <Turret_PID_Control+0x2e8>)
 8001184:	edd3 6a00 	vldr	s13, [r3]
 8001188:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800118c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001194:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001198:	edd7 7a06 	vldr	s15, [r7, #24]
 800119c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a4:	edc7 7a05 	vstr	s15, [r7, #20]
    // ==========================================================
    // 2. 상하 PID 계산 (좌우와 동일한 로직)
    // ==========================================================

    // [수정 1] 오차 계산 방향을 바로잡았습니다. (up - down)
    float error_ud = up - down;
 80011a8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80011ac:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80011b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b4:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // [수정 2] 데드존 로직 개선
    if (fabsf(error_ud) < ERROR_THRESHOLD) {
 80011b8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80011bc:	eef0 7ae7 	vabs.f32	s15, s15
 80011c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80011c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	dd02      	ble.n	80011d4 <Turret_PID_Control+0x2a4>
        error_ud = 0;
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    pid_integral_ud += error_ud * dt;
 80011d4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80011d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <Turret_PID_Control+0x2f0>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <Turret_PID_Control+0x2f0>)
 80011ec:	edc3 7a00 	vstr	s15, [r3]
    if (pid_integral_ud > INTEGRAL_MAX) pid_integral_ud = INTEGRAL_MAX;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <Turret_PID_Control+0x2f0>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	d51f      	bpl.n	8001244 <Turret_PID_Control+0x314>
 8001204:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <Turret_PID_Control+0x2f0>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e02e      	b.n	800126a <Turret_PID_Control+0x33a>
 800120c:	20000138 	.word	0x20000138
 8001210:	40020800 	.word	0x40020800
 8001214:	40020400 	.word	0x40020400
 8001218:	20000118 	.word	0x20000118
 800121c:	2000011c 	.word	0x2000011c
 8001220:	20000120 	.word	0x20000120
 8001224:	20000124 	.word	0x20000124
 8001228:	20000011 	.word	0x20000011
 800122c:	42c80000 	.word	0x42c80000
 8001230:	416ccccd 	.word	0x416ccccd
 8001234:	3fcccccd 	.word	0x3fcccccd
 8001238:	40666666 	.word	0x40666666
 800123c:	40400000 	.word	0x40400000
 8001240:	43fa0000 	.word	0x43fa0000
    else if (pid_integral_ud < -INTEGRAL_MAX) pid_integral_ud = -INTEGRAL_MAX;
 8001244:	edd7 7a07 	vldr	s15, [r7, #28]
 8001248:	eeb1 7a67 	vneg.f32	s14, s15
 800124c:	4b77      	ldr	r3, [pc, #476]	@ (800142c <Turret_PID_Control+0x4fc>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	dd06      	ble.n	800126a <Turret_PID_Control+0x33a>
 800125c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001260:	eef1 7a67 	vneg.f32	s15, s15
 8001264:	4b71      	ldr	r3, [pc, #452]	@ (800142c <Turret_PID_Control+0x4fc>)
 8001266:	edc3 7a00 	vstr	s15, [r3]

    float derivative_ud = (error_ud - pid_prev_error_ud) / dt;
 800126a:	4b71      	ldr	r3, [pc, #452]	@ (8001430 <Turret_PID_Control+0x500>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001274:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001278:	ed97 7a01 	vldr	s14, [r7, #4]
 800127c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001280:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_prev_error_ud = error_ud;
 8001284:	4a6a      	ldr	r2, [pc, #424]	@ (8001430 <Turret_PID_Control+0x500>)
 8001286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001288:	6013      	str	r3, [r2, #0]

    float output_ud = (Kp_ud * error_ud) + (Ki_ud * pid_integral_ud) + (Kd_ud * derivative_ud);
 800128a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800128e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001296:	4b65      	ldr	r3, [pc, #404]	@ (800142c <Turret_PID_Control+0x4fc>)
 8001298:	edd3 6a00 	vldr	s13, [r3]
 800129c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80012ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b8:	edc7 7a03 	vstr	s15, [r7, #12]

    // 디버깅용 변수 업데이트
    pid_output_debug = output_lr;
 80012bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001434 <Turret_PID_Control+0x504>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	6013      	str	r3, [r2, #0]
    pid_p_debug_lr = Kp_lr * error_lr;
 80012c2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80012c6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80012ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001438 <Turret_PID_Control+0x508>)
 80012d0:	edc3 7a00 	vstr	s15, [r3]
    pid_i_debug_lr = Ki_lr * pid_integral_lr;
 80012d4:	4b59      	ldr	r3, [pc, #356]	@ (800143c <Turret_PID_Control+0x50c>)
 80012d6:	ed93 7a00 	vldr	s14, [r3]
 80012da:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80012de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e2:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <Turret_PID_Control+0x510>)
 80012e4:	edc3 7a00 	vstr	s15, [r3]
    pid_d_debug_lr = Kd_lr * derivative_lr;
 80012e8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80012ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	4b53      	ldr	r3, [pc, #332]	@ (8001444 <Turret_PID_Control+0x514>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
    // ==========================================================
    // 3. 모터 출력 처리
    // ==========================================================

    // PID 출력을 정수형 PWM 값으로 변환
    int16_t pwm_lr = (int16_t)output_lr;
 80012fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 3a90 	vmov	r3, s15
 8001306:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    int16_t pwm_ud = (int16_t)output_ud;
 800130a:	edd7 7a03 	vldr	s15, [r7, #12]
 800130e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001312:	ee17 3a90 	vmov	r3, s15
 8001316:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

    // PWM 값 최대/최소 제한
    if (pwm_lr > MOTOR_PWM_MAX) pwm_lr = MOTOR_PWM_MAX;
 800131a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 800131e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001322:	db03      	blt.n	800132c <Turret_PID_Control+0x3fc>
 8001324:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001328:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    if (pwm_lr < -MOTOR_PWM_MAX) pwm_lr = -MOTOR_PWM_MAX;
 800132c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8001330:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001334:	dc03      	bgt.n	800133e <Turret_PID_Control+0x40e>
 8001336:	f64f 4319 	movw	r3, #64537	@ 0xfc19
 800133a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    if (pwm_ud > MOTOR_PWM_MAX) pwm_ud = MOTOR_PWM_MAX;
 800133e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8001342:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001346:	db03      	blt.n	8001350 <Turret_PID_Control+0x420>
 8001348:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800134c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    if (pwm_ud < -MOTOR_PWM_MAX) pwm_ud = -MOTOR_PWM_MAX;
 8001350:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8001354:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001358:	dc03      	bgt.n	8001362 <Turret_PID_Control+0x432>
 800135a:	f64f 4319 	movw	r3, #64537	@ 0xfc19
 800135e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

    // [수정 3] 불안정한 움직임을 유발하던 최소 PWM 강제 로직을 제거했습니다.
    // 만약 모터가 작은 PWM 값에서 돌지 못한다면, Kp 값을 조금 더 높여 튜닝하세요.

    // PWM 적용
    __HAL_TIM_SET_COMPARE(MOTOR_LR_PWM_TIMER, MOTOR_LR_PWM_CHANNEL, abs(pwm_lr));
 8001362:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8001366:	2b00      	cmp	r3, #0
 8001368:	bfb8      	it	lt
 800136a:	425b      	neglt	r3, r3
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b36      	ldr	r3, [pc, #216]	@ (8001448 <Turret_PID_Control+0x518>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(MOTOR_UD_PWM_TIMER, MOTOR_UD_PWM_CHANNEL, abs(pwm_ud));
 8001374:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8001378:	2b00      	cmp	r3, #0
 800137a:	bfb8      	it	lt
 800137c:	425b      	neglt	r3, r3
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <Turret_PID_Control+0x518>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	63da      	str	r2, [r3, #60]	@ 0x3c

    // 모터 방향 설정 (기존과 동일)
    if(pwm_lr > 0) { // 오른쪽으로 회전
 8001386:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 800138a:	2b00      	cmp	r3, #0
 800138c:	dd0a      	ble.n	80013a4 <Turret_PID_Control+0x474>
          // 아래 두 줄의 SET/RESET을 서로 바꿈
          HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2101      	movs	r1, #1
 8001392:	482e      	ldr	r0, [pc, #184]	@ (800144c <Turret_PID_Control+0x51c>)
 8001394:	f001 fc9c 	bl	8002cd0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_SET);
 8001398:	2201      	movs	r2, #1
 800139a:	2102      	movs	r1, #2
 800139c:	482b      	ldr	r0, [pc, #172]	@ (800144c <Turret_PID_Control+0x51c>)
 800139e:	f001 fc97 	bl	8002cd0 <HAL_GPIO_WritePin>
 80013a2:	e018      	b.n	80013d6 <Turret_PID_Control+0x4a6>
      } else if(pwm_lr < 0) { // 왼쪽으로 회전
 80013a4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	da0a      	bge.n	80013c2 <Turret_PID_Control+0x492>
          // 아래 두 줄의 SET/RESET을 서로 바꿈
          HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2101      	movs	r1, #1
 80013b0:	4826      	ldr	r0, [pc, #152]	@ (800144c <Turret_PID_Control+0x51c>)
 80013b2:	f001 fc8d 	bl	8002cd0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2102      	movs	r1, #2
 80013ba:	4824      	ldr	r0, [pc, #144]	@ (800144c <Turret_PID_Control+0x51c>)
 80013bc:	f001 fc88 	bl	8002cd0 <HAL_GPIO_WritePin>
 80013c0:	e009      	b.n	80013d6 <Turret_PID_Control+0x4a6>
      } else { // 정지
          HAL_GPIO_WritePin(MOTOR_LR_IN1_PORT, MOTOR_LR_IN1_PIN, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	4821      	ldr	r0, [pc, #132]	@ (800144c <Turret_PID_Control+0x51c>)
 80013c8:	f001 fc82 	bl	8002cd0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(MOTOR_LR_IN2_PORT, MOTOR_LR_IN2_PIN, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2102      	movs	r1, #2
 80013d0:	481e      	ldr	r0, [pc, #120]	@ (800144c <Turret_PID_Control+0x51c>)
 80013d2:	f001 fc7d 	bl	8002cd0 <HAL_GPIO_WritePin>
      }

      if(pwm_ud > 0) { // 위로 이동
 80013d6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dd0a      	ble.n	80013f4 <Turret_PID_Control+0x4c4>
          // 아래 두 줄의 SET/RESET을 서로 바꿈
          HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2102      	movs	r1, #2
 80013e2:	481b      	ldr	r0, [pc, #108]	@ (8001450 <Turret_PID_Control+0x520>)
 80013e4:	f001 fc74 	bl	8002cd0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2104      	movs	r1, #4
 80013ec:	4818      	ldr	r0, [pc, #96]	@ (8001450 <Turret_PID_Control+0x520>)
 80013ee:	f001 fc6f 	bl	8002cd0 <HAL_GPIO_WritePin>
 80013f2:	e018      	b.n	8001426 <Turret_PID_Control+0x4f6>
      } else if(pwm_ud < 0) { // 아래로 이동
 80013f4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da0a      	bge.n	8001412 <Turret_PID_Control+0x4e2>
          // 아래 두 줄의 SET/RESET을 서로 바꿈
          HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2102      	movs	r1, #2
 8001400:	4813      	ldr	r0, [pc, #76]	@ (8001450 <Turret_PID_Control+0x520>)
 8001402:	f001 fc65 	bl	8002cd0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2104      	movs	r1, #4
 800140a:	4811      	ldr	r0, [pc, #68]	@ (8001450 <Turret_PID_Control+0x520>)
 800140c:	f001 fc60 	bl	8002cd0 <HAL_GPIO_WritePin>
 8001410:	e009      	b.n	8001426 <Turret_PID_Control+0x4f6>
      } else { // 정지
          HAL_GPIO_WritePin(MOTOR_UD_IN1_PORT, MOTOR_UD_IN1_PIN, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2102      	movs	r1, #2
 8001416:	480e      	ldr	r0, [pc, #56]	@ (8001450 <Turret_PID_Control+0x520>)
 8001418:	f001 fc5a 	bl	8002cd0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(MOTOR_UD_IN2_PORT, MOTOR_UD_IN2_PIN, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2104      	movs	r1, #4
 8001420:	480b      	ldr	r0, [pc, #44]	@ (8001450 <Turret_PID_Control+0x520>)
 8001422:	f001 fc55 	bl	8002cd0 <HAL_GPIO_WritePin>
      }
}
 8001426:	3760      	adds	r7, #96	@ 0x60
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000120 	.word	0x20000120
 8001430:	20000124 	.word	0x20000124
 8001434:	20000128 	.word	0x20000128
 8001438:	2000012c 	.word	0x2000012c
 800143c:	20000118 	.word	0x20000118
 8001440:	20000130 	.word	0x20000130
 8001444:	20000134 	.word	0x20000134
 8001448:	20000138 	.word	0x20000138
 800144c:	40020800 	.word	0x40020800
 8001450:	40020400 	.word	0x40020400

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	4a0f      	ldr	r2, [pc, #60]	@ (80014a0 <HAL_MspInit+0x4c>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001468:	6453      	str	r3, [r2, #68]	@ 0x44
 800146a:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_MspInit+0x4c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	@ 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 f9a1 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <ADC_IRQHandler+0x10>)
 800150a:	f000 fadf 	bl	8001acc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000003c 	.word	0x2000003c

08001518 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <TIM3_IRQHandler+0x10>)
 800151e:	f002 f955 	bl	80037cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000138 	.word	0x20000138

0800152c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <DMA2_Stream0_IRQHandler+0x10>)
 8001532:	f000 fff5 	bl	8002520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000084 	.word	0x20000084

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	@ (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <MX_TIM3_Init+0xd8>)
 8001588:	4a2d      	ldr	r2, [pc, #180]	@ (8001640 <MX_TIM3_Init+0xdc>)
 800158a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999-1;
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <MX_TIM3_Init+0xd8>)
 800158e:	f240 72ce 	movw	r2, #1998	@ 0x7ce
 8001592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b29      	ldr	r3, [pc, #164]	@ (800163c <MX_TIM3_Init+0xd8>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800159a:	4b28      	ldr	r3, [pc, #160]	@ (800163c <MX_TIM3_Init+0xd8>)
 800159c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b26      	ldr	r3, [pc, #152]	@ (800163c <MX_TIM3_Init+0xd8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b24      	ldr	r3, [pc, #144]	@ (800163c <MX_TIM3_Init+0xd8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015ae:	4823      	ldr	r0, [pc, #140]	@ (800163c <MX_TIM3_Init+0xd8>)
 80015b0:	f002 f80c 	bl	80035cc <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80015ba:	f7ff fbd3 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	4619      	mov	r1, r3
 80015cc:	481b      	ldr	r0, [pc, #108]	@ (800163c <MX_TIM3_Init+0xd8>)
 80015ce:	f002 fd19 	bl	8004004 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80015d8:	f7ff fbc4 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	@ 0x60
 80015de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4812      	ldr	r0, [pc, #72]	@ (800163c <MX_TIM3_Init+0xd8>)
 80015f4:	f002 f9da 	bl	80039ac <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80015fe:	f7ff fbb1 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2204      	movs	r2, #4
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <MX_TIM3_Init+0xd8>)
 800160a:	f002 f9cf 	bl	80039ac <HAL_TIM_PWM_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001614:	f7ff fba6 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2208      	movs	r2, #8
 800161c:	4619      	mov	r1, r3
 800161e:	4807      	ldr	r0, [pc, #28]	@ (800163c <MX_TIM3_Init+0xd8>)
 8001620:	f002 f9c4 	bl	80039ac <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800162a:	f7ff fb9b 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800162e:	4803      	ldr	r0, [pc, #12]	@ (800163c <MX_TIM3_Init+0xd8>)
 8001630:	f000 f830 	bl	8001694 <HAL_TIM_MspPostInit>

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	@ 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000138 	.word	0x20000138
 8001640:	40000400 	.word	0x40000400

08001644 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <HAL_TIM_PWM_MspInit+0x48>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d115      	bne.n	8001682 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <HAL_TIM_PWM_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a0c      	ldr	r2, [pc, #48]	@ (8001690 <HAL_TIM_PWM_MspInit+0x4c>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_TIM_PWM_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	201d      	movs	r0, #29
 8001678:	f000 fe6d 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800167c:	201d      	movs	r0, #29
 800167e:	f000 fe86 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40000400 	.word	0x40000400
 8001690:	40023800 	.word	0x40023800

08001694 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a21      	ldr	r2, [pc, #132]	@ (8001738 <HAL_TIM_MspPostInit+0xa4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d13b      	bne.n	800172e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_TIM_MspPostInit+0xa8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a1f      	ldr	r2, [pc, #124]	@ (800173c <HAL_TIM_MspPostInit+0xa8>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <HAL_TIM_MspPostInit+0xa8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_TIM_MspPostInit+0xa8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a18      	ldr	r2, [pc, #96]	@ (800173c <HAL_TIM_MspPostInit+0xa8>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <HAL_TIM_MspPostInit+0xa8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ee:	23c0      	movs	r3, #192	@ 0xc0
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016fe:	2302      	movs	r3, #2
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	480d      	ldr	r0, [pc, #52]	@ (8001740 <HAL_TIM_MspPostInit+0xac>)
 800170a:	f001 f945 	bl	8002998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800170e:	2301      	movs	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800171e:	2302      	movs	r3, #2
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4806      	ldr	r0, [pc, #24]	@ (8001744 <HAL_TIM_MspPostInit+0xb0>)
 800172a:	f001 f935 	bl	8002998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	@ 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40000400 	.word	0x40000400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000
 8001744:	40020400 	.word	0x40020400

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001780 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174c:	f7ff fef8 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	@ (8001794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001776:	f002 fccf 	bl	8004118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fa5d 	bl	8000c38 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800178c:	080041b0 	.word	0x080041b0
  ldr r2, =_sbss
 8001790:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001794:	20000184 	.word	0x20000184

08001798 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <DMA1_Stream0_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 fdbb 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe40 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fdd3 	bl	80023aa <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800181c:	f000 fd9b 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	@ (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000014 	.word	0x20000014
 8001838:	2000001c 	.word	0x2000001c
 800183c:	20000018 	.word	0x20000018

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	2000001c 	.word	0x2000001c
 8001864:	20000180 	.word	0x20000180

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000180 	.word	0x20000180

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000001c 	.word	0x2000001c

080018c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e033      	b.n	8001946 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7fe fe88 	bl	80005fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	d118      	bne.n	8001938 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800190e:	f023 0302 	bic.w	r3, r3, #2
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fb3a 	bl	8001f94 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40
 8001936:	e001      	b.n	800193c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_ADC_Start_IT+0x1a>
 8001966:	2302      	movs	r3, #2
 8001968:	e0a1      	b.n	8001aae <HAL_ADC_Start_IT+0x15e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d018      	beq.n	80019b2 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001990:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <HAL_ADC_Start_IT+0x16c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a4a      	ldr	r2, [pc, #296]	@ (8001ac0 <HAL_ADC_Start_IT+0x170>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0c9a      	lsrs	r2, r3, #18
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019a4:	e002      	b.n	80019ac <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f9      	bne.n	80019a6 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d169      	bne.n	8001a94 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019fe:	d106      	bne.n	8001a0e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a04:	f023 0206 	bic.w	r2, r3, #6
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <HAL_ADC_Start_IT+0x174>)
 8001a1e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a28:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d129      	bne.n	8001aac <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	e020      	b.n	8001aac <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <HAL_ADC_Start_IT+0x178>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d11b      	bne.n	8001aac <HAL_ADC_Start_IT+0x15c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d114      	bne.n	8001aac <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	e00b      	b.n	8001aac <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f043 0210 	orr.w	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000014 	.word	0x20000014
 8001ac0:	431bde83 	.word	0x431bde83
 8001ac4:	40012300 	.word	0x40012300
 8001ac8:	40012000 	.word	0x40012000

08001acc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d049      	beq.n	8001b96 <HAL_ADC_IRQHandler+0xca>
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d046      	beq.n	8001b96 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d12b      	bne.n	8001b86 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d127      	bne.n	8001b86 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d119      	bne.n	8001b86 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0220 	bic.w	r2, r2, #32
 8001b60:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff f844 	bl	8000c14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0212 	mvn.w	r2, #18
 8001b94:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d057      	beq.n	8001c5c <HAL_ADC_IRQHandler+0x190>
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d054      	beq.n	8001c5c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d139      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bde:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d12b      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d124      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d11d      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d119      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c26:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fa9d 	bl	800218c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 020c 	mvn.w	r2, #12
 8001c5a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d017      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x1d6>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d014      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10d      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f837 	bl	8001d06 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0201 	mvn.w	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cb0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x218>
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d012      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f043 0202 	orr.w	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0220 	mvn.w	r2, #32
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f820 	bl	8001d1a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0220 	mvn.w	r2, #32
 8001ce2:	601a      	str	r2, [r3, #0]
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1c>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e113      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x244>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	d925      	bls.n	8001da8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68d9      	ldr	r1, [r3, #12]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b1e      	subs	r3, #30
 8001d72:	2207      	movs	r2, #7
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	400a      	ands	r2, r1
 8001d80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68d9      	ldr	r1, [r3, #12]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	4603      	mov	r3, r0
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4403      	add	r3, r0
 8001d9a:	3b1e      	subs	r3, #30
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	e022      	b.n	8001dee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	400a      	ands	r2, r1
 8001dca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4403      	add	r3, r0
 8001de4:	409a      	lsls	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d824      	bhi.n	8001e40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	3b05      	subs	r3, #5
 8001e08:	221f      	movs	r2, #31
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	400a      	ands	r2, r1
 8001e16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b05      	subs	r3, #5
 8001e32:	fa00 f203 	lsl.w	r2, r0, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e3e:	e04c      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b0c      	cmp	r3, #12
 8001e46:	d824      	bhi.n	8001e92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b23      	subs	r3, #35	@ 0x23
 8001e5a:	221f      	movs	r2, #31
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43da      	mvns	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	3b23      	subs	r3, #35	@ 0x23
 8001e84:	fa00 f203 	lsl.w	r2, r0, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e90:	e023      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b41      	subs	r3, #65	@ 0x41
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b41      	subs	r3, #65	@ 0x41
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eda:	4b29      	ldr	r3, [pc, #164]	@ (8001f80 <HAL_ADC_ConfigChannel+0x250>)
 8001edc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a28      	ldr	r2, [pc, #160]	@ (8001f84 <HAL_ADC_ConfigChannel+0x254>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10f      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1d8>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b12      	cmp	r3, #18
 8001eee:	d10b      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <HAL_ADC_ConfigChannel+0x254>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12b      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x23a>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_ADC_ConfigChannel+0x258>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <HAL_ADC_ConfigChannel+0x1f4>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d122      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a11      	ldr	r2, [pc, #68]	@ (8001f88 <HAL_ADC_ConfigChannel+0x258>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d111      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_ADC_ConfigChannel+0x25c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a11      	ldr	r2, [pc, #68]	@ (8001f90 <HAL_ADC_ConfigChannel+0x260>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	0c9a      	lsrs	r2, r3, #18
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40012300 	.word	0x40012300
 8001f84:	40012000 	.word	0x40012000
 8001f88:	10000012 	.word	0x10000012
 8001f8c:	20000014 	.word	0x20000014
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9c:	4b79      	ldr	r3, [pc, #484]	@ (8002184 <ADC_Init+0x1f0>)
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	021a      	lsls	r2, r3, #8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800200e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6899      	ldr	r1, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	4a58      	ldr	r2, [pc, #352]	@ (8002188 <ADC_Init+0x1f4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800203a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800205c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6899      	ldr	r1, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	e00f      	b.n	8002092 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0202 	bic.w	r2, r2, #2
 80020a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6899      	ldr	r1, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7e1b      	ldrb	r3, [r3, #24]
 80020ac:	005a      	lsls	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01b      	beq.n	80020f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	3b01      	subs	r3, #1
 80020ec:	035a      	lsls	r2, r3, #13
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	e007      	b.n	8002108 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002106:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002116:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	3b01      	subs	r3, #1
 8002124:	051a      	lsls	r2, r3, #20
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800213c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800214a:	025a      	lsls	r2, r3, #9
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	029a      	lsls	r2, r3, #10
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40012300 	.word	0x40012300
 8002188:	0f000001 	.word	0x0f000001

0800218c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	@ (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	@ (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	@ (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff fa4a 	bl	8001868 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e099      	b.n	8002514 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002400:	e00f      	b.n	8002422 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002402:	f7ff fa31 	bl	8001868 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b05      	cmp	r3, #5
 800240e:	d908      	bls.n	8002422 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2203      	movs	r2, #3
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e078      	b.n	8002514 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e8      	bne.n	8002402 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4b38      	ldr	r3, [pc, #224]	@ (800251c <HAL_DMA_Init+0x158>)
 800243c:	4013      	ands	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	2b04      	cmp	r3, #4
 800247a:	d107      	bne.n	800248c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	4313      	orrs	r3, r2
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f023 0307 	bic.w	r3, r3, #7
 80024a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d117      	bne.n	80024e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00e      	beq.n	80024e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f9e9 	bl	80028a0 <DMA_CheckFifoParam>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2240      	movs	r2, #64	@ 0x40
 80024d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024e2:	2301      	movs	r3, #1
 80024e4:	e016      	b.n	8002514 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f9a0 	bl	8002834 <DMA_CalcBaseAndBitshift>
 80024f4:	4603      	mov	r3, r0
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	223f      	movs	r2, #63	@ 0x3f
 80024fe:	409a      	lsls	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	f010803f 	.word	0xf010803f

08002520 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800252c:	4b8e      	ldr	r3, [pc, #568]	@ (8002768 <HAL_DMA_IRQHandler+0x248>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a8e      	ldr	r2, [pc, #568]	@ (800276c <HAL_DMA_IRQHandler+0x24c>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0a9b      	lsrs	r3, r3, #10
 8002538:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	2208      	movs	r2, #8
 800254c:	409a      	lsls	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01a      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0204 	bic.w	r2, r2, #4
 8002572:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002578:	2208      	movs	r2, #8
 800257a:	409a      	lsls	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	2201      	movs	r2, #1
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ae:	2201      	movs	r2, #1
 80025b0:	409a      	lsls	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ba:	f043 0202 	orr.w	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	2204      	movs	r2, #4
 80025c8:	409a      	lsls	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d012      	beq.n	80025f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e4:	2204      	movs	r2, #4
 80025e6:	409a      	lsls	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	f043 0204 	orr.w	r2, r3, #4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	2210      	movs	r2, #16
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d043      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d03c      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261a:	2210      	movs	r2, #16
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d018      	beq.n	8002662 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d024      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
 800264e:	e01f      	b.n	8002690 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
 8002660:	e016      	b.n	8002690 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0208 	bic.w	r2, r2, #8
 800267e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2220      	movs	r2, #32
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 808f 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8087 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	2220      	movs	r2, #32
 80026b8:	409a      	lsls	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d136      	bne.n	8002738 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0216 	bic.w	r2, r2, #22
 80026d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <HAL_DMA_IRQHandler+0x1da>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0208 	bic.w	r2, r2, #8
 8002708:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	223f      	movs	r2, #63	@ 0x3f
 8002710:	409a      	lsls	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272a:	2b00      	cmp	r3, #0
 800272c:	d07e      	beq.n	800282c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
        }
        return;
 8002736:	e079      	b.n	800282c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01d      	beq.n	8002782 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002758:	2b00      	cmp	r3, #0
 800275a:	d031      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e02c      	b.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
 8002766:	bf00      	nop
 8002768:	20000014 	.word	0x20000014
 800276c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
 8002780:	e01e      	b.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10f      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0210 	bic.w	r2, r2, #16
 800279e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d032      	beq.n	800282e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d022      	beq.n	800281a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2205      	movs	r2, #5
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d307      	bcc.n	8002808 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f2      	bne.n	80027ec <HAL_DMA_IRQHandler+0x2cc>
 8002806:	e000      	b.n	800280a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002808:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
 800282a:	e000      	b.n	800282e <HAL_DMA_IRQHandler+0x30e>
        return;
 800282c:	bf00      	nop
    }
  }
}
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	3b10      	subs	r3, #16
 8002844:	4a14      	ldr	r2, [pc, #80]	@ (8002898 <DMA_CalcBaseAndBitshift+0x64>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800284e:	4a13      	ldr	r2, [pc, #76]	@ (800289c <DMA_CalcBaseAndBitshift+0x68>)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d909      	bls.n	8002876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	1d1a      	adds	r2, r3, #4
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	659a      	str	r2, [r3, #88]	@ 0x58
 8002874:	e007      	b.n	8002886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800287e:	f023 0303 	bic.w	r3, r3, #3
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	aaaaaaab 	.word	0xaaaaaaab
 800289c:	08004198 	.word	0x08004198

080028a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d11f      	bne.n	80028fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d856      	bhi.n	800296e <DMA_CheckFifoParam+0xce>
 80028c0:	a201      	add	r2, pc, #4	@ (adr r2, 80028c8 <DMA_CheckFifoParam+0x28>)
 80028c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c6:	bf00      	nop
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	080028eb 	.word	0x080028eb
 80028d0:	080028d9 	.word	0x080028d9
 80028d4:	0800296f 	.word	0x0800296f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d046      	beq.n	8002972 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e8:	e043      	b.n	8002972 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028f2:	d140      	bne.n	8002976 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f8:	e03d      	b.n	8002976 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002902:	d121      	bne.n	8002948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d837      	bhi.n	800297a <DMA_CheckFifoParam+0xda>
 800290a:	a201      	add	r2, pc, #4	@ (adr r2, 8002910 <DMA_CheckFifoParam+0x70>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002921 	.word	0x08002921
 8002914:	08002927 	.word	0x08002927
 8002918:	08002921 	.word	0x08002921
 800291c:	08002939 	.word	0x08002939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e030      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d025      	beq.n	800297e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002936:	e022      	b.n	800297e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002940:	d11f      	bne.n	8002982 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002946:	e01c      	b.n	8002982 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d903      	bls.n	8002956 <DMA_CheckFifoParam+0xb6>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d003      	beq.n	800295c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002954:	e018      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
      break;
 800295a:	e015      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      break;
 800296c:	e00b      	b.n	8002986 <DMA_CheckFifoParam+0xe6>
      break;
 800296e:	bf00      	nop
 8002970:	e00a      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e008      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 8002976:	bf00      	nop
 8002978:	e006      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
 800297c:	e004      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
 8002980:	e002      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;   
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 8002986:	bf00      	nop
    }
  } 
  
  return status; 
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	@ 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	e159      	b.n	8002c68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b4:	2201      	movs	r2, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	f040 8148 	bne.w	8002c62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d005      	beq.n	80029ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d130      	bne.n	8002a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 0201 	and.w	r2, r3, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d017      	beq.n	8002a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d123      	bne.n	8002adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	69b9      	ldr	r1, [r7, #24]
 8002ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0203 	and.w	r2, r3, #3
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80a2 	beq.w	8002c62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b57      	ldr	r3, [pc, #348]	@ (8002c80 <HAL_GPIO_Init+0x2e8>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	4a56      	ldr	r2, [pc, #344]	@ (8002c80 <HAL_GPIO_Init+0x2e8>)
 8002b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2e:	4b54      	ldr	r3, [pc, #336]	@ (8002c80 <HAL_GPIO_Init+0x2e8>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3a:	4a52      	ldr	r2, [pc, #328]	@ (8002c84 <HAL_GPIO_Init+0x2ec>)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	220f      	movs	r2, #15
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a49      	ldr	r2, [pc, #292]	@ (8002c88 <HAL_GPIO_Init+0x2f0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d019      	beq.n	8002b9a <HAL_GPIO_Init+0x202>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a48      	ldr	r2, [pc, #288]	@ (8002c8c <HAL_GPIO_Init+0x2f4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0x1fe>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a47      	ldr	r2, [pc, #284]	@ (8002c90 <HAL_GPIO_Init+0x2f8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00d      	beq.n	8002b92 <HAL_GPIO_Init+0x1fa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a46      	ldr	r2, [pc, #280]	@ (8002c94 <HAL_GPIO_Init+0x2fc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x1f6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a45      	ldr	r2, [pc, #276]	@ (8002c98 <HAL_GPIO_Init+0x300>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_GPIO_Init+0x1f2>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e008      	b.n	8002b9c <HAL_GPIO_Init+0x204>
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x204>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e004      	b.n	8002b9c <HAL_GPIO_Init+0x204>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_Init+0x204>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_GPIO_Init+0x204>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4093      	lsls	r3, r2
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bac:	4935      	ldr	r1, [pc, #212]	@ (8002c84 <HAL_GPIO_Init+0x2ec>)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bba:	4b38      	ldr	r3, [pc, #224]	@ (8002c9c <HAL_GPIO_Init+0x304>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bde:	4a2f      	ldr	r2, [pc, #188]	@ (8002c9c <HAL_GPIO_Init+0x304>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <HAL_GPIO_Init+0x304>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c08:	4a24      	ldr	r2, [pc, #144]	@ (8002c9c <HAL_GPIO_Init+0x304>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0e:	4b23      	ldr	r3, [pc, #140]	@ (8002c9c <HAL_GPIO_Init+0x304>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c32:	4a1a      	ldr	r2, [pc, #104]	@ (8002c9c <HAL_GPIO_Init+0x304>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c38:	4b18      	ldr	r3, [pc, #96]	@ (8002c9c <HAL_GPIO_Init+0x304>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c9c <HAL_GPIO_Init+0x304>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3301      	adds	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	f67f aea2 	bls.w	80029b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3724      	adds	r7, #36	@ 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	e001      	b.n	8002cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cec:	e003      	b.n	8002cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cee:	887b      	ldrh	r3, [r7, #2]
 8002cf0:	041a      	lsls	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e267      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d075      	beq.n	8002e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d22:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d00c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2e:	4b85      	ldr	r3, [pc, #532]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d112      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b82      	ldr	r3, [pc, #520]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	4b7e      	ldr	r3, [pc, #504]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d05b      	beq.n	8002e0c <HAL_RCC_OscConfig+0x108>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d157      	bne.n	8002e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e242      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d68:	d106      	bne.n	8002d78 <HAL_RCC_OscConfig+0x74>
 8002d6a:	4b76      	ldr	r3, [pc, #472]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a75      	ldr	r2, [pc, #468]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x98>
 8002d82:	4b70      	ldr	r3, [pc, #448]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6f      	ldr	r2, [pc, #444]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6c      	ldr	r2, [pc, #432]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d9c:	4b69      	ldr	r3, [pc, #420]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a68      	ldr	r2, [pc, #416]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b66      	ldr	r3, [pc, #408]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a65      	ldr	r2, [pc, #404]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fd54 	bl	8001868 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fd50 	bl	8001868 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	@ 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e207      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xc0>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe fd40 	bl	8001868 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe fd3c 	bl	8001868 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	@ 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1f3      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	4b51      	ldr	r3, [pc, #324]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0xe8>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d063      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e26:	4b47      	ldr	r3, [pc, #284]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e32:	4b44      	ldr	r3, [pc, #272]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d116      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	4b41      	ldr	r3, [pc, #260]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1c7      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b3b      	ldr	r3, [pc, #236]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4937      	ldr	r1, [pc, #220]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	e03a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e74:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fcf5 	bl	8001868 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e82:	f7fe fcf1 	bl	8001868 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e1a8      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b28      	ldr	r3, [pc, #160]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4925      	ldr	r1, [pc, #148]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb6:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fcd4 	bl	8001868 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe fcd0 	bl	8001868 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e187      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d036      	beq.n	8002f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe fcb4 	bl	8001868 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe fcb0 	bl	8001868 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e167      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x200>
 8002f22:	e01b      	b.n	8002f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fc9d 	bl	8001868 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	e00e      	b.n	8002f50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f32:	f7fe fc99 	bl	8001868 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d907      	bls.n	8002f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e150      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	42470000 	.word	0x42470000
 8002f4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	4b88      	ldr	r3, [pc, #544]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ea      	bne.n	8002f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8097 	beq.w	8003098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6e:	4b81      	ldr	r3, [pc, #516]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10f      	bne.n	8002f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	4a7c      	ldr	r2, [pc, #496]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f96:	2301      	movs	r3, #1
 8002f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	4b77      	ldr	r3, [pc, #476]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa6:	4b74      	ldr	r3, [pc, #464]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a73      	ldr	r2, [pc, #460]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe fc59 	bl	8001868 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fba:	f7fe fc55 	bl	8001868 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e10c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x2ea>
 8002fe0:	4b64      	ldr	r3, [pc, #400]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe4:	4a63      	ldr	r2, [pc, #396]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fec:	e01c      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b05      	cmp	r3, #5
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x30c>
 8002ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6713      	str	r3, [r2, #112]	@ 0x70
 8003002:	4b5c      	ldr	r3, [pc, #368]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	4a5b      	ldr	r2, [pc, #364]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	@ 0x70
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8003010:	4b58      	ldr	r3, [pc, #352]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003014:	4a57      	ldr	r2, [pc, #348]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	@ 0x70
 800301c:	4b55      	ldr	r3, [pc, #340]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003020:	4a54      	ldr	r2, [pc, #336]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 0304 	bic.w	r3, r3, #4
 8003026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fe fc1a 	bl	8001868 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe fc16 	bl	8001868 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0cb      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	4b49      	ldr	r3, [pc, #292]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0ee      	beq.n	8003038 <HAL_RCC_OscConfig+0x334>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7fe fc04 	bl	8001868 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe fc00 	bl	8001868 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0b5      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ee      	bne.n	8003064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308c:	4b39      	ldr	r3, [pc, #228]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	4a38      	ldr	r2, [pc, #224]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003096:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a1 	beq.w	80031e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a2:	4b34      	ldr	r3, [pc, #208]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d05c      	beq.n	8003168 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d141      	bne.n	800313a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b31      	ldr	r3, [pc, #196]	@ (800317c <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fbd4 	bl	8001868 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fbd0 	bl	8001868 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e087      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b27      	ldr	r3, [pc, #156]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	491b      	ldr	r1, [pc, #108]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_RCC_OscConfig+0x478>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe fba9 	bl	8001868 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe fba5 	bl	8001868 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e05c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312c:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x416>
 8003138:	e054      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_RCC_OscConfig+0x478>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fb92 	bl	8001868 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fb8e 	bl	8001868 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e045      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x444>
 8003166:	e03d      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e038      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8003174:	40023800 	.word	0x40023800
 8003178:	40007000 	.word	0x40007000
 800317c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003180:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <HAL_RCC_OscConfig+0x4ec>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d028      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d121      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d11a      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800

080031f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0cc      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b68      	ldr	r3, [pc, #416]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d90c      	bls.n	8003230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b65      	ldr	r3, [pc, #404]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a58      	ldr	r2, [pc, #352]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003252:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800326a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d044      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d119      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b3f      	ldr	r3, [pc, #252]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3b      	ldr	r3, [pc, #236]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e067      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b37      	ldr	r3, [pc, #220]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4934      	ldr	r1, [pc, #208]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7fe fac0 	bl	8001868 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fe fabc 	bl	8001868 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e04f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2b      	ldr	r3, [pc, #172]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d20c      	bcs.n	800333c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b22      	ldr	r3, [pc, #136]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003366:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490a      	ldr	r1, [pc, #40]	@ (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	@ (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe fa20 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023c00 	.word	0x40023c00
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08004188 	.word	0x08004188
 80033b8:	20000014 	.word	0x20000014
 80033bc:	20000018 	.word	0x20000018

080033c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c4:	b094      	sub	sp, #80	@ 0x50
 80033c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d8:	4b79      	ldr	r3, [pc, #484]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d00d      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	f200 80e1 	bhi.w	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x3a>
 80033f2:	e0db      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b73      	ldr	r3, [pc, #460]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f8:	e0db      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fa:	4b73      	ldr	r3, [pc, #460]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033fe:	e0d8      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003400:	4b6f      	ldr	r3, [pc, #444]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003408:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340a:	4b6d      	ldr	r3, [pc, #436]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b6a      	ldr	r3, [pc, #424]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	2200      	movs	r2, #0
 800341e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003420:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003428:	633b      	str	r3, [r7, #48]	@ 0x30
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
 800342e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	0159      	lsls	r1, r3, #5
 8003440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003444:	0150      	lsls	r0, r2, #5
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4621      	mov	r1, r4
 800344c:	1a51      	subs	r1, r2, r1
 800344e:	6139      	str	r1, [r7, #16]
 8003450:	4629      	mov	r1, r5
 8003452:	eb63 0301 	sbc.w	r3, r3, r1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003464:	4659      	mov	r1, fp
 8003466:	018b      	lsls	r3, r1, #6
 8003468:	4651      	mov	r1, sl
 800346a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346e:	4651      	mov	r1, sl
 8003470:	018a      	lsls	r2, r1, #6
 8003472:	4651      	mov	r1, sl
 8003474:	ebb2 0801 	subs.w	r8, r2, r1
 8003478:	4659      	mov	r1, fp
 800347a:	eb63 0901 	sbc.w	r9, r3, r1
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003492:	4690      	mov	r8, r2
 8003494:	4699      	mov	r9, r3
 8003496:	4623      	mov	r3, r4
 8003498:	eb18 0303 	adds.w	r3, r8, r3
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	462b      	mov	r3, r5
 80034a0:	eb49 0303 	adc.w	r3, r9, r3
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b2:	4629      	mov	r1, r5
 80034b4:	024b      	lsls	r3, r1, #9
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034bc:	4621      	mov	r1, r4
 80034be:	024a      	lsls	r2, r1, #9
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c6:	2200      	movs	r2, #0
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034d0:	f7fc fe82 	bl	80001d8 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034dc:	e058      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b38      	ldr	r3, [pc, #224]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	2200      	movs	r2, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	4611      	mov	r1, r2
 80034ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	0159      	lsls	r1, r3, #5
 8003506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350a:	0150      	lsls	r0, r2, #5
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4641      	mov	r1, r8
 8003512:	ebb2 0a01 	subs.w	sl, r2, r1
 8003516:	4649      	mov	r1, r9
 8003518:	eb63 0b01 	sbc.w	fp, r3, r1
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800352c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003530:	ebb2 040a 	subs.w	r4, r2, sl
 8003534:	eb63 050b 	sbc.w	r5, r3, fp
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	00eb      	lsls	r3, r5, #3
 8003542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003546:	00e2      	lsls	r2, r4, #3
 8003548:	4614      	mov	r4, r2
 800354a:	461d      	mov	r5, r3
 800354c:	4643      	mov	r3, r8
 800354e:	18e3      	adds	r3, r4, r3
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	464b      	mov	r3, r9
 8003554:	eb45 0303 	adc.w	r3, r5, r3
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003566:	4629      	mov	r1, r5
 8003568:	028b      	lsls	r3, r1, #10
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003570:	4621      	mov	r1, r4
 8003572:	028a      	lsls	r2, r1, #10
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	61fa      	str	r2, [r7, #28]
 8003580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003584:	f7fc fe28 	bl	80001d8 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3750      	adds	r7, #80	@ 0x50
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	007a1200 	.word	0x007a1200

080035cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e041      	b.n	8003662 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe f826 	bl	8001644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	4619      	mov	r1, r3
 800360a:	4610      	mov	r0, r2
 800360c:	f000 fac2 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_TIM_PWM_Start+0x24>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e022      	b.n	80036d6 <HAL_TIM_PWM_Start+0x6a>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b04      	cmp	r3, #4
 8003694:	d109      	bne.n	80036aa <HAL_TIM_PWM_Start+0x3e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e015      	b.n	80036d6 <HAL_TIM_PWM_Start+0x6a>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d109      	bne.n	80036c4 <HAL_TIM_PWM_Start+0x58>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	bf14      	ite	ne
 80036bc:	2301      	movne	r3, #1
 80036be:	2300      	moveq	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e008      	b.n	80036d6 <HAL_TIM_PWM_Start+0x6a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e068      	b.n	80037b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0x82>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036ec:	e013      	b.n	8003716 <HAL_TIM_PWM_Start+0xaa>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0x92>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036fc:	e00b      	b.n	8003716 <HAL_TIM_PWM_Start+0xaa>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d104      	bne.n	800370e <HAL_TIM_PWM_Start+0xa2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800370c:	e003      	b.n	8003716 <HAL_TIM_PWM_Start+0xaa>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fc4a 	bl	8003fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a23      	ldr	r2, [pc, #140]	@ (80037b8 <HAL_TIM_PWM_Start+0x14c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d107      	bne.n	800373e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1d      	ldr	r2, [pc, #116]	@ (80037b8 <HAL_TIM_PWM_Start+0x14c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d018      	beq.n	800377a <HAL_TIM_PWM_Start+0x10e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003750:	d013      	beq.n	800377a <HAL_TIM_PWM_Start+0x10e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a19      	ldr	r2, [pc, #100]	@ (80037bc <HAL_TIM_PWM_Start+0x150>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00e      	beq.n	800377a <HAL_TIM_PWM_Start+0x10e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <HAL_TIM_PWM_Start+0x154>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d009      	beq.n	800377a <HAL_TIM_PWM_Start+0x10e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a16      	ldr	r2, [pc, #88]	@ (80037c4 <HAL_TIM_PWM_Start+0x158>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d004      	beq.n	800377a <HAL_TIM_PWM_Start+0x10e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a14      	ldr	r2, [pc, #80]	@ (80037c8 <HAL_TIM_PWM_Start+0x15c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d111      	bne.n	800379e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b06      	cmp	r3, #6
 800378a:	d010      	beq.n	80037ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	e007      	b.n	80037ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40014000 	.word	0x40014000

080037cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d020      	beq.n	8003830 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0202 	mvn.w	r2, #2
 8003800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f99e 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f990 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f9a1 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d020      	beq.n	800387c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0204 	mvn.w	r2, #4
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f978 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f96a 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f97b 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d020      	beq.n	80038c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01b      	beq.n	80038c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0208 	mvn.w	r2, #8
 8003898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2204      	movs	r2, #4
 800389e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f952 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f944 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f955 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d020      	beq.n	8003914 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01b      	beq.n	8003914 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0210 	mvn.w	r2, #16
 80038e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2208      	movs	r2, #8
 80038ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f92c 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 8003900:	e005      	b.n	800390e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f91e 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f92f 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0201 	mvn.w	r2, #1
 8003930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8fc 	bl	8003b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fbcc 	bl	80040f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f900 	bl	8003b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0220 	mvn.w	r2, #32
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fb9e 	bl	80040e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e0ae      	b.n	8003b28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	f200 809f 	bhi.w	8003b18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039da:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003b19 	.word	0x08003b19
 80039e8:	08003b19 	.word	0x08003b19
 80039ec:	08003b19 	.word	0x08003b19
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003b19 	.word	0x08003b19
 80039f8:	08003b19 	.word	0x08003b19
 80039fc:	08003b19 	.word	0x08003b19
 8003a00:	08003a97 	.word	0x08003a97
 8003a04:	08003b19 	.word	0x08003b19
 8003a08:	08003b19 	.word	0x08003b19
 8003a0c:	08003b19 	.word	0x08003b19
 8003a10:	08003ad7 	.word	0x08003ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f940 	bl	8003ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0208 	orr.w	r2, r2, #8
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
      break;
 8003a52:	e064      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f986 	bl	8003d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	619a      	str	r2, [r3, #24]
      break;
 8003a94:	e043      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f9d1 	bl	8003e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0208 	orr.w	r2, r2, #8
 8003ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	61da      	str	r2, [r3, #28]
      break;
 8003ad4:	e023      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fa1b 	bl	8003f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	61da      	str	r2, [r3, #28]
      break;
 8003b16:	e002      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a37      	ldr	r2, [pc, #220]	@ (8003c84 <TIM_Base_SetConfig+0xf0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00f      	beq.n	8003bcc <TIM_Base_SetConfig+0x38>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb2:	d00b      	beq.n	8003bcc <TIM_Base_SetConfig+0x38>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a34      	ldr	r2, [pc, #208]	@ (8003c88 <TIM_Base_SetConfig+0xf4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_Base_SetConfig+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a33      	ldr	r2, [pc, #204]	@ (8003c8c <TIM_Base_SetConfig+0xf8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0x38>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a32      	ldr	r2, [pc, #200]	@ (8003c90 <TIM_Base_SetConfig+0xfc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d108      	bne.n	8003bde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a28      	ldr	r2, [pc, #160]	@ (8003c84 <TIM_Base_SetConfig+0xf0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01b      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d017      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	@ (8003c88 <TIM_Base_SetConfig+0xf4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a24      	ldr	r2, [pc, #144]	@ (8003c8c <TIM_Base_SetConfig+0xf8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00f      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a23      	ldr	r2, [pc, #140]	@ (8003c90 <TIM_Base_SetConfig+0xfc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a22      	ldr	r2, [pc, #136]	@ (8003c94 <TIM_Base_SetConfig+0x100>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a21      	ldr	r2, [pc, #132]	@ (8003c98 <TIM_Base_SetConfig+0x104>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a20      	ldr	r2, [pc, #128]	@ (8003c9c <TIM_Base_SetConfig+0x108>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a0c      	ldr	r2, [pc, #48]	@ (8003c84 <TIM_Base_SetConfig+0xf0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d103      	bne.n	8003c5e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f043 0204 	orr.w	r2, r3, #4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	601a      	str	r2, [r3, #0]
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f023 0201 	bic.w	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f023 0302 	bic.w	r3, r3, #2
 8003ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d68 <TIM_OC1_SetConfig+0xc8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10c      	bne.n	8003d16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0308 	bic.w	r3, r3, #8
 8003d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a13      	ldr	r2, [pc, #76]	@ (8003d68 <TIM_OC1_SetConfig+0xc8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d111      	bne.n	8003d42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	621a      	str	r2, [r3, #32]
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40010000 	.word	0x40010000

08003d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f023 0210 	bic.w	r2, r3, #16
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0320 	bic.w	r3, r3, #32
 8003db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e40 <TIM_OC2_SetConfig+0xd4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10d      	bne.n	8003de8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003de6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a15      	ldr	r2, [pc, #84]	@ (8003e40 <TIM_OC2_SetConfig+0xd4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d113      	bne.n	8003e18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40010000 	.word	0x40010000

08003e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f14 <TIM_OC3_SetConfig+0xd0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10d      	bne.n	8003ebe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a14      	ldr	r2, [pc, #80]	@ (8003f14 <TIM_OC3_SetConfig+0xd0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d113      	bne.n	8003eee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	621a      	str	r2, [r3, #32]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40010000 	.word	0x40010000

08003f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a10      	ldr	r2, [pc, #64]	@ (8003fb4 <TIM_OC4_SetConfig+0x9c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d109      	bne.n	8003f8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	019b      	lsls	r3, r3, #6
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000

08003fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	2201      	movs	r2, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1a      	ldr	r2, [r3, #32]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	401a      	ands	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1a      	ldr	r2, [r3, #32]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004018:	2302      	movs	r3, #2
 800401a:	e050      	b.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d018      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004068:	d013      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a18      	ldr	r2, [pc, #96]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d009      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a13      	ldr	r2, [pc, #76]	@ (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10c      	bne.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40014000 	.word	0x40014000

080040e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <memset>:
 8004108:	4402      	add	r2, r0
 800410a:	4603      	mov	r3, r0
 800410c:	4293      	cmp	r3, r2
 800410e:	d100      	bne.n	8004112 <memset+0xa>
 8004110:	4770      	bx	lr
 8004112:	f803 1b01 	strb.w	r1, [r3], #1
 8004116:	e7f9      	b.n	800410c <memset+0x4>

08004118 <__libc_init_array>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	4d0d      	ldr	r5, [pc, #52]	@ (8004150 <__libc_init_array+0x38>)
 800411c:	4c0d      	ldr	r4, [pc, #52]	@ (8004154 <__libc_init_array+0x3c>)
 800411e:	1b64      	subs	r4, r4, r5
 8004120:	10a4      	asrs	r4, r4, #2
 8004122:	2600      	movs	r6, #0
 8004124:	42a6      	cmp	r6, r4
 8004126:	d109      	bne.n	800413c <__libc_init_array+0x24>
 8004128:	4d0b      	ldr	r5, [pc, #44]	@ (8004158 <__libc_init_array+0x40>)
 800412a:	4c0c      	ldr	r4, [pc, #48]	@ (800415c <__libc_init_array+0x44>)
 800412c:	f000 f818 	bl	8004160 <_init>
 8004130:	1b64      	subs	r4, r4, r5
 8004132:	10a4      	asrs	r4, r4, #2
 8004134:	2600      	movs	r6, #0
 8004136:	42a6      	cmp	r6, r4
 8004138:	d105      	bne.n	8004146 <__libc_init_array+0x2e>
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004140:	4798      	blx	r3
 8004142:	3601      	adds	r6, #1
 8004144:	e7ee      	b.n	8004124 <__libc_init_array+0xc>
 8004146:	f855 3b04 	ldr.w	r3, [r5], #4
 800414a:	4798      	blx	r3
 800414c:	3601      	adds	r6, #1
 800414e:	e7f2      	b.n	8004136 <__libc_init_array+0x1e>
 8004150:	080041a8 	.word	0x080041a8
 8004154:	080041a8 	.word	0x080041a8
 8004158:	080041a8 	.word	0x080041a8
 800415c:	080041ac 	.word	0x080041ac

08004160 <_init>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	bf00      	nop
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr

0800416c <_fini>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr
